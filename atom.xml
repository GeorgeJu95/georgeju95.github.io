<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Levi的博客</title>
  <icon>https://www.gravatar.com/avatar/8e1d42746ba8522f6052068579e4a9e9</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="//georgeju95.github.io/"/>
  <updated>2023-08-29T18:58:12.344Z</updated>
  <id>//georgeju95.github.io/</id>
  
  <author>
    <name>Levi Liu</name>
    <email>980998863@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《心灵奇旅》——观后感</title>
    <link href="//georgeju95.github.io/2020/12/30/2020-12-30-Soul-blog/"/>
    <id>//georgeju95.github.io/2020/12/30/2020-12-30-Soul-blog/</id>
    <published>2020-12-30T06:09:00.000Z</published>
    <updated>2023-08-29T18:58:12.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>城市</p><p>[希腊]卡瓦菲斯<br>杨震 译</p><p>你说：“我要去另一片土地，另一片海。<br>找到另一个城市，比这一个更好。<br>我的每次努力都是命运的惩罚；<br>我的心——像行尸走肉——已经埋葬。<br>我的渴望还要在这片荒原盘旋多久。<br>无论我向何处抬眼，无论我往哪看<br>都看到我生命的废墟，在此<br>我虚度了多少年华，不停毁灭，碌碌无为。”</p><p>你找不到新的土地，你找不到另一片海。<br>这座城市将跟随你。你将漫步在同样的<br>街道。你将在同样的邻里间老去；<br>你将在同样的屋子里变得白发苍苍。<br>你抵达的将始终是这座城市。不要指望其他——<br>没有船在等你，没有路在前方。<br>既然你已经在此毁掉你的生活<br>在这个小小角落；你就已经毁掉了它，在整个世界。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离我参加广东省2021年公务员选调考试已经过去十天，这十天我无法安心下来做任何事情，焦急地等着公布考试成绩。各个机构不负责任的公开要么12.25周五出成绩，要么12.28周一出成绩，可是今天已经是12.30日周三……从11月29日参加国考到12月20日参加选调，中间还有一次参加了深圳市市考，三次考试几乎全部败北……</p><h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>乔，一个有着钢琴天赋、对爵士乐有着深刻热爱的平平无奇的音乐老师，他不想做一个日复一日只是平淡工作的全职老师，他想成为一名钢琴演奏家，为爵士乐队伴奏演出。这一天，他终于有了这样一个机会，却阴差阳错的掉进了下水道。。。乔，在“宇宙”中进入了“灵魂的彼岸”以及“生之来处”两个奇异的空间，故事就主要发生在“生之来处”多年来没有找到通往地球的“火花”的灵魂22和主人公乔在重回地球时的一系列见闻，走路、在好朋友店里理发、肚子饿时吃的披萨、和老妈的交心，还有club门前被秋风吹起的片片落叶……于是最后22就在这些生活点滴中不经意的发现了自己的“火花”。</p><p><img src="/assets/blogImg/Soul.jpg" alt></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我有想过，以后到底要去哪个城市，是回湖南离父母近一些、生活压力也小一些的长沙或岳阳，还是一直以来向往的大城市；我也从材料专业毕业后到工厂做过近半年的工艺员，最后随着18年的一波人工智能热潮毅然涌向了计算机；最后当我选择放弃湖南师大的软件工程研究生录取offer，继续选择拼搏一线城市一流学校的计算机研究生，结果失败的很惨。于是来到了华南农业大学攻读两年的计算机专硕，在这里我的心态又有了一些变化，19年积极申请加入中国共产党，并于20年接任了科技部部长一职，我忽然想走一条为人民服务的道路，于是毅然决定了参加应届的几次公考。</p><p>我到底想要啥呢？行业也跨过来了，成为了一名计算机研究生，可我却没有在秋招中去找一份计算机的工作；来到了广州，见识到了大城市的繁华与便利，可我却有点怀念湖南的四季分明，还有父母和一些朋友……卡瓦菲斯的《城市》告诫了我们，“远方”只有作为那不在眼前的“远方”才是理想与慰藉，一旦被抵达，它就失去神秘的光韵。如果你不满意的永远是“现在”和“这里”，那么，这个令人绝望的“现在”和“这里”将永远尾随你。是的，我现在的迷茫大多还是出于根本没有调节好自己，做好迎接未来的准备，你说想留在大城市，可是你的努力程度真的达到了吗？你说你想回去，可是回去了你有能力照顾好父母吗？而不是被他们照顾？你说想考公务员，你又有好好地匹配自己的能力和岗位吗？所以，并不是“换”了就会好，而是你得从心里去为了一个目标去慢慢改造自己，最简单的，以后能不能做到6点半就起床，11点准时躺床上准备入睡。心不安稳，哪里都不是“家”，也无法创造一个属于自己的“家”。</p><p>我们拿到地球通行证不是因为我们有了人生想要追求的意义，而是我们有了对生活的冲动那一刻，我们的生活并非只有目标才存在，而是因为我们呼吸的每一个当下，才有了色彩。乔，最后接纳了“梦想”实现后的样子，不是只演奏一场酣畅淋漓的 live 后就实现了自己的人生意义。我们就像向往“大海”的大海中的鱼，环绕身边的其实都是海水，不要一昧的只是向往那个瞬间，而是接纳每一天的平凡，慢慢发觉我们存在于世的另一番价值，慢慢的为了目标努力，而不做无意义的一时热血和兀自感伤。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;城市&lt;/p&gt;
&lt;p&gt;[希腊]卡瓦菲斯&lt;br&gt;杨震 译&lt;/p&gt;
&lt;p&gt;你说：“我要去另一片土地，另一片海。&lt;br&gt;找到另一个城市，比这一个更好。&lt;br&gt;我的每次努力都是命运的惩罚；&lt;br&gt;我的心——像行尸走肉——已经埋葬。&lt;br&gt;我的渴望还要在这片荒原盘旋多久。&lt;br&gt;无论我向何处抬眼，无论我往哪看&lt;br&gt;都看到我生命的废墟，在此&lt;br&gt;我虚度了多少年华，不停毁灭，碌碌无为。”&lt;/p&gt;
&lt;p&gt;你找不到新的土地，你找不到另一片海。&lt;br&gt;这座城市将跟随你。你将漫步在同样的&lt;br&gt;街道。你将在同样的邻里间老去；&lt;br&gt;你将在同样的屋子里变得白发苍苍。&lt;br&gt;你抵达的将始终是这座城市。不要指望其他——&lt;br&gt;没有船在等你，没有路在前方。&lt;br&gt;既然你已经在此毁掉你的生活&lt;br&gt;在这个小小角落；你就已经毁掉了它，在整个世界。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="人生" scheme="//georgeju95.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>细粒度识别相关调研</title>
    <link href="//georgeju95.github.io/2020/09/03/2020-09-03-fine-grained-recognition-of-butterfly-species-blog/"/>
    <id>//georgeju95.github.io/2020/09/03/2020-09-03-fine-grained-recognition-of-butterfly-species-blog/</id>
    <published>2020-09-03T14:54:00.000Z</published>
    <updated>2023-08-29T18:58:12.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>毕业研究方向</strong>：蝴蝶的细粒度识别，检测 + 识别，创新点设定在如何提高小样本的识别，最后应用做个小程序。</p></blockquote><h2 id="一、什么是细粒度"><a href="#一、什么是细粒度" class="headerlink" title="一、什么是细粒度"></a>一、什么是细粒度</h2><p>简单来说 fine-grained 就是细粒度，fine-grained classification 是细粒度的图像分类。与coarse-grained classification（粗粒度）相比，粗粒度是分辨是猫还是狗——<strong>细粒度是分辨狗这个类别下，这张图是 1.吉娃娃 2.萨摩耶 … n.哈巴狗</strong></p><p>与 coarse grained classification 不同，fine-grained classification 往往需要professional expert 去标注数据，这使得数据更加昂贵。</p><a id="more"></a><p>现在已有的一些 <strong>fine-grained-classification</strong> 方法中，非常直观的借用 category-level information，即“一只吉娃娃以<strong>细小的体型、大眼睛、特别大的耳朵</strong>和<strong>直竖的尾巴</strong>为特征”，结合视觉信息与文字描述信息。</p><p>还有一些使用 <strong>transfer learning</strong> 的方法。由于 ImageNet 里已经包含很多种狗或鸟的图片，与 Stanford Dogs（狗类）或者 CUB（鸟类）有较大重叠部分——这使得单纯的 fine-tuning 都可以得到约等于77%的准确率。那么，我们只需要在此基础上增加一些 domain adaptation 或者 instance-level weighted 的方法就可以将 ImageNet 上训练好的模型“迁移”到适合fine-grained classification的问题上。<a href="https://openaccess.thecvf.com/content_ICCV_2017/papers/Gebru_Fine-Grained_Recognition_in_ICCV_2017_paper.pdf" title="[1]" target="_blank" rel="noopener">[1]</a></p><p>另一类经典的方法是类似于“<strong>注意力机制</strong>”的思想，关注 <strong>informative part of an image</strong>.比如明显可以区分对于区分很多鸟类来说，头这个部位可能是更加重要的，那我们就重点关注喙。将图片分为 image-level 与 part-level (或者说head-level),分别进行特征表示，然后 fusion 进行分类。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;毕业研究方向&lt;/strong&gt;：蝴蝶的细粒度识别，检测 + 识别，创新点设定在如何提高小样本的识别，最后应用做个小程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、什么是细粒度&quot;&gt;&lt;a href=&quot;#一、什么是细粒度&quot; class=&quot;headerlink&quot; title=&quot;一、什么是细粒度&quot;&gt;&lt;/a&gt;一、什么是细粒度&lt;/h2&gt;&lt;p&gt;简单来说 fine-grained 就是细粒度，fine-grained classification 是细粒度的图像分类。与coarse-grained classification（粗粒度）相比，粗粒度是分辨是猫还是狗——&lt;strong&gt;细粒度是分辨狗这个类别下，这张图是 1.吉娃娃 2.萨摩耶 … n.哈巴狗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 coarse grained classification 不同，fine-grained classification 往往需要professional expert 去标注数据，这使得数据更加昂贵。&lt;/p&gt;
    
    </summary>
    
    
      <category term="深度学习" scheme="//georgeju95.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="细粒度识别" scheme="//georgeju95.github.io/tags/%E7%BB%86%E7%B2%92%E5%BA%A6%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>《十诫之爱情短片》——观后感</title>
    <link href="//georgeju95.github.io/2020/07/09/2020-07-09-Dekalog-06-blog/"/>
    <id>//georgeju95.github.io/2020/07/09/2020-07-09-Dekalog-06-blog/</id>
    <published>2020-07-09T12:28:00.000Z</published>
    <updated>2023-08-29T18:58:12.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为今年的疫情原因，1月20日回到岳阳的我直到7月8日才踏上了回学校的火车，在家收拾行李时我准备了一部电影以打发火车上的无聊时间——也就是这部《爱情短片》。</p><a id="more"></a><p>十诫，是《<a href="https://baike.baidu.com/item/圣经/110045" target="_blank" rel="noopener">圣经</a>》记载的上帝借由以色列的先知和众部族首领<a href="https://baike.baidu.com/item/摩西/284757" target="_blank" rel="noopener">摩西</a>向以色列民族颁布的十条规定。波兰导演基耶斯洛夫斯基在摩西十诫的基础上根据个人理解导演了十部短片，分别是：</p><table><thead><tr><th>十诫原文</th><th>基督教的主题</th><th>导演的作品</th></tr></thead><tbody><tr><td>我是耶和华你的神……除了我以外，你不可有别的神。不可为自己雕刻偶像、也不可作什么形像……不可跪拜那些像、也不可事奉他。</td><td>上帝的神圣和对他的崇拜</td><td>《生命无常</td></tr><tr><td>不可妄称耶和华</td><td>话语的神圣性</td><td>《进退维谷》</td></tr><tr><td>当记念安息日、守为圣日。</td><td>时间的神圣性</td><td>《黑夜漫游》</td></tr><tr><td>当尊敬父母。</td><td>权威的神圣性</td><td>《父女迷情》</td></tr><tr><td>不可杀人。</td><td>生命的神圣性</td><td>《杀人短片》</td></tr><tr><td>不可奸淫。</td><td>爱的神圣性</td><td>《爱情短片》</td></tr><tr><td>不可偷盗。</td><td>所属权的神圣性</td><td>《真假母亲》</td></tr><tr><td>不可作假见证陷害人。</td><td>真理的神圣性</td><td>《心灵之罪》</td></tr><tr><td>不可贪恋人的妻子</td><td>满足的神圣性</td><td>《婚姻之锁》</td></tr><tr><td>毋贪他人财物。</td><td>满足的神圣性</td><td>《遗产风波》</td></tr></tbody></table><h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>多梅克是一个天真的孤儿小青年，除了赚钱养活自己，学外语外，还有每天准时准点的偷窥成熟女人玛格达的癖好。多米克的这种癖好又不是猎奇，而是出于纯粹的观赏性爱情，无欲无求的那种（他承认自己曾因偷窥玛格达而手淫，但是总体上讲是比较纯洁的观感）。终于有一天，多米克向玛格达承认了自己的偷窥（两次伪造邮局汇款单，仅仅是为了见玛格达一面），玛格达对此是愤怒、鄙视与不屑，直到看到多米克的付出，感到自己的寂寞后（和恋人感情崩坏，深夜痛哭曾被多梅克窥见），两人开始约会。</p><p><img src="/assets/blogImg/Dekalog-06.mkv_20200709_202743.311-1024x599.jpg" alt></p><p>玛格达年龄大多米克一圈，早就认为爱情是不存在的，与多米克约会只是对后者感兴趣，因为多米克竟然认为爱情是存在的，单纯的像一个孩子，这在看尽繁花的玛格玛眼中是如此有趣。事实正是这样，得到约会允许后，多米克高兴的起舞，就连上帝都为之高兴（十部里都出现的一名男子，此处看见高兴的多梅克淡淡一笑）。最终多米克去了玛格达家里，被玛格达引诱，发现自己根本无法完成露骨的性，在玛格达过度刺激下处男草草射精（玛格达语，不知道实情，也有可能多梅克的爱真的不掺杂过多的爱欲，发现爱变成欲，于是落荒而逃），爱就此破灭。多米克逃回家后割腕自杀，玛格达只当他是害羞对此并不知情。</p><p>直到玛格达意识到多米克的爱是纯粹的爱而不是性，为自己的过失悔恨，开始担心多米克，并爱上了多米克，天天偷窥多米克的房间，等他回来。直到一天看到多米克，本想向他解释，可多米克冷冷的回：“我已经不偷窥你了”。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>基耶斯洛夫斯基有着文人般的敏锐，他对世界客观的背后有独特的洞察力；他有哲人般的沉思，对伦理道德有进入深入的思索与探讨；他又有上帝般的漠然，对人与事有一种高高在上的冷漠与淡然。他的电影类型相对单一，但有强烈的个人风格，从《蓝白红三部曲》可以明显的感知到这种个人特色。</p><p>本作中多梅克因为得到约会许可飞奔的那段，<strong>我想这真的就是爱情，很短暂却也很美好</strong>。玛达拉邀约多梅克去她公寓，到此时玛达拉都是因为想排解心中的寂寞，而对天真的多梅克无特殊意义的施舍。当多梅克因为无法接受要和他一直以来观赏的女神做爱而奔溃弃逃，并在浴室中进行割腕……我能体会到他的无力，远远地看着你，因为你而高兴，因为你的哭泣难受，不惜造假邮寄单也只是为了见到你。可是当真的佳人出现在眼前，并且有机会共度良宵，却又觉得这是单纯的露骨的性，居然无法进行下去，这在某些多人运动爱好者眼中应该是无法理解的吧……</p><p>后面的剧情我觉得是本剧精华，玛达拉因为意识到了多梅克虽然行为不堪，但是感情真挚热烈，想打电话道歉却终究没打，只是写好“对不起”字样的板纸放在窗前想要多梅克看到。可此时的多梅克怎么可能还会偷窥呢？</p><p>意识到不对劲的玛达拉，去四处打探，并且最后从一直照顾多梅克的奶奶那得知了一些真相。此时情场高手，不相信爱情的成熟女人开始感受到了什么，她开始幻想自己脆弱流泪时，多梅克带着忧伤的窥视，想安慰却根本无法抚摸；她开始明白为什么五点钟小伙子就能准时地拉着牛奶车来送牛奶；开始明白每天的闹钟，准时的“偷窥”……</p><p><strong>爱情，是不是嘲弄了她一番呢？</strong>她多年的“经验”让她以为小伙子的爱也不过就是肉欲，以为偷窥狂是想和自己接吻，想和自己做爱，想和自己旅行，总之一定会有所图谋。可是，多梅克却说，“我什么都不要”，最后的邀约也只是想和玛达拉去餐厅吃冰淇淋……玛格达败了，不相信有爱情的她看到了男孩的爱情，也发现自己已经早就失去了爱的能力。</p><p>这部《爱情短片》也许导演就是想探讨步入社会有了种种欲望和约束后的成年人的“爱情”观和真真正正的不奢求任何东西的纯真爱情的区别吧，<strong>不要再说世界上没有爱情，有的，虽然很少，却足够温暖</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为今年的疫情原因，1月20日回到岳阳的我直到7月8日才踏上了回学校的火车，在家收拾行李时我准备了一部电影以打发火车上的无聊时间——也就是这部《爱情短片》。&lt;/p&gt;
    
    </summary>
    
    
      <category term="十诫" scheme="//georgeju95.github.io/tags/%E5%8D%81%E8%AF%AB/"/>
    
      <category term="基耶斯洛夫斯基" scheme="//georgeju95.github.io/tags/%E5%9F%BA%E8%80%B6%E6%96%AF%E6%B4%9B%E5%A4%AB%E6%96%AF%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>YOLOv4 训练自己的数据集</title>
    <link href="//georgeju95.github.io/2020/05/29/2020-05-29-YOLOv4-blog/"/>
    <id>//georgeju95.github.io/2020/05/29/2020-05-29-YOLOv4-blog/</id>
    <published>2020-05-29T07:37:00.000Z</published>
    <updated>2023-08-29T18:58:12.343Z</updated>
    
    <content type="html"><![CDATA[<p>最近出来了YOLOv4，在自己的 WIN 10 上尝试了一下训练自己的数据集。</p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><p>参考作者的 <a href="https://github.com/AlexeyAB/darknet" title="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">GitHub requirements</a> 部分，依次安装好 CMake、CUDA、cuDNN、VS2017。有问题的可以参考 <a href="https://www.bilibili.com/video/BV1HZ4y1s7YF" title="https://www.bilibili.com/video/BV1HZ4y1s7YF" target="_blank" rel="noopener">B站</a> 视频。</p><a id="more"></a><h1 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h1><p>两种方法：</p><ol><li>Legacy way，参考作者的 github 主页。</li><li>CMake 方法，参考B站视频里提到的。</li></ol><h1 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h1><ol><li>确保编译出来的 exe 文件放置到 build-darknet-x64 中</li><li>下载权重文件 yolov4.weights 并放入上面文件夹中</li><li>进入 build-darknet-x64 中执行 darknet.exe detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights -thresh 0.25，之后输入 dog.jpg，即可以看到结果。<br><img src="/assets/blogImg/dog.png" alt></li></ol><h1 id="训练自己的数据集"><a href="#训练自己的数据集" class="headerlink" title="训练自己的数据集"></a>训练自己的数据集</h1><h2 id="标注文件"><a href="#标注文件" class="headerlink" title="标注文件"></a>标注文件</h2><p>对于检测任务，我们选用 <a href="https://github.com/tzutalin/labelImg" title="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">labelImg</a> 标注工具。标注文件时注意把 yolo 格式和 pascalvoc 格式都保存下来，以方便后面的不同情况的格式转换。</p><h2 id="脚本工具"><a href="#脚本工具" class="headerlink" title="脚本工具"></a>脚本工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">fileNames=open(<span class="string">'train.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="comment">#进行路径操作</span></span><br><span class="line">currentRoot=os.getcwd()<span class="comment">#获取当前路径</span></span><br><span class="line">print(currentRoot)</span><br><span class="line">imgRoot=currentRoot+<span class="string">'\data\images'</span><span class="comment">#图片所在路径</span></span><br><span class="line"><span class="comment">#imgRoot=r'F:\darknet\build\darknet\x64\butterfly\data\images'</span></span><br><span class="line">os.chdir(imgRoot)<span class="comment">#切换到图片所在路径</span></span><br><span class="line">print(imgRoot)</span><br><span class="line"><span class="comment">#开始读取文件并将其名称写入一个文件</span></span><br><span class="line"><span class="comment">#fileNames=open('train.txt','w')</span></span><br><span class="line">file=os.listdir(imgRoot)<span class="comment">#读取某个文件下的所有文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">    data=str(i)+<span class="string">'\n'</span></span><br><span class="line">    fileNames.write(imgRoot+<span class="string">'\\'</span>+data)</span><br><span class="line">print(imgRoot)</span><br><span class="line">fileNames.close()</span><br></pre></td></tr></table></figure><p>新建一个叫 butterfly 的文件，里面新建一些文件夹，如下图。其中的 train.txt 是脚本生成的文件<br><img src="/assets/blogImg/file1.png" alt><br>其中 backup 用来存放结果；data 用来存放 images 和 labels （一开始把图片和标注文件分开，脚本生成 train.txt 后，把标注文件再全部复制到 images 文件夹中）；cfg 存放如下文件。<br><img src="/assets/blogImg/file2.png" alt><br>其中 names 文件存放数据集种类名称，我这里只有蝴蝶一种，就填入 butterfly 即可；data文件填入内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classes=1</span><br><span class="line">train=F:\darknet\build\darknet\x64\butterfly\train.txt</span><br><span class="line">names=F:\darknet\build\darknet\x64\butterfly\cfg\butterfly.names</span><br><span class="line">backup=F:\darknet\build\darknet\x64\butterfly\backup</span><br></pre></td></tr></table></figure><h2 id="配置-cfg-文件"><a href="#配置-cfg-文件" class="headerlink" title="配置 cfg 文件"></a>配置 cfg 文件</h2><p>从 darknet\build\darknet\x64\cfg 中复制 yolov4.cfg 并修改为 butterfly.cfg，其中有些内容要修改。参考 <a href="https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects" title="https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects" target="_blank" rel="noopener">how-to-train-to-detect-your-custom-objects</a></p><ol><li>batch=16 和 subdivisions=8<br> 两者都是2的幂次方，后者要小于前者，并且后者的设置要尽可能利用起来显卡，可以通过 nvidia-smi -l -1 查看显卡利用情况。如果显存超出，适当减少两者数值。</li><li>max_batches = 2000<br> 即 epoch 次数，一般是 【数据集类别个数 X 2000】</li><li>steps = 1600,1800<br> 一般设置的是上面最大 epoch 次数的 0.8 和 0.9，当到达这个次数时，会自动微调学习率，所以如果不想用，就设置的超过最大 epoch，万不可设置的过小。</li><li>class = 1<br> 搜索 class 并设置为你的数据集类别个数</li><li>filters = 18<br> 搜索 yolo ，有些 [yolo] 上面的 filters = 255，设置为 【1(类别个数) + 5】X 3，一定是通过搜索 yolo 并且靠近上方的，不要修改到别的 filters 了</li><li>width=416 height=416<ul><li>修改图片大小为 416x416</li></ul></li></ol><h1 id="训练和测试命令"><a href="#训练和测试命令" class="headerlink" title="训练和测试命令"></a>训练和测试命令</h1><p>先下载预训练权重 yolov4.conv.137 并放入 build\darknet\x64。</p><ol><li>训练命令<ul><li>绝对路径：<br>darknet.exe detector train F:\darknet\build\darknet\x64\butterfly\cfg\butterfly.data F:\darknet\build\darknet\x64\butterfly\cfg\butterfly.cfg  yolov4.conv.137</li><li>相对路径：<br>darknet.exe detector train ./butterfly./cfg\butterfly.data ./butterfly/cfg/butterfly.cfg  yolov4.conv.137</li></ul></li><li>测试命令<ul><li>绝对路径：<br>darknet.exe detector test F:\darknet\build\darknet\x64\butterfly\cfg\butterfly.data F:\darknet\build\darknet\x64\butterfly\cfg\butterfly.cfg  F:\darknet\build\darknet\x64\butterfly\backup\butterfly_final.weights 0001.jpg</li><li>相对路径：<br>darknet.exe detector test ./butterfly/cfg/butterfly.data ./butterfly/cfg/butterfly.cfg  ./butterfly/backup/butterfly_final.weights 0001.jpg -thresh 0.9</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近出来了YOLOv4，在自己的 WIN 10 上尝试了一下训练自己的数据集。&lt;/p&gt;
&lt;h1 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h1&gt;&lt;p&gt;参考作者的 &lt;a href=&quot;https://github.com/AlexeyAB/darknet&quot; title=&quot;https://github.com/AlexeyAB/darknet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub requirements&lt;/a&gt; 部分，依次安装好 CMake、CUDA、cuDNN、VS2017。有问题的可以参考 &lt;a href=&quot;https://www.bilibili.com/video/BV1HZ4y1s7YF&quot; title=&quot;https://www.bilibili.com/video/BV1HZ4y1s7YF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站&lt;/a&gt; 视频。&lt;/p&gt;
    
    </summary>
    
    
      <category term="深度学习" scheme="//georgeju95.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="YOLO" scheme="//georgeju95.github.io/tags/YOLO/"/>
    
  </entry>
  
  <entry>
    <title>WordPress-Nginx-Docker 搭建博客</title>
    <link href="//georgeju95.github.io/2020/05/01/2020-05-01-A-summary-of-WordPress-personal-blog/"/>
    <id>//georgeju95.github.io/2020/05/01/2020-05-01-A-summary-of-WordPress-personal-blog/</id>
    <published>2020-05-01T08:53:00.000Z</published>
    <updated>2023-08-29T18:58:12.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要条件"><a href="#需要条件" class="headerlink" title="需要条件"></a>需要条件</h2><ul><li>购买一个云服务器（ 本人使用的是阿里云的 ECS ）</li><li>购买一个域名并解析域名（ cn 域名需要一个月左右的备案时间 ）</li><li>准备远程 SSH 连接软件 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" title="Putty" target="_blank" rel="noopener">Putty</a> 以及 SFTP 软件 <a href="https://filezilla-project.org/" title="filezilla 客户端" target="_blank" rel="noopener">filezilla 客户端</a></li></ul><a id="more"></a><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><ul><li><p><strong>远程连接上服务器，为了方便，系统我使用的 Ubuntu 18，给终端装上 zsh 工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装zsh 和 oh my zsh ( 通过 curl )</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用户主题和插件选项</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 更改主题。ZSH_THEME="robbyrussell" 改为 ZSH_THEME="ys"</span></span><br><span class="line"><span class="comment"># 更改插件设置, x 命令解压一切文件，z命令快速跳转目录，google 直接搜索内容。</span></span><br><span class="line"><span class="comment"># plugins=(git) 改为 plugins=(git z extract web-search zsh-syntax-highlighting zsh-autosuggestions)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新设置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 把 Docker CE 的稳定(stable)版本安装在系统中。</span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line">// 启动 Docker CE</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">// Docker Compose 存放在 GitHub，不太稳定，使用国内镜像</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">// 国内镜像源加速</span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line">// 修改后重启服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p><strong>克隆远程仓库，开始部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mjstealey/wordpress-nginx-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件中的数据库密码</span></span><br><span class="line">cp .env_example .env</span><br><span class="line">vim .env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 docker-compose.yml 一件布置 PHP 和 MySQL 环境</span></span><br><span class="line">mkdir -p certs/ certs-data/ logs/nginx/ mysql/ wordpress/</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 SSL 使用到的 conf 文件</span></span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">cp default.conf default.conf.template</span><br><span class="line">cp default_https.conf.template default.conf</span><br><span class="line">vim default.conf</span><br><span class="line">把全部 FQDN_OR_IP 换位自己的域名</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's Encrypt 对应目录下</span></span><br><span class="line">./letsencrypt-init.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应目录下</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li></ul><h2 id="主题更换和插件安装"><a href="#主题更换和插件安装" class="headerlink" title="主题更换和插件安装"></a>主题更换和插件安装</h2><ul><li>主题和插件都是下载后利用 SFTP 软件上传到服务器 WordPress 下面的相应 themes 和 plugins 文件夹下</li><li>推荐 <a href="https://github.com/Vtrois/Kratos" title="Kratos 主题" target="_blank" rel="noopener">Kratos 主题</a></li><li>Markdown 插件必装 <a href="https://wordpress.org/plugins/wp-editormd/" title="wp-editormd" target="_blank" rel="noopener">wp-editormd</a></li><li>Markdown 显示目录插件 <a href="https://wordpress.org/plugins/table-of-contents-plus/#description" title="table-of-contents-plus" target="_blank" rel="noopener">table-of-contents-plus</a></li></ul><h2 id="Enjoy-it"><a href="#Enjoy-it" class="headerlink" title="Enjoy it!"></a>Enjoy it!</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需要条件&quot;&gt;&lt;a href=&quot;#需要条件&quot; class=&quot;headerlink&quot; title=&quot;需要条件&quot;&gt;&lt;/a&gt;需要条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购买一个云服务器（ 本人使用的是阿里云的 ECS ）&lt;/li&gt;
&lt;li&gt;购买一个域名并解析域名（ cn 域名需要一个月左右的备案时间 ）&lt;/li&gt;
&lt;li&gt;准备远程 SSH 连接软件 &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot; title=&quot;Putty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Putty&lt;/a&gt; 以及 SFTP 软件 &lt;a href=&quot;https://filezilla-project.org/&quot; title=&quot;filezilla 客户端&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;filezilla 客户端&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="WordPress" scheme="//georgeju95.github.io/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Java：反射 &amp; JDK新特性</title>
    <link href="//georgeju95.github.io/2020/03/09/Java-Learing-day-14-Reflection-and-JDK-New-Features/"/>
    <id>//georgeju95.github.io/2020/03/09/Java-Learing-day-14-Reflection-and-JDK-New-Features/</id>
    <published>2020-03-09T12:02:36.000Z</published>
    <updated>2023-08-29T18:58:12.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载概述和加载时机"><a href="#类的加载概述和加载时机" class="headerlink" title="类的加载概述和加载时机"></a>类的加载概述和加载时机</h3><ul><li>A:类的加载概述<ul><li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</li><li>加载 <ul><li>就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象。</li></ul></li><li>连接<ul><li>验证 是否有正确的内部结构，并和其他类协调一致</li><li>准备 负责为类的静态成员分配内存，并设置默认初始化值</li><li>解析 将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li>初始化 就是我们以前讲过的初始化步骤</li></ul></li></ul><a id="more"></a><ul><li>B:加载时机<ul><li>创建类的实例</li><li>访问类的静态变量，或者为静态变量赋值</li><li>调用类的静态方法</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li></ul><h3 id="类加载器的概述和分类"><a href="#类加载器的概述和分类" class="headerlink" title="类加载器的概述和分类"></a>类加载器的概述和分类</h3><ul><li>A:类加载器的概述<ul><li>负责将.class文件加载到内存中，并为之生成对应的Class对象。虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行。</li></ul></li><li>B:类加载器的分类<ul><li>Bootstrap ClassLoader 根类加载器</li><li>Extension ClassLoader 扩展类加载器</li><li>Sysetm ClassLoader 系统类加载器</li></ul></li><li>C:类加载器的作用<ul><li>Bootstrap ClassLoader 根类加载器<ul><li>也被称为引导类加载器，负责Java核心类的加载</li><li>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</li></ul></li><li>Extension ClassLoader 扩展类加载器<ul><li>负责JRE的扩展目录中jar包的加载。</li><li>在JDK中JRE的lib目录下ext目录</li></ul></li><li>Sysetm ClassLoader 系统类加载器<ul><li>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</li></ul></li></ul></li></ul><h3 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h3><ul><li><p>A:反射概述</p><ul><li>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</li><li>对于任意一个对象，都能够调用它的任意一个方法和属性；</li><li>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</li><li>要想解剖一个类,必须先要获取到该类的字节码文件对象。</li><li>而解剖使用的就是Class类中的方法，所以先要获取到每一个字节码文件对应的Class类型的对象。</li></ul></li><li><p>B:三种方式</p><ul><li>a:Object类的getClass()方法,判断两个对象是否是同一个字节码文件</li><li>b:静态属性class,锁对象</li><li>c:Class类中静态方法forName(),读取配置文件</li></ul></li><li><p>C:案例演示</p><ul><li><p>获取class文件对象的三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Reflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">Class clazz1 = Class.forName(<span class="string">"com.heima.bean.Person"</span>);</span><br><span class="line">Class clazz2 = Person.class;</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz3 = p.getClass();</span><br><span class="line"></span><br><span class="line">System.out.println(clazz1 == clazz2);</span><br><span class="line">System.out.println(clazz2 == clazz3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Class-forName-读取配置文件举例"><a href="#Class-forName-读取配置文件举例" class="headerlink" title="Class.forName()读取配置文件举例"></a>Class.forName()读取配置文件举例</h3><ul><li>榨汁机(Juicer)榨汁的案例</li><li>分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Reflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 榨汁机(Juicer)榨汁的案例</span></span><br><span class="line"><span class="comment"> * 分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Juicer j = <span class="keyword">new</span> Juicer();<span class="comment">//创建榨汁机</span></span><br><span class="line"><span class="comment">//j.run(new Apple());</span></span><br><span class="line"><span class="comment">//j.run(new Orange());</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"config.properties"</span>));</span><br><span class="line">Class clazz = Class.forName(br.readLine());<span class="comment">//获取该类的字节码文件</span></span><br><span class="line">Fruit f = (Fruit) clazz.newInstance();<span class="comment">//创建实例对象</span></span><br><span class="line">j.run(f);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯苹果汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯橘子汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Juicer</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public void run(Apple a) &#123;</span></span><br><span class="line"><span class="comment">a.squeeze();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void run(Orange o) &#123;</span></span><br><span class="line"><span class="comment">o.squeeze();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Fruit f)</span> </span>&#123;</span><br><span class="line">f.squeeze();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[config.properties]</span><br><span class="line">com.heima.reflect.Apple</span><br></pre></td></tr></table></figure><h3 id="通过反射获取带参构造方法并使用"><a href="#通过反射获取带参构造方法并使用" class="headerlink" title="通过反射获取带参构造方法并使用"></a>通过反射获取带参构造方法并使用</h3><ul><li><p>Constructor</p><ul><li><p>Class类的newInstance()方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数, 就不能这样创建了,可以调用Class类的getConstructor(String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance(“张三”,20)方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">[Person.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">result = prime * result + age;</span><br><span class="line">result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getClass() != obj.getClass())<span class="comment">//判断调用对象和传入对象的字节码文件是否是同一个字节码文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Person other = (Person) obj;</span><br><span class="line"><span class="keyword">if</span> (age != other.age)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"今天吃了一顿金钱豹"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"今天吃了"</span> + num + <span class="string">"顿金钱豹"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Demo3_Constructor.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Constructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class类的newInstance()方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数,</span></span><br><span class="line"><span class="comment"> * 就不能这样创建了,可以调用Class类的getConstructor</span></span><br><span class="line"><span class="comment"> * (String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance</span></span><br><span class="line"><span class="comment"> * ("张三",20)方法创建对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.heima.bean.Person"</span>);</span><br><span class="line"><span class="comment">//Person p = (Person) clazz.newInstance();通过无参构造创建对象</span></span><br><span class="line"><span class="comment">//System.out.println(p);</span></span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取有参构造</span></span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">"张三"</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="通过反射获取成员变量并使用"><a href="#通过反射获取成员变量并使用" class="headerlink" title="通过反射获取成员变量并使用"></a>通过反射获取成员变量并使用</h3><ul><li><p>Field</p><ul><li><p>Class.getField(String)方法可以获取类中的指定字段(可见的), 如果是私有的可以用getDeclaedField(“name”)方法获取,通过set(obj, “李四”)方法可以设置指定对象上该字段的值, 如果是私有的需要先调用setAccessible(true)设置访问权限,用获取的指定的字段调用get(obj)可以获取指定对象中该字段的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Field</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class.getField(String)方法可以获取类中的指定字段(可见的),</span></span><br><span class="line"><span class="comment"> * 如果是私有的可以用getDeclaedField("name")方法获取,通过set(obj, "李四")方法可以设置指定对象上该字段的值,</span></span><br><span class="line"><span class="comment"> * 如果是私有的需要先调用setAccessible(true)设置访问权限,用获取的指定的字段调用get(obj)可以获取指定对象中该字段的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.heima.bean.Person"</span>);</span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取有参构造</span></span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">"张三"</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Field f = clazz.getField("name");//获取姓名字段</span></span><br><span class="line"><span class="comment">//f.set(p, "李四");//修改姓名的值</span></span><br><span class="line">Field f = clazz.getDeclaredField(<span class="string">"name"</span>);<span class="comment">//暴力反射获取字段</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//去除私有权限</span></span><br><span class="line">f.set(p, <span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="通过反射获取方法并使用"><a href="#通过反射获取方法并使用" class="headerlink" title="通过反射获取方法并使用"></a>通过反射获取方法并使用</h3><ul><li><p>Method</p><ul><li><p>Class.getMethod(String, Class…) 和 Class.getDeclaredMethod(String, Class…)方法可以获取类中的指定方法,调用invoke(Object, Object…)可以调用该方法,Class.getMethod(“eat”) invoke(obj) Class.getMethod(“eat”,int.class) invoke(obj,10)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class.getMethod(String, Class...) 和 Class.getDeclaredMethod(String,</span></span><br><span class="line"><span class="comment"> * Class...)方法可以获取类中的指定方法,调用invoke(Object,</span></span><br><span class="line"><span class="comment"> * Object...)可以调用该方法,Class.getMethod("eat") invoke(obj)</span></span><br><span class="line"><span class="comment"> * Class.getMethod("eat",int.class) invoke(obj,10)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.heima.bean.Person"</span>);</span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取有参构造</span></span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">"张三"</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line"></span><br><span class="line">Method m = clazz.getMethod(<span class="string">"eat"</span>);<span class="comment">//获取eat方法</span></span><br><span class="line">m.invoke(p);</span><br><span class="line"></span><br><span class="line">Method m2 = clazz.getMethod(<span class="string">"eat"</span>, <span class="keyword">int</span>.class);<span class="comment">//获取有参的eat方法</span></span><br><span class="line">m2.invoke(p, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="通过反射越过泛型检查"><a href="#通过反射越过泛型检查" class="headerlink" title="通过反射越过泛型检查"></a>通过反射越过泛型检查</h3><ul><li><p>A:案例演示</p><ul><li><p>ArrayList<integer>的一个对象，在这个集合中添加一个字符串数据，如何实现呢？</integer></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;Integer&gt;的一个对象，在这个集合中添加一个字符串数据，如何实现呢？</span></span><br><span class="line"><span class="comment"> * 泛型只在编译期有效,在运行期会被擦除掉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">111</span>);</span><br><span class="line">list.add(<span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">Class clazz = Class.forName(<span class="string">"java.util.ArrayList"</span>);<span class="comment">//获取字节码对象</span></span><br><span class="line">Method m = clazz.getMethod(<span class="string">"add"</span>, Object.class);<span class="comment">//获取add方法</span></span><br><span class="line">m.invoke(list, <span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="通过反射写一个通用的设置某个对象的某个属性为指定的值"><a href="#通过反射写一个通用的设置某个对象的某个属性为指定的值" class="headerlink" title="通过反射写一个通用的设置某个对象的某个属性为指定的值"></a>通过反射写一个通用的设置某个对象的某个属性为指定的值</h3><ul><li><p>A:案例演示</p><ul><li><p>public void setProperty(Object obj, String propertyName, Object value){}，此方法可将obj对象中名为propertyName的属性的值设置为value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[Tool.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line"><span class="comment">//此方法可将obj对象中名为propertyName的属性的值设置为value。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperty</span><span class="params">(Object obj, String propertyName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = obj.getClass();<span class="comment">//获取字节码对象</span></span><br><span class="line">Field f = clazz.getDeclaredField(propertyName);<span class="comment">//暴力反射获取字段</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//去除权限</span></span><br><span class="line">f.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Test3.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment">* public void setProperty(Object obj, String propertyName, Object value)&#123;&#125;，</span></span><br><span class="line"><span class="comment">* 此方法可将obj对象中名为propertyName的属性的值设置为value。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Student s = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">Tool t = <span class="keyword">new</span> Tool();</span><br><span class="line">t.setProperty(s, <span class="string">"name"</span>, <span class="string">"李四"</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>已知一个类，定义如下：    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"welcome to heima!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code> * (1) 写一个Properties格式的配置文件，配置类的完整名称。  * (2) 写一个程序，读取这个Properties配置文件，获得类的完整名称并加载这个类，用反射的方式运行run方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[xxx.properties]</span><br><span class="line"></span><br><span class="line">com.heima.test.DemoClass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[DemoClass.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"welcome to heima!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Test2.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 已知一个类，定义如下： </span></span><br><span class="line"><span class="comment"> * package cn.itcast.heima;</span></span><br><span class="line"><span class="comment"> * public class DemoClass &#123;</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("welcome to heima!");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> * (1) 写一个Properties格式的配置文件，配置类的完整名称。 </span></span><br><span class="line"><span class="comment"> * (2) 写一个程序，读取这个Properties配置文件，获得类的完整名称并加载这个类，用反射的方式运行run方法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx.properties"</span>));<span class="comment">//创建输入流关联xxx.properties</span></span><br><span class="line">Class clazz = Class.forName(br.readLine());<span class="comment">//读取配置文件中类名,获取字节码对象</span></span><br><span class="line"></span><br><span class="line">DemoClass dc = (DemoClass) clazz.newInstance();<span class="comment">//通过字节码对象创建对象</span></span><br><span class="line">dc.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="动态代理的概述和实现"><a href="#动态代理的概述和实现" class="headerlink" title="动态代理的概述和实现"></a>动态代理的概述和实现</h3><ul><li><p>A:动态代理概述</p><ul><li><p>代理：本来应该自己做的事情，请了别人来做，被请的人就是代理对象。</p></li><li><p>举例：春节回家买票让人代买</p></li><li><p>动态代理：在程序运行过程中产生的这个对象,而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理</p></li><li><p>在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib，Proxy类中的方法创建动态代理类对象</p></li><li><p>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</p></li><li><p>最终会调用InvocationHandler的方法</p></li><li><p>InvocationHandler Object invoke(Object proxy,Method method,Object[] args)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">[User.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[UserImp.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImp</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("权限校验");</span></span><br><span class="line">System.out.println(<span class="string">"添加功能"</span>);</span><br><span class="line"><span class="comment">//System.out.println("日志记录");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("权限校验");</span></span><br><span class="line">System.out.println(<span class="string">"删除功能"</span>);</span><br><span class="line"><span class="comment">//System.out.println("日志记录");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Test.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//UserImp ui = new UserImp();</span></span><br><span class="line"><span class="comment">//ui.add();</span></span><br><span class="line"><span class="comment">//ui.delete();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println("-------------------------------");</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment"> * InvocationHandler h)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//MyInvocationHandler m = new MyInvocationHandler(ui);</span></span><br><span class="line"><span class="comment">//User u = (User)Proxy.newProxyInstance(ui.getClass().getClassLoader(), ui.getClass().getInterfaces(), m);</span></span><br><span class="line"><span class="comment">//u.add();</span></span><br><span class="line"><span class="comment">//u.delete();</span></span><br><span class="line"></span><br><span class="line">StudentImp si = <span class="keyword">new</span> StudentImp();</span><br><span class="line">si.login();</span><br><span class="line">si.submit();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">    </span><br><span class="line">MyInvocationHandler m = <span class="keyword">new</span> MyInvocationHandler(si);</span><br><span class="line">Student s = (Student)Proxy.newProxyInstance(si.getClass().getClassLoader(), si.getClass().getInterfaces(), m);</span><br><span class="line"></span><br><span class="line">s.login();</span><br><span class="line">s.submit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[MyInvocationHandler.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"权限校验"</span>);</span><br><span class="line">method.invoke(target, args);<span class="comment">//执行被代理target对象的方法</span></span><br><span class="line">System.out.println(<span class="string">"日志记录"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Student.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[StudentImp.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentImp</span> <span class="keyword">implements</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"登录"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"提交"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="模版-Template-设计模式概述和使用"><a href="#模版-Template-设计模式概述和使用" class="headerlink" title="模版(Template)设计模式概述和使用"></a>模版(Template)设计模式概述和使用</h3><ul><li><p>A:模版设计模式概述</p><ul><li><p>模版方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.模版方法设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*long start = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">for(int i = 0; i &lt; 1000000; i++) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("x");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">long end = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">System.out.println(end - start);*/</span></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">System.out.println(d.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GetTime</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">code();</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">return</span> end - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">GetTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"x"</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>B:优点和缺点<ul><li>a:优点<ul><li>使用模版方法模式，在定义算法骨架的同时，可以很灵活的实现具体的算法，满足用户灵活多变的需求</li></ul></li><li>b:缺点<ul><li>如果算法骨架有修改的话，则需要修改抽象类<br>1,装饰<br>2,单例<br>3,简单工厂<br>4,工厂方法<br>5,适配器<br>6,模版</li></ul></li></ul></li></ul><h3 id="JDK5新特性-自己实现枚举类"><a href="#JDK5新特性-自己实现枚举类" class="headerlink" title="JDK5新特性(自己实现枚举类)"></a>JDK5新特性(自己实现枚举类)</h3><ul><li>A:枚举概述<ul><li>是指将变量的值一一列出来,变量的值只限于列举出来的值的范围内。举例：一周只有7天，一年只有12个月等。</li></ul></li><li>B:回想单例设计模式：单例类是一个类只有一个实例<ul><li>那么多例类就是一个类有多个实例，但不是无限个数的实例，而是有限个数的实例。这才能是枚举类。</li></ul></li><li>C:案例演示<ul><li>自己实现枚举类<br>1,自动拆装箱<br>2,泛型<br>3,可变参数<br>4,静态导入<br>5,增强for循环<br>6,互斥锁<br>7,枚举<h3 id="JDK5新特性-通过enum实现枚举类"><a href="#JDK5新特性-通过enum实现枚举类" class="headerlink" title="JDK5新特性(通过enum实现枚举类)"></a>JDK5新特性(通过enum实现枚举类)</h3></li></ul></li><li>A:案例演示<ul><li>通过enum实现枚举类</li></ul></li></ul><h3 id="JDK5新特性-枚举的注意事项"><a href="#JDK5新特性-枚举的注意事项" class="headerlink" title="JDK5新特性(枚举的注意事项)"></a>JDK5新特性(枚举的注意事项)</h3><ul><li>A:案例演示<ul><li>定义枚举类要用关键字enum</li><li>所有枚举类都是Enum的子类</li><li>枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他的东西，这个分号就不能省略。建议不要省略</li><li>枚举类可以有构造器，但必须是private的，它默认的也是private的。</li><li>枚举类也可以有抽象方法，但是枚举项必须重写该方法</li><li>枚举在switch语句中的使用</li></ul></li></ul><h3 id="JDK5新特性-枚举类的常见方法"><a href="#JDK5新特性-枚举类的常见方法" class="headerlink" title="JDK5新特性(枚举类的常见方法)"></a>JDK5新特性(枚举类的常见方法)</h3><ul><li><p>A:枚举类的常见方法</p><ul><li>int ordinal()</li><li>int compareTo(E o)</li><li>String name()</li><li>String toString()</li><li><t> T valueOf(Class<t> type,String name)</t></t></li><li>values() </li><li>此方法虽然在JDK文档中查找不到，但每个枚举类都具有该方法，它遍历枚举类的所有枚举值非常方便</li></ul></li><li><p>B:案例演示</p><ul><li><p>枚举类的常见方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[Week2.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.枚举<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Week2 &#123;</span><br><span class="line">MON(<span class="string">"星期一"</span>),TUE(<span class="string">"星期二"</span>),WED(<span class="string">"星期三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Week2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Demo2_Enum.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.枚举<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Enum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int ordinal()</span></span><br><span class="line"><span class="comment">* int compareTo(E o)</span></span><br><span class="line"><span class="comment">* String name()</span></span><br><span class="line"><span class="comment">* String toString()</span></span><br><span class="line"><span class="comment">* &lt;T&gt; T valueOf(Class&lt;T&gt; type,String name)</span></span><br><span class="line"><span class="comment">* values() </span></span><br><span class="line"><span class="comment">* 此方法虽然在JDK文档中查找不到，但每个枚举类都具有该方法，它遍历枚举类的所有枚举值非常方便</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//Week2 mon = Week2.valueOf(Week2.class, "MON");//通过字节码对象获取枚举项</span></span><br><span class="line"><span class="comment">//System.out.println(mon);</span></span><br><span class="line"></span><br><span class="line">Week2[] arr = Week2.values();</span><br><span class="line"><span class="keyword">for</span> (Week2 week2 : arr) &#123;</span><br><span class="line">System.out.println(week2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Week2 mon = Week2.MON;</span><br><span class="line">Week2 tue = Week2.TUE;</span><br><span class="line">Week2 wed = Week2.WED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(mon.ordinal());//枚举项都是有编号的</span></span><br><span class="line"><span class="comment">System.out.println(tue.ordinal());</span></span><br><span class="line"><span class="comment">System.out.println(wed.ordinal());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(mon.compareTo(tue));//比较的是编号</span></span><br><span class="line"><span class="comment">System.out.println(mon.compareTo(wed));*/</span></span><br><span class="line"></span><br><span class="line">System.out.println(mon.name()); <span class="comment">//获取实例名称</span></span><br><span class="line">System.out.println(mon.toString()); <span class="comment">//调用重写之后的toString方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JDK7新特性-六个新特性回顾和讲解"><a href="#JDK7新特性-六个新特性回顾和讲解" class="headerlink" title="JDK7新特性(六个新特性回顾和讲解)"></a>JDK7新特性(六个新特性回顾和讲解)</h3><ul><li>A:二进制字面量</li><li>B:数字字面量可以出现下划线</li><li>C:switch 语句可以用字符串</li><li>D:泛型简化,菱形泛型</li><li>E:异常的多个catch合并,每个异常用或|</li><li>F:try-with-resources 语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.jdk7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_JDK7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A:二进制字面量</span></span><br><span class="line"><span class="comment">* B:数字字面量可以出现下划线</span></span><br><span class="line"><span class="comment">* C:switch 语句可以用字符串</span></span><br><span class="line"><span class="comment">* D:泛型简化,菱形泛型</span></span><br><span class="line"><span class="comment">* E:异常的多个catch合并,每个异常用或|</span></span><br><span class="line"><span class="comment">* F:try-with-resources 语句,1.7版标准的异常处理代码</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 100_000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">0b110</span>);</span><br><span class="line">System.out.println(<span class="number">100_000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h3><ul><li>接口中可以定义有方法体的方法,如果是非静态,必须用default修饰    </li><li>如果是静态的就不用了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*Demo d = new Demo();</span></span><br><span class="line"><span class="comment">d.print();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Inter.method();*/</span></span><br><span class="line"></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"static method"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//JDK8,前面的final可以省略(7版本局部内部类使用局部变量，局部变量前必须final修饰)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">i.fun();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?</strong><br>因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,也可以继续使用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类的加载概述和加载时机&quot;&gt;&lt;a href=&quot;#类的加载概述和加载时机&quot; class=&quot;headerlink&quot; title=&quot;类的加载概述和加载时机&quot;&gt;&lt;/a&gt;类的加载概述和加载时机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:类的加载概述&lt;ul&gt;
&lt;li&gt;当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。&lt;/li&gt;
&lt;li&gt;加载 &lt;ul&gt;
&lt;li&gt;就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连接&lt;ul&gt;
&lt;li&gt;验证 是否有正确的内部结构，并和其他类协调一致&lt;/li&gt;
&lt;li&gt;准备 负责为类的静态成员分配内存，并设置默认初始化值&lt;/li&gt;
&lt;li&gt;解析 将类的二进制数据中的符号引用替换为直接引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化 就是我们以前讲过的初始化步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java项目：一本糊涂账</title>
    <link href="//georgeju95.github.io/2020/03/09/Java-Learing-day-15-Project-hutubill/"/>
    <id>//georgeju95.github.io/2020/03/09/Java-Learing-day-15-Project-hutubill/</id>
    <published>2020-03-09T12:02:36.000Z</published>
    <updated>2023-08-29T18:58:12.348Z</updated>
    
    <content type="html"><![CDATA[<p>本项目基于Swing和JDBC开发的图形界面桌面应用，涵盖了J2SE的绝大部分基础知识，通过这个项目能运用和锻炼几乎大部分的J2SE知识和技能。涉及到如下内容：</p><p><strong>基础内容：</strong>面向对象 字符串数字 日期</p><p><strong>中级内容：</strong>异常 ，集合，JDBC, 反射机制，I/O，Swing， 利用TableModel更新数据, 图形界面的皮肤</p><p><strong>高级内容：</strong>图表chart动态生成，数据库的备份与恢复，自定义圆形进度条</p><p><strong>软件设计思想：</strong>单例模式，面板类与监听器类松耦合，Entity层设计，DAO层设计，Service层设计</p><p><strong>业务常见处理手法：</strong>CRUD操作，配置信息，配置信息初始化，报表生成，一对多关系，多对一关系</p><a id="more"></a><h3 id="一、表结构设计"><a href="#一、表结构设计" class="headerlink" title="一、表结构设计"></a>一、表结构设计</h3><p>在专门的表结构设计章节里，会把每张表列出来，<strong>每个字段的意义</strong>，类型，<strong>限制</strong>。 表与表之间的关系，<strong>一对多关系，多对一关系</strong>如何确定与设计。<strong>主键约束</strong>，<strong>外键约束</strong>等等信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hutubill;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span>  hutubill;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> config (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> AUTO_INCREMENT,</span><br><span class="line">  key_ <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line">  <span class="keyword">value</span> <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="built_in">record</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> AUTO_INCREMENT,</span><br><span class="line">  spend <span class="built_in">int</span>,</span><br><span class="line">  cid <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">comment</span> <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line">  <span class="built_in">date</span> <span class="built_in">Date</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_record_category`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`cid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`category`</span> (<span class="string">`id`</span>)</span><br><span class="line">)  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h3 id="二、原型设计"><a href="#二、原型设计" class="headerlink" title="二、原型设计"></a>二、原型设计</h3><p>什么是原型设计呢？ 简单说，就是先把界面做出来。 界面上的数据，都是假数据，并不是从数据库中读取的真实数据。</p><p>为什么要这么做呢？ 有了界面，才直观，你才会更有感觉，也才能更清楚各个功能之间怎么实现。 更重要的是，有了界面，才能<strong>更有效的和客户沟通</strong>，哪些功能需要修改，哪些功能可以删减。</p><p>原型这个模块涵盖<strong>包的设计与规划</strong>，<strong>工具类的抽象</strong>，自定义界面类，各种面板类等等。</p><ul><li><p><strong>单例模式</strong>。比如SpendPanel，只需要一个实例就可以了，<strong>不需要每次显示这个面板的时候都创建新的实例</strong>。 不仅是不需要，<strong>也不应该</strong>每一次都创建新的实例。</p><ul><li><p><strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。 并且有<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793" target="_blank" rel="noopener">线程安全</a>的考量。<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p></li><li><p>单例模式三元素</p><ul><li>构造方法私有化</li><li>静态属性指向实例</li><li>public static 的 getInstance方法，返回上面的静态属性</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">饿汉式单例模式</span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">懒汉式单例模式</span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//public static 方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 instance指向的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一些工具类，一些常用的功能全添加到工具包中，以后需要使用就直接调用</li></ul><p>比如Swing并没有提供一种可以很简单就居中的布局器，但是这样的布局器又很常见，所以在这里就自己开发一个专门用于居中的面板。</p><p>首先设计一个类，继承了JPanel，有<strong>三个属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> rate;<span class="comment">//拉伸比例</span></span><br><span class="line"><span class="keyword">private</span> JComponent c; <span class="comment">//显示的组件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> strech; <span class="comment">//是否拉伸</span></span><br></pre></td></tr></table></figure><p><strong>show(JComponent c)</strong></p><p>使用show方法显示组件，show方法中的思路是：先把这个容器中的组件都移出，然后把新的组件加进来，并且调用updateUI进行界面渲染。updateUI会导致swing去调用repaint()方法。</p><p>在repaint方法中，就会使用绝对定位的方式把组件放在中间位置。如果strech是true，就会根据整个容器的大小，设置组件的大小，达到拉伸的效果；如果strech是false, 就使用组件的preferredSize，即非拉伸效果。</p><p><strong>构造方法 public CenterPanel(double rate, boolean strech)</strong></p><p>rate 表示拉伸比例，1就是填满，0.5就是填一半。strech 表示是否拉伸</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JComponent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CenterPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;<span class="comment">//拉伸比例</span></span><br><span class="line">    <span class="keyword">private</span> JComponent c; <span class="comment">//显示的组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> strech; <span class="comment">//是否拉伸</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CenterPanel</span><span class="params">(<span class="keyword">double</span> rate,<span class="keyword">boolean</span> strech)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.strech = strech;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CenterPanel</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(rate,<span class="keyword">true</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != c) &#123;</span><br><span class="line">            Dimension containerSize = <span class="keyword">this</span>.getSize();</span><br><span class="line">            Dimension componentSize= c.getPreferredSize();</span><br><span class="line">              </span><br><span class="line">            <span class="keyword">if</span>(strech)</span><br><span class="line">                c.setSize((<span class="keyword">int</span>) (containerSize.width * rate), (<span class="keyword">int</span>) (containerSize.height * rate));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c.setSize(componentSize);</span><br><span class="line">  </span><br><span class="line">            c.setLocation(containerSize.width / <span class="number">2</span> - c.getSize().width / <span class="number">2</span>, containerSize.height / <span class="number">2</span> - c.getSize().height / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.repaint();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(JComponent p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = p;</span><br><span class="line">        Component[] cs = getComponents();</span><br><span class="line">        <span class="keyword">for</span> (Component c : cs) &#123;</span><br><span class="line">            remove(c);</span><br><span class="line">        &#125;</span><br><span class="line">        add(p);</span><br><span class="line">        <span class="keyword">this</span>.updateUI();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame();</span><br><span class="line">        f.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        CenterPanel cp = <span class="keyword">new</span> CenterPanel(<span class="number">0.85</span>,<span class="keyword">true</span>);</span><br><span class="line">        f.setContentPane(cp);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        JButton b = <span class="keyword">new</span> JButton(<span class="string">"abc"</span>);</span><br><span class="line">        cp.show(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、实体类与DAO的设计"><a href="#三、实体类与DAO的设计" class="headerlink" title="三、实体类与DAO的设计"></a>三、实体类与DAO的设计</h3><p>在开始功能开发之前，首先要设计实体类与DAO。相关的数据库操作，都经由DAO来完成。</p><p>实体类Entity 有很多种其他的说法，比如Bean,JavaBean, pojo等等，其实都是相近的东西。</p><p>实体类Entity 是<strong>用于映射表中的一条一条数据</strong>的。比如分类表Category，有很多条分类记录，那么就有一个类也叫做Category，这个类的一个一个的实例，就对应了表Category中的一条一条的记录。</p><p>ConfigDAO专门用于把Config实例与Config表进行ORM映射。<br><strong>ORM映射</strong>是什么呢？ 简单点理解就是ConfigDAO负责把Config实例转换成一条Config表中的记录，反过来，又把Config表中的记录转换为一个Config实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Config;</span><br><span class="line"><span class="keyword">import</span> util.DBUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigDAO</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select count(*) from config"</span>;</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"total:"</span> + total);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String sql = <span class="string">"insert into config values(null,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">            ps.setString(<span class="number">1</span>, config.key);</span><br><span class="line">            ps.setString(<span class="number">2</span>, config.value);</span><br><span class="line">            ps.execute();</span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                config.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String sql = <span class="string">"update config set key_= ?, value=? where id = ?"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"> </span><br><span class="line">            ps.setString(<span class="number">1</span>, config.key);</span><br><span class="line">            ps.setString(<span class="number">2</span>, config.value);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, config.id);</span><br><span class="line"> </span><br><span class="line">            ps.execute();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"delete from config where id = "</span> + id;</span><br><span class="line"> </span><br><span class="line">            s.execute(sql);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Config <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select * from config where id = "</span> + id;</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                config = <span class="keyword">new</span> Config();</span><br><span class="line">                String key = rs.getString(<span class="string">"key_"</span>);</span><br><span class="line">                String value = rs.getString(<span class="string">"value"</span>);</span><br><span class="line">                config.key = key;</span><br><span class="line">                config.value = value;</span><br><span class="line">                config.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Config&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Config&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        List&lt;Config&gt; configs = <span class="keyword">new</span> ArrayList&lt;Config&gt;();</span><br><span class="line"> </span><br><span class="line">        String sql = <span class="string">"select * from config order by id desc limit ?,? "</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"> </span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Config config = <span class="keyword">new</span> Config();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String key = rs.getString(<span class="string">"key_"</span>);</span><br><span class="line">                String value = rs.getString(<span class="string">"value"</span>);</span><br><span class="line">                config.id = id;</span><br><span class="line">                config.key = key;</span><br><span class="line">                config.value = value;</span><br><span class="line">                configs.add(config);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> configs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Config <span class="title">getByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">"select * from config where key_ = ?"</span> ;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DBUtil.getConnection(); </span><br><span class="line">                PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">            ) &#123;</span><br><span class="line">             </span><br><span class="line">            ps.setString(<span class="number">1</span>, key);</span><br><span class="line">            ResultSet rs =ps.executeQuery();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                config = <span class="keyword">new</span> Config();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String value = rs.getString(<span class="string">"value"</span>);</span><br><span class="line">                config.key = key;</span><br><span class="line">                config.value = value;</span><br><span class="line">                config.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、功能开发"><a href="#四、功能开发" class="headerlink" title="四、功能开发"></a>四、功能开发</h3><p>启动类<strong>Bootstrap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> startup;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.SwingUtilities;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.frame.MainFrame;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.SpendPanel;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line"> </span><br><span class="line">        SwingUtilities.invokeAndWait(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                MainFrame.instance.setVisible(<span class="keyword">true</span>);</span><br><span class="line">                MainPanel.instance.workingPanel.show(SpendPanel.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是确定<strong>多层结构</strong>，基于事件驱动，规划DAO层，Service层。 并且在开发过程中，演示重构并解释重构的理由和好处。</p><p>接着是<strong>开发顺序</strong>。 各个模块之间是互相依赖的，有的需要先行开发，有的模块必须建立在其他模块的基础上才可以执行。</p><ol><li><p>主窗体工具栏事件响应 (主窗体工具栏中的按钮，点击之后，切换不同的面板)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">设计一个独立的监听器类ToolBarListener ，实现接口ActionListener ，重写actionPerformed方法。</span></span><br><span class="line"><span class="comment">这个监听器是为工具栏上的几个按钮添加的，并且这几个按钮都使用这么一个监听器。</span></span><br><span class="line"><span class="comment">通过ActionEvent.getSource()获取事件是哪个按钮发出来的，根据不同的按钮，发出切换不同的功能面板。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.panel.BackupPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.CategoryPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.ConfigPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.SpendPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.RecordPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.RecoverPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.ReportPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToolBarListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        MainPanel p = MainPanel.instance;</span><br><span class="line">        JButton b = (JButton) e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (b == p.bReport)</span><br><span class="line">            p.workingPanel.show(ReportPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bCategory)</span><br><span class="line">            p.workingPanel.show(CategoryPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bSpend)</span><br><span class="line">            p.workingPanel.show(SpendPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bRecord)</span><br><span class="line">            p.workingPanel.show(RecordPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bConfig)</span><br><span class="line">            p.workingPanel.show(ConfigPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bBackup)</span><br><span class="line">            p.workingPanel.show(BackupPanel.instance);</span><br><span class="line">        <span class="keyword">if</span> (b == p.bRecover)</span><br><span class="line">            p.workingPanel.show(RecoverPanel.instance);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实例化一个ToolBarListener 监听器，工具栏上的按钮，都加上这么一个监听器对象即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JToolBar;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.listener.ToolBarListener;</span><br><span class="line"><span class="keyword">import</span> util.CenterPanel;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MainPanel instance = <span class="keyword">new</span> MainPanel();</span><br><span class="line">    <span class="keyword">public</span> JToolBar tb = <span class="keyword">new</span> JToolBar();</span><br><span class="line">    <span class="keyword">public</span> JButton bSpend = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bRecord = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bCategory = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bReport = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bConfig = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bBackup = <span class="keyword">new</span> JButton();</span><br><span class="line">    <span class="keyword">public</span> JButton bRecover = <span class="keyword">new</span> JButton();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> CenterPanel workingPanel;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        GUIUtil.setImageIcon(bSpend, <span class="string">"home.png"</span>, <span class="string">"消费一览"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bRecord, <span class="string">"record.png"</span>, <span class="string">"记一笔"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bCategory, <span class="string">"category2.png"</span>, <span class="string">"消费分类"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bReport, <span class="string">"report.png"</span>, <span class="string">"月消费报表"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bConfig, <span class="string">"config.png"</span>, <span class="string">"设置"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bBackup, <span class="string">"backup.png"</span>, <span class="string">"备份"</span>);</span><br><span class="line">        GUIUtil.setImageIcon(bRecover, <span class="string">"restore.png"</span>, <span class="string">"恢复"</span>);</span><br><span class="line"> </span><br><span class="line">        tb.add(bSpend);</span><br><span class="line">        tb.add(bRecord);</span><br><span class="line">        tb.add(bCategory);</span><br><span class="line">        tb.add(bReport);</span><br><span class="line">        tb.add(bConfig);</span><br><span class="line">        tb.add(bBackup);</span><br><span class="line">        tb.add(bRecover);</span><br><span class="line">        tb.setFloatable(<span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">        workingPanel = <span class="keyword">new</span> CenterPanel(<span class="number">0.8</span>);</span><br><span class="line"> </span><br><span class="line">        setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        add(tb, BorderLayout.NORTH);</span><br><span class="line">        add(workingPanel, BorderLayout.CENTER);</span><br><span class="line">         </span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ToolBarListener listener = <span class="keyword">new</span> ToolBarListener();</span><br><span class="line">         </span><br><span class="line">        bSpend.addActionListener(listener);</span><br><span class="line">        bRecord.addActionListener(listener);</span><br><span class="line">        bCategory.addActionListener(listener);</span><br><span class="line">        bReport.addActionListener(listener);</span><br><span class="line">        bConfig.addActionListener(listener);</span><br><span class="line">        bBackup.addActionListener(listener);</span><br><span class="line">        bRecover.addActionListener(listener);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(MainPanel.instance, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ol><li><p>业务类Service</p><p>如图所示，由监听器调用Service业务类，然后再调用DAO访问数据库。</p><p><img src="/assets/blogImg/service.png" alt="Service"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ConfigService 设置业务类，这个类是监听器直接调用的类，然后再通过ConfigService去调用ConfigDAO。</span></span><br><span class="line"><span class="comment">为什么需要一个业务类呢？ DAO是直接和数据库打交道的，在和数据库打交道之前，还需要对数据进行预处理，这些就可以放在业务类里进行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> dao.ConfigDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String budget = <span class="string">"budget"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String mysqlPath = <span class="string">"mysqlPath"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String default_budget = <span class="string">"500"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> ConfigDAO dao= <span class="keyword">new</span> ConfigDAO();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init(budget, default_budget);</span><br><span class="line">        init(mysqlPath, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Config config= dao.getByKey(key);</span><br><span class="line">        <span class="keyword">if</span>(config==<span class="keyword">null</span>)&#123;</span><br><span class="line">            Config c = <span class="keyword">new</span> Config();</span><br><span class="line">            c.setKey(key);</span><br><span class="line">            c.setValue(value);</span><br><span class="line">            dao.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Config config= dao.getByKey(key);</span><br><span class="line">        <span class="keyword">return</span> config.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        Config config= dao.getByKey(key);</span><br><span class="line">        config.setValue(value);</span><br><span class="line">        dao.update(config);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntBudget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(get(budget));</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>消费分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> dao.CategoryDAO;</span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    CategoryDAO categoryDao = <span class="keyword">new</span> CategoryDAO();</span><br><span class="line">    RecordDAO recordDao = <span class="keyword">new</span> RecordDAO();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; cs= categoryDao.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            List&lt;Record&gt; rs =recordDao.list(c.id);</span><br><span class="line">            c.recordNumber=rs.size();</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(cs,(c1,c2)-&gt;c2.recordNumber-c1.recordNumber);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> cs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Category c = <span class="keyword">new</span> Category();</span><br><span class="line">        c.setName(name);</span><br><span class="line">        categoryDao.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        Category c = <span class="keyword">new</span> Category();</span><br><span class="line">        c.setName(name);</span><br><span class="line">        c.setId(id);</span><br><span class="line">        categoryDao.update(c);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        categoryDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显示Table信息用到了CategoryTableModel，与记一笔面板RecordPanel原型中的CategoryComboBoxModel一样.</span></span><br><span class="line"><span class="comment">TableModel的设计思想：在Model这种思想的指导下，数据（TableModel）和显示（JTable渲染）分离开来了。 比如对于JTable而言，有数据部分，也有显示部分(比如列宽等信息)。 数据部分，专门做一个类，叫做TableModel，就用于存放要显示的数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.model;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.table.AbstractTableModel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryTableModel</span> <span class="keyword">extends</span> <span class="title">AbstractTableModel</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    String[] columnNames = <span class="keyword">new</span> String[] &#123; <span class="string">"分类名称"</span>, <span class="string">"消费次数"</span>&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用从Service返回的List作为TableModel的数据</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRowCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> cs.size();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColumnCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> columnNames.length;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumnName</span><span class="params">(<span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> columnNames[columnIndex];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCellEditable</span><span class="params">(<span class="keyword">int</span> rowIndex, <span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 先通过cs.get(rowIndex)获取行对应的Category对象</span></span><br><span class="line">    <span class="comment">// 然后根据columnIndex返回对应的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValueAt</span><span class="params">(<span class="keyword">int</span> rowIndex, <span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">        Category h = cs.get(rowIndex);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == columnIndex)</span><br><span class="line">            <span class="keyword">return</span> h.name;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == columnIndex)</span><br><span class="line">            <span class="keyword">return</span> h.recordNumber;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 为CategoryPanel新增加一个getSelectedCategory，方便获取JTable上当前选中的Category对象。</span></span><br><span class="line"><span class="comment">2. 增加一个updateData方法，用于在增加，删除，和修改之后，更新表格中的信息，并默认选中第一行。除此之外，还进行判断，如果表格里没有数据，删除和修改按钮不可使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.model.CategoryTableModel;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CategoryPanel instance = <span class="keyword">new</span> CategoryPanel();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> JButton bAdd = <span class="keyword">new</span> JButton(<span class="string">"新增"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bEdit = <span class="keyword">new</span> JButton(<span class="string">"编辑"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bDelete = <span class="keyword">new</span> JButton(<span class="string">"删除"</span>);</span><br><span class="line">    String columNames[] = <span class="keyword">new</span> String[] &#123; <span class="string">"分类名称"</span>, <span class="string">"消费次数"</span> &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> CategoryTableModel ctm = <span class="keyword">new</span> CategoryTableModel();</span><br><span class="line">    <span class="keyword">public</span> JTable t = <span class="keyword">new</span> JTable(ctm);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GUIUtil.setColor(ColorUtil.blueColor, bAdd, bEdit, bDelete);</span><br><span class="line">        JScrollPane sp = <span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">        JPanel pSubmit = <span class="keyword">new</span> JPanel();</span><br><span class="line">        pSubmit.add(bAdd);</span><br><span class="line">        pSubmit.add(bEdit);</span><br><span class="line">        pSubmit.add(bDelete);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        <span class="keyword">this</span>.add(sp, BorderLayout.CENTER);</span><br><span class="line">        <span class="keyword">this</span>.add(pSubmit, BorderLayout.SOUTH);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(CategoryPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getSelectedCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = t.getSelectedRow();</span><br><span class="line">        <span class="keyword">return</span> ctm.cs.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ctm.cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">        t.updateUI();</span><br><span class="line">        t.getSelectionModel().setSelectionInterval(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==ctm.cs.size())&#123;</span><br><span class="line">            bEdit.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            bDelete.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            bEdit.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">            bDelete.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CategoryListener监听器，增加，编辑和删除按钮都使用这个监听器。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.panel.CategoryPanel;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        CategoryPanel p = CategoryPanel.instance;</span><br><span class="line"> </span><br><span class="line">        JButton b = (JButton) e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (b == p.bAdd) &#123;</span><br><span class="line">            String name = JOptionPane.showInputDialog(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == name.length()) &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"分类名称不能为空"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">new</span> CategoryService().add(name);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == p.bEdit) &#123;</span><br><span class="line">            Category c = p.getSelectedCategory();</span><br><span class="line">            <span class="keyword">int</span> id = c.id;</span><br><span class="line">            String name = JOptionPane.showInputDialog(<span class="string">"修改分类名称"</span>, c.name);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == name.length()) &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"分类名称不能为空"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">new</span> CategoryService().update(id, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == p.bDelete) &#123;</span><br><span class="line">            Category c = p.getSelectedCategory();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != c.recordNumber) &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"本分类下有消费记录存在，不能删除"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (JOptionPane.OK_OPTION != JOptionPane.showConfirmDialog(p, <span class="string">"确认要删除？"</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">int</span> id = c.id;</span><br><span class="line">            <span class="keyword">new</span> CategoryService().delete(id);</span><br><span class="line">        &#125;</span><br><span class="line">        p.updateData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>代码演化和重构</strong>，各种面板类实现WorkingPanel接口、监听器的完善，改进CenterPanel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能开发到这个阶段，可以总结出一些规律出来</span></span><br><span class="line"><span class="comment">1. 在设置面板ConfigPanel和分类面板CategoryPanel里都有addListener接口</span></span><br><span class="line"><span class="comment">2. 面板在显示的时候，都需要从数据库中读取信息，并显示在界面上，比如CategoryPanel的updateData方法。 ConfigPanel虽然暂时没有updateData这么一个方法，但是也是有这个需要的(当点击工具栏上的设置按钮的时候，也是需要把预算信息读取出来，并显示在面板上的)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以预见到，后面的各种面板类，都有类似的功能需求。 这样，就可以抽象出一个WorkingPanel类，来提供这样的功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkingPanel</span>  <span class="keyword">extends</span> <span class="title">JPanel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">监听器ToolBarListener 目前做的工作是把面板显示出来。 但是并不能保证面板上刷新数据库中的信息，比如点击设置后，虽然能够切换到预算面板，但是看到的预算值依然是0。如何改进呢？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">留意监听器ToolBarListener 中的这段代码  p.workingPanel.show(ConfigPanel.instance);</span></span><br><span class="line"><span class="comment">workingPanel是CenterPanel类型的，那么只需要在其show方法中判断，如果是WorkingPanel类型，那么就可以调用其updateData来做到把数据更新到界面上了。这样就达到了这样的效果：点击工具栏上的按钮，不仅可以切换到不同的面板，而且面板上的数据也马上从数据库中更新。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JComponent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.panel.WorkingPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CenterPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;<span class="comment">// 拉伸比例</span></span><br><span class="line">    <span class="keyword">private</span> JComponent c; <span class="comment">// 显示的组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> strech; <span class="comment">// 是否拉伸</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CenterPanel</span><span class="params">(<span class="keyword">double</span> rate, <span class="keyword">boolean</span> strech)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.strech = strech;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CenterPanel</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(rate, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != c) &#123;</span><br><span class="line">            Dimension containerSize = <span class="keyword">this</span>.getSize();</span><br><span class="line">            Dimension componentSize = c.getPreferredSize();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (strech)</span><br><span class="line">                c.setSize((<span class="keyword">int</span>) (containerSize.width * rate), (<span class="keyword">int</span>) (containerSize.height * rate));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c.setSize(componentSize);</span><br><span class="line"> </span><br><span class="line">            c.setLocation(containerSize.width / <span class="number">2</span> - c.getSize().width / <span class="number">2</span>,</span><br><span class="line">                    containerSize.height / <span class="number">2</span> - c.getSize().height / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(JComponent p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = p;</span><br><span class="line">        Component[] cs = getComponents();</span><br><span class="line">        <span class="keyword">for</span> (Component c : cs) &#123;</span><br><span class="line">            remove(c);</span><br><span class="line">        &#125;</span><br><span class="line">        add(p);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (p <span class="keyword">instanceof</span> WorkingPanel)</span><br><span class="line">            ((WorkingPanel) p).updateData();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.updateUI();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame f = <span class="keyword">new</span> JFrame();</span><br><span class="line">        f.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        CenterPanel cp = <span class="keyword">new</span> CenterPanel(<span class="number">0.85</span>, <span class="keyword">true</span>);</span><br><span class="line">        f.setContentPane(cp);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        JButton b = <span class="keyword">new</span> JButton(<span class="string">"abc"</span>);</span><br><span class="line">        cp.show(b);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>记一笔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordService</span> </span>&#123;</span><br><span class="line">    RecordDAO recordDao = <span class="keyword">new</span> RecordDAO();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> spend, Category c, String comment,Date date)</span></span>&#123;</span><br><span class="line">        Record r = <span class="keyword">new</span> Record();</span><br><span class="line">        r.spend = spend;</span><br><span class="line">        r.cid = c.id;</span><br><span class="line">        r.comment = comment;</span><br><span class="line">        r.date = date;</span><br><span class="line">        recordDao.add(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CategoryComboBoxModel</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.model;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.ComboBoxModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListDataListener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryComboBoxModel</span> <span class="keyword">implements</span> <span class="title">ComboBoxModel</span>&lt;<span class="title">Category</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Category c;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CategoryComboBoxModel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cs.isEmpty())</span><br><span class="line">            c=cs.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> cs.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> cs.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListDataListener</span><span class="params">(ListDataListener l)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeListDataListener</span><span class="params">(ListDataListener l)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelectedItem</span><span class="params">(Object anItem)</span> </span>&#123;</span><br><span class="line">        c = (Category) anItem;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSelectedItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cs.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给界面上的"记一笔“ 按钮添加监听，没有分类信息提示先增加消费分类，添加成功后，切换到消费一览</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.panel.CategoryPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.RecordPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.SpendPanel;</span><br><span class="line"><span class="keyword">import</span> service.RecordService;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        RecordPanel p  =RecordPanel.instance;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==p.cbModel.cs.size())&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(p, <span class="string">"暂无消费分类，无法添加，请先增加消费分类"</span>);</span><br><span class="line">            MainPanel.instance.workingPanel.show(CategoryPanel.instance);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(!GUIUtil.checkZero(p.tfSpend,<span class="string">"花费金额"</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> spend = Integer.parseInt(p.tfSpend.getText());</span><br><span class="line">        Category c = p.getSelectedCategory();</span><br><span class="line">        String comment = p.tfComment.getText();</span><br><span class="line">        Date d = p.datepick.getDate();</span><br><span class="line">        <span class="keyword">new</span> RecordService().add(spend, c, comment, d);</span><br><span class="line">        JOptionPane.showMessageDialog(p, <span class="string">"添加成功"</span>);</span><br><span class="line">         </span><br><span class="line">        MainPanel.instance.workingPanel.show(SpendPanel.instance);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RecordPanel</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JComboBox;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.jdesktop.swingx.JXDatePicker;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.listener.RecordListener;</span><br><span class="line"><span class="keyword">import</span> gui.model.CategoryComboBoxModel;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordPanel</span> <span class="keyword">extends</span> <span class="title">WorkingPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RecordPanel instance = <span class="keyword">new</span> RecordPanel();</span><br><span class="line"> </span><br><span class="line">    JLabel lSpend = <span class="keyword">new</span> JLabel(<span class="string">"花费(￥)"</span>);</span><br><span class="line">    JLabel lCategory = <span class="keyword">new</span> JLabel(<span class="string">"分类"</span>);</span><br><span class="line">    JLabel lComment = <span class="keyword">new</span> JLabel(<span class="string">"备注"</span>);</span><br><span class="line">    JLabel lDate = <span class="keyword">new</span> JLabel(<span class="string">"日期"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> JTextField tfSpend = <span class="keyword">new</span> JTextField(<span class="string">"0"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> CategoryComboBoxModel cbModel = <span class="keyword">new</span> CategoryComboBoxModel();</span><br><span class="line">    <span class="keyword">public</span> JComboBox&lt;Category&gt; cbCategory = <span class="keyword">new</span> JComboBox&lt;&gt;(cbModel);</span><br><span class="line">    <span class="keyword">public</span> JTextField tfComment = <span class="keyword">new</span> JTextField();</span><br><span class="line">    <span class="keyword">public</span> JXDatePicker datepick = <span class="keyword">new</span> JXDatePicker(<span class="keyword">new</span> Date());</span><br><span class="line">     </span><br><span class="line">    JButton bSubmit = <span class="keyword">new</span> JButton(<span class="string">"记一笔"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecordPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GUIUtil.setColor(ColorUtil.grayColor, lSpend,lCategory,lComment,lDate);</span><br><span class="line">        GUIUtil.setColor(ColorUtil.blueColor, bSubmit);</span><br><span class="line">        JPanel pInput =<span class="keyword">new</span> JPanel();</span><br><span class="line">        JPanel pSubmit = <span class="keyword">new</span> JPanel();</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">40</span>;</span><br><span class="line">        pInput.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">4</span>,<span class="number">2</span>,gap,gap));</span><br><span class="line">         </span><br><span class="line">        pInput.add(lSpend);</span><br><span class="line">        pInput.add(tfSpend);</span><br><span class="line">        pInput.add(lCategory);</span><br><span class="line">        pInput.add(cbCategory);</span><br><span class="line">        pInput.add(lComment);</span><br><span class="line">        pInput.add(tfComment);</span><br><span class="line">        pInput.add(lDate);</span><br><span class="line">        pInput.add(datepick);</span><br><span class="line">         </span><br><span class="line">        pSubmit.add(bSubmit);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        <span class="keyword">this</span>.add(pInput,BorderLayout.NORTH);</span><br><span class="line">        <span class="keyword">this</span>.add(pSubmit,BorderLayout.CENTER);</span><br><span class="line">         </span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(RecordPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getSelectedCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Category) cbCategory.getSelectedItem();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cbModel.cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">        cbCategory.updateUI();</span><br><span class="line">        resetInput();</span><br><span class="line">        tfSpend.grabFocus();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tfSpend.setText(<span class="string">"0"</span>);</span><br><span class="line">        tfComment.setText(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>!=cbModel.cs.size())</span><br><span class="line">            cbCategory.setSelectedIndex(<span class="number">0</span>);</span><br><span class="line">        datepick.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        RecordListener listener = <span class="keyword">new</span> RecordListener();</span><br><span class="line">        bSubmit.addActionListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费一览</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SpendPage 专门用于SpendPanel 消费一览面板 的页面类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.page;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpendPage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//本月消费</span></span><br><span class="line">    <span class="keyword">public</span> String monthSpend;</span><br><span class="line">    <span class="comment">//今日消费</span></span><br><span class="line">    <span class="keyword">public</span> String todaySpend;</span><br><span class="line">    <span class="comment">//日均消费</span></span><br><span class="line">    <span class="keyword">public</span> String avgSpendPerDay;</span><br><span class="line">    <span class="comment">//本月剩余</span></span><br><span class="line">    <span class="keyword">public</span> String monthAvailable;</span><br><span class="line">    <span class="comment">//日均可用</span></span><br><span class="line">    <span class="keyword">public</span> String dayAvgAvailable;</span><br><span class="line">    <span class="comment">//距离月末</span></span><br><span class="line">    <span class="keyword">public</span> String monthLeftDay;</span><br><span class="line">    <span class="comment">//使用比例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> usagePercentage;</span><br><span class="line">    <span class="comment">//是否超支</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOverSpend = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpendPage</span><span class="params">(<span class="keyword">int</span> monthSpend, <span class="keyword">int</span> todaySpend, <span class="keyword">int</span> avgSpendPerDay, <span class="keyword">int</span> monthAvailable, <span class="keyword">int</span> dayAvgAvailable,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> monthLeftDay, <span class="keyword">int</span> usagePercentage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monthSpend = <span class="string">"￥"</span> + monthSpend;</span><br><span class="line">        <span class="keyword">this</span>.todaySpend = <span class="string">"￥"</span> + todaySpend;</span><br><span class="line">        <span class="keyword">this</span>.avgSpendPerDay = <span class="string">"￥"</span> + avgSpendPerDay;</span><br><span class="line">        <span class="keyword">if</span> (monthAvailable &lt; <span class="number">0</span>)</span><br><span class="line">            isOverSpend = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!isOverSpend) &#123;</span><br><span class="line">            <span class="keyword">this</span>.monthAvailable = <span class="string">"￥"</span> + monthAvailable;</span><br><span class="line">            <span class="keyword">this</span>.dayAvgAvailable = <span class="string">"￥"</span> + dayAvgAvailable;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.monthAvailable = <span class="string">"超支"</span> + (<span class="number">0</span> - monthAvailable);</span><br><span class="line">            <span class="keyword">this</span>.dayAvgAvailable = <span class="string">"￥0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.monthLeftDay = monthLeftDay + <span class="string">"天"</span>;</span><br><span class="line">        <span class="keyword">this</span>.usagePercentage = usagePercentage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务类，SpendService消费一览业务类的getSpendPage()方法，返回SpendPage 用于界面显示。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> gui.page.SpendPage;</span><br><span class="line"><span class="keyword">import</span> util.DateUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpendService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendPage <span class="title">getSpendPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RecordDAO dao = <span class="keyword">new</span> RecordDAO();</span><br><span class="line">        <span class="comment">// 本月数据</span></span><br><span class="line">        List&lt;Record&gt; thisMonthRecords = dao.listThisMonth();</span><br><span class="line">        <span class="comment">// 今日数据</span></span><br><span class="line">        List&lt;Record&gt; toDayRecords = dao.listToday();</span><br><span class="line">        <span class="comment">// 本月总天数</span></span><br><span class="line">        <span class="keyword">int</span> thisMonthTotalDay = DateUtil.thisMonthTotalDay();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> monthSpend = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> todaySpend = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> avgSpendPerDay = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> monthAvailable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dayAvgAvailable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> monthLeftDay = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> usagePercentage = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 预算</span></span><br><span class="line">        <span class="keyword">int</span> monthBudget = <span class="keyword">new</span> ConfigService().getIntBudget();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 统计本月消费</span></span><br><span class="line">        <span class="keyword">for</span> (Record record : thisMonthRecords) &#123;</span><br><span class="line">            monthSpend += record.getSpend();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 统计今日消费</span></span><br><span class="line">        <span class="keyword">for</span> (Record record : toDayRecords) &#123;</span><br><span class="line">            todaySpend += record.getSpend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算日均消费</span></span><br><span class="line">        avgSpendPerDay = monthSpend / thisMonthTotalDay;</span><br><span class="line">        <span class="comment">// 计算本月剩余</span></span><br><span class="line">        monthAvailable = monthBudget - monthSpend;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 距离月末</span></span><br><span class="line">        monthLeftDay = DateUtil.thisMonthLeftDay();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 计算日均可用</span></span><br><span class="line">        dayAvgAvailable = monthAvailable / monthLeftDay;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 计算使用比例</span></span><br><span class="line">        usagePercentage = monthSpend * <span class="number">100</span> / monthBudget;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 根据这些信息，生成SpendPage对象</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendPage(monthSpend, todaySpend, avgSpendPerDay, monthAvailable, dayAvgAvailable, monthLeftDay,</span><br><span class="line">                usagePercentage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SpendPanel</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> util.GUIUtil.setColor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> util.GUIUtil.showPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.page.SpendPage;</span><br><span class="line"><span class="keyword">import</span> service.SpendService;</span><br><span class="line"><span class="keyword">import</span> util.CircleProgressBar;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpendPanel</span> <span class="keyword">extends</span> <span class="title">WorkingPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SpendPanel instance = <span class="keyword">new</span> SpendPanel();</span><br><span class="line"> </span><br><span class="line">    JLabel lMonthSpend = <span class="keyword">new</span> JLabel(<span class="string">"本月消费"</span>);</span><br><span class="line">    JLabel lTodaySpend = <span class="keyword">new</span> JLabel(<span class="string">"今日消费"</span>);</span><br><span class="line">    JLabel lAvgSpendPerDay = <span class="keyword">new</span> JLabel(<span class="string">"日均消费"</span>);</span><br><span class="line">    JLabel lMonthLeft = <span class="keyword">new</span> JLabel(<span class="string">"本月剩余"</span>);</span><br><span class="line">    JLabel lDayAvgAvailable = <span class="keyword">new</span> JLabel(<span class="string">"日均可用"</span>);</span><br><span class="line">    JLabel lMonthLeftDay = <span class="keyword">new</span> JLabel(<span class="string">"距离月末"</span>);</span><br><span class="line"> </span><br><span class="line">    JLabel vMonthSpend = <span class="keyword">new</span> JLabel(<span class="string">"￥2300"</span>);</span><br><span class="line">    JLabel vTodaySpend = <span class="keyword">new</span> JLabel(<span class="string">"￥25"</span>);</span><br><span class="line">    JLabel vAvgSpendPerDay = <span class="keyword">new</span> JLabel(<span class="string">"￥120"</span>);</span><br><span class="line">    JLabel vMonthAvailable = <span class="keyword">new</span> JLabel(<span class="string">"￥2084"</span>);</span><br><span class="line">    JLabel vDayAvgAvailable = <span class="keyword">new</span> JLabel(<span class="string">"￥389"</span>);</span><br><span class="line">    JLabel vMonthLeftDay = <span class="keyword">new</span> JLabel(<span class="string">"15天"</span>);</span><br><span class="line"> </span><br><span class="line">    CircleProgressBar bar;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpendPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        bar = <span class="keyword">new</span> CircleProgressBar();</span><br><span class="line">        bar.setBackgroundColor(ColorUtil.blueColor);</span><br><span class="line"> </span><br><span class="line">        setColor(ColorUtil.grayColor, lMonthSpend, lTodaySpend, lAvgSpendPerDay, lMonthLeft, lDayAvgAvailable,</span><br><span class="line">                lMonthLeftDay, vAvgSpendPerDay, vMonthAvailable, vDayAvgAvailable, vMonthLeftDay);</span><br><span class="line">        setColor(ColorUtil.blueColor, vMonthSpend, vTodaySpend);</span><br><span class="line"> </span><br><span class="line">        vMonthSpend.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.BOLD, <span class="number">23</span>));</span><br><span class="line">        vTodaySpend.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.BOLD, <span class="number">23</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.add(center(), BorderLayout.CENTER);</span><br><span class="line">        <span class="keyword">this</span>.add(south(), BorderLayout.SOUTH);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> JPanel <span class="title">center</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel p = <span class="keyword">new</span> JPanel();</span><br><span class="line">        p.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        p.add(west(), BorderLayout.WEST);</span><br><span class="line">        p.add(east());</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Component <span class="title">east</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> bar;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Component <span class="title">west</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel p = <span class="keyword">new</span> JPanel();</span><br><span class="line">        p.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line">        p.add(lMonthSpend);</span><br><span class="line">        p.add(vMonthSpend);</span><br><span class="line">        p.add(lTodaySpend);</span><br><span class="line">        p.add(vTodaySpend);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> JPanel <span class="title">south</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel p = <span class="keyword">new</span> JPanel();</span><br><span class="line">        p.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"> </span><br><span class="line">        p.add(lAvgSpendPerDay);</span><br><span class="line">        p.add(lMonthLeft);</span><br><span class="line">        p.add(lDayAvgAvailable);</span><br><span class="line">        p.add(lMonthLeftDay);</span><br><span class="line">        p.add(vAvgSpendPerDay);</span><br><span class="line">        p.add(vMonthAvailable);</span><br><span class="line">        p.add(vDayAvgAvailable);</span><br><span class="line">        p.add(vMonthLeftDay);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showPanel(SpendPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpendPage spend = <span class="keyword">new</span> SpendService().getSpendPage();</span><br><span class="line">        vMonthSpend.setText(spend.monthSpend);</span><br><span class="line">        vTodaySpend.setText(spend.todaySpend);</span><br><span class="line">        vAvgSpendPerDay.setText(spend.avgSpendPerDay);</span><br><span class="line">        vMonthAvailable.setText(spend.monthAvailable);</span><br><span class="line">        vDayAvgAvailable.setText(spend.dayAvgAvailable);</span><br><span class="line">        vMonthLeftDay.setText(spend.monthLeftDay);</span><br><span class="line"> </span><br><span class="line">        bar.setProgress(spend.usagePercentage);</span><br><span class="line">        <span class="keyword">if</span> (spend.isOverSpend) &#123;</span><br><span class="line">            vMonthAvailable.setForeground(ColorUtil.warningColor);</span><br><span class="line">            vMonthSpend.setForeground(ColorUtil.warningColor);</span><br><span class="line">            vTodaySpend.setForeground(ColorUtil.warningColor);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vMonthAvailable.setForeground(ColorUtil.grayColor);</span><br><span class="line">            vMonthSpend.setForeground(ColorUtil.blueColor);</span><br><span class="line">            vTodaySpend.setForeground(ColorUtil.blueColor);</span><br><span class="line">        &#125;</span><br><span class="line">        bar.setForegroundColor(ColorUtil.getByPercentage(spend.usagePercentage));</span><br><span class="line">        addListener();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>月消费报表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> util.DateUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *下面的是两个修改版</span></span><br><span class="line"><span class="comment">     *用这种方法才能通过if判断得出daySpend</span></span><br><span class="line"><span class="comment">     *日期转成一样格式的String字符串去对比才能通过if的equals比对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDaySpend</span><span class="params">(Date d, List&lt;Record&gt; monthRawDate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> daySpend = <span class="number">0</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        String nowDate = sdf.format(d);</span><br><span class="line">        <span class="keyword">for</span>(Record record : monthRawDate)&#123;</span><br><span class="line">            String date = sdf.format(record.date);</span><br><span class="line">            <span class="keyword">if</span>(date.equals(nowDate))</span><br><span class="line">                daySpend += record.spend;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"此天支出为"</span>+daySpend);</span><br><span class="line">        <span class="keyword">return</span> daySpend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *即使用DateUtil去转换，也是不能通过if对比，导致daySpend一直为0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public int getDaySpend(Date d, List&lt;Record&gt; monthRawDate)&#123;</span></span><br><span class="line"><span class="comment">//        int daySpend = 0;</span></span><br><span class="line"><span class="comment">//        for(Record record : monthRawDate)&#123;</span></span><br><span class="line"><span class="comment">//            if(DateUtil.util2sql(record.date).equals(DateUtil.util2sql(d))) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(d); // 打印不出来，说明根本没通过if语句</span></span><br><span class="line"><span class="comment">//                daySpend += record.spend;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println("此天收入为"+daySpend);</span></span><br><span class="line"><span class="comment">//        return daySpend;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某一天的消费金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> monthRawData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public int getDaySpend(Date d,List&lt;Record&gt; monthRawData)&#123;</span></span><br><span class="line"><span class="comment">//        int daySpend = 0;</span></span><br><span class="line"><span class="comment">//        for (Record record : monthRawData) &#123;</span></span><br><span class="line"><span class="comment">//            if(record.date.equals(d))</span></span><br><span class="line"><span class="comment">//                daySpend+=record.spend;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return daySpend;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个月的消费记录集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Record&gt; <span class="title">listThisMonthRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RecordDAO dao= <span class="keyword">new</span> RecordDAO();</span><br><span class="line">        List&lt;Record&gt; monthRawData= dao.listThisMonth();</span><br><span class="line">        List&lt;Record&gt; result= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Date monthBegin = DateUtil.monthBegin();</span><br><span class="line">        <span class="keyword">int</span> monthTotalDay = DateUtil.thisMonthTotalDay();</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; monthTotalDay; i++) &#123;</span><br><span class="line">            Record r = <span class="keyword">new</span> Record();</span><br><span class="line">            c.setTime(monthBegin);</span><br><span class="line">            c.add(Calendar.DATE, i);</span><br><span class="line">            Date eachDayOfThisMonth=c.getTime() ;</span><br><span class="line">            System.out.printf(<span class="string">"第%d次调用getDaySpend，也就是本月第%d天 %n"</span>, i+<span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> daySpend = getDaySpend(eachDayOfThisMonth,monthRawData);</span><br><span class="line">            r.spend=daySpend;</span><br><span class="line">            result.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">图表类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Image;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.Icon;</span><br><span class="line"><span class="keyword">import</span> javax.swing.ImageIcon;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.objectplanet.chart.BarChart;</span><br><span class="line"><span class="keyword">import</span> com.objectplanet.chart.Chart;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChartUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] sampleLabels(List&lt;Record&gt; rs) &#123;</span><br><span class="line">        String[] sampleLabels = <span class="keyword">new</span> String[rs.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sampleLabels.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == i % <span class="number">5</span>)</span><br><span class="line">                sampleLabels[i] = String.valueOf(i + <span class="number">1</span> + <span class="string">"日"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> sampleLabels;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] sampleValues(List&lt;Record&gt; rs) &#123;</span><br><span class="line">        <span class="keyword">double</span>[] sampleValues = <span class="keyword">new</span> <span class="keyword">double</span>[rs.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sampleValues.length; i++) &#123;</span><br><span class="line">            sampleValues[i] = rs.get(i).spend;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> sampleValues;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">getImage</span><span class="params">(List&lt;Record&gt; rs, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据消费记录得到的样本数据</span></span><br><span class="line">        <span class="keyword">double</span>[] sampleValues = sampleValues(rs);</span><br><span class="line">        <span class="comment">// 根据消费记录得到的下方日期文本</span></span><br><span class="line">        String[] sampleLabels = sampleLabels(rs);</span><br><span class="line">        <span class="comment">// 样本中的最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = max(sampleValues);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 数据颜色</span></span><br><span class="line">        Color[] sampleColors = <span class="keyword">new</span> Color[] &#123; ColorUtil.blueColor &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 柱状图</span></span><br><span class="line">        BarChart chart = <span class="keyword">new</span> BarChart();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置样本个数</span></span><br><span class="line">        chart.setSampleCount(sampleValues.length);</span><br><span class="line">        <span class="comment">// 设置样本数据</span></span><br><span class="line">        chart.setSampleValues(<span class="number">0</span>, sampleValues);</span><br><span class="line">        <span class="comment">// 设置文字</span></span><br><span class="line">        chart.setSampleLabels(sampleLabels);</span><br><span class="line">        <span class="comment">// 设置样本颜色</span></span><br><span class="line">        chart.setSampleColors(sampleColors);</span><br><span class="line">        <span class="comment">// 设置取值范围</span></span><br><span class="line">        chart.setRange(<span class="number">0</span>, max * <span class="number">1.2</span>);</span><br><span class="line">        <span class="comment">// 显示背景横线</span></span><br><span class="line">        chart.setValueLinesOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 显示文字</span></span><br><span class="line">        chart.setSampleLabelsOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 把文字显示在下方</span></span><br><span class="line">        chart.setSampleLabelStyle(Chart.BELOW);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 样本值的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"rangeLabelFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, Font.BOLD, <span class="number">12</span>));</span><br><span class="line">        <span class="comment">// 显示图例说明</span></span><br><span class="line">        chart.setLegendOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 把图例说明放在左侧</span></span><br><span class="line">        chart.setLegendPosition(Chart.LEFT);</span><br><span class="line">        <span class="comment">// 图例说明中的文字</span></span><br><span class="line">        chart.setLegendLabels(<span class="keyword">new</span> String[] &#123; <span class="string">"月消费报表"</span> &#125;);</span><br><span class="line">        <span class="comment">// 图例说明的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"legendFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Dialog"</span>, Font.BOLD, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">// 下方文字的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"sampleLabelFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Dialog"</span>, Font.BOLD, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">// 图表中间背景颜色</span></span><br><span class="line">        chart.setChartBackground(Color.white);</span><br><span class="line">        <span class="comment">// 图表整体背景颜色</span></span><br><span class="line">        chart.setBackground(ColorUtil.backgroundColor);</span><br><span class="line">        <span class="comment">// 把图表转换为Image类型</span></span><br><span class="line">        Image im = chart.getImage(width, height);</span><br><span class="line">        <span class="keyword">return</span> im;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>[] sampleValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> v : sampleValues) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &gt; max)</span><br><span class="line">                max = (<span class="keyword">int</span>) v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 此处是测试原型数据，上面的才是涉及数据库的代码  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] sampleLabels() &#123;</span><br><span class="line">        String[] sampleLabels = <span class="keyword">new</span> String[<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sampleLabels.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == i % <span class="number">5</span>)</span><br><span class="line">                sampleLabels[i] = String.valueOf(i + <span class="number">1</span> + <span class="string">"日"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sampleLabels;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">getImage</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟样本数据</span></span><br><span class="line">        <span class="keyword">double</span>[] sampleValues = sampleValues();</span><br><span class="line">        <span class="comment">// 下方显示的文字</span></span><br><span class="line">        String[] sampleLabels = sampleLabels();</span><br><span class="line">        <span class="comment">// 样本中的最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = max(sampleValues);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 数据颜色</span></span><br><span class="line">        Color[] sampleColors = <span class="keyword">new</span> Color[] &#123; ColorUtil.blueColor &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 柱状图</span></span><br><span class="line">        BarChart chart = <span class="keyword">new</span> BarChart();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置样本个数</span></span><br><span class="line">        chart.setSampleCount(sampleValues.length);</span><br><span class="line">        <span class="comment">// 设置样本数据</span></span><br><span class="line">        chart.setSampleValues(<span class="number">0</span>, sampleValues);</span><br><span class="line">        <span class="comment">// 设置文字</span></span><br><span class="line">        chart.setSampleLabels(sampleLabels);</span><br><span class="line">        <span class="comment">// 设置样本颜色</span></span><br><span class="line">        chart.setSampleColors(sampleColors);</span><br><span class="line">        <span class="comment">// 设置取值范围</span></span><br><span class="line">        chart.setRange(<span class="number">0</span>, max * <span class="number">1.2</span>);</span><br><span class="line">        <span class="comment">// 显示背景横线</span></span><br><span class="line">        chart.setValueLinesOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 显示文字</span></span><br><span class="line">        chart.setSampleLabelsOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 把文字显示在下方</span></span><br><span class="line">        chart.setSampleLabelStyle(Chart.BELOW);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 样本值的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"rangeLabelFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, Font.BOLD, <span class="number">12</span>));</span><br><span class="line">        <span class="comment">// 显示图例说明</span></span><br><span class="line">        chart.setLegendOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 把图例说明放在左侧</span></span><br><span class="line">        chart.setLegendPosition(Chart.LEFT);</span><br><span class="line">        <span class="comment">// 图例说明中的文字</span></span><br><span class="line">        chart.setLegendLabels(<span class="keyword">new</span> String[] &#123; <span class="string">"月消费报表"</span> &#125;);</span><br><span class="line">        <span class="comment">// 图例说明的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"legendFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Dialog"</span>, Font.BOLD, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">// 下方文字的字体</span></span><br><span class="line">        chart.setFont(<span class="string">"sampleLabelFont"</span>, <span class="keyword">new</span> Font(<span class="string">"Dialog"</span>, Font.BOLD, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">// 图表中间背景颜色</span></span><br><span class="line">        chart.setChartBackground(Color.white);</span><br><span class="line">        <span class="comment">// 图表整体背景颜色</span></span><br><span class="line">        chart.setBackground(ColorUtil.backgroundColor);</span><br><span class="line">        <span class="comment">// 把图表转换为Image类型</span></span><br><span class="line">        Image im = chart.getImage(width, height);</span><br><span class="line">        <span class="keyword">return</span> im;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span>[] sampleValues() &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            result[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JPanel p = <span class="keyword">new</span> JPanel();</span><br><span class="line">        JLabel l = <span class="keyword">new</span> JLabel();</span><br><span class="line">        Image img = ChartUtil.getImage(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(img);</span><br><span class="line">        l.setIcon(icon);</span><br><span class="line">        p.add(l);</span><br><span class="line">        GUIUtil.showPanel(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">面板类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> util.GUIUtil.showPanel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Image;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.ImageIcon;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> service.ReportService;</span><br><span class="line"><span class="keyword">import</span> util.ChartUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportPanel</span> <span class="keyword">extends</span> <span class="title">WorkingPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReportPanel instance = <span class="keyword">new</span> ReportPanel();</span><br><span class="line"> </span><br><span class="line">    JLabel l = <span class="keyword">new</span> JLabel();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReportPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        List&lt;Record&gt; rs = <span class="keyword">new</span> ReportService().listThisMonthRecords();</span><br><span class="line">        Image i = ChartUtil.getImage(rs, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        ImageIcon icon = <span class="keyword">new</span> ImageIcon(i);</span><br><span class="line">        l.setIcon(icon);</span><br><span class="line">        <span class="keyword">this</span>.add(l);</span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showPanel(ReportPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Record&gt; rs = <span class="keyword">new</span> ReportService().listThisMonthRecords();</span><br><span class="line">        Image i = ChartUtil.getImage(rs, <span class="number">350</span>, <span class="number">250</span>);</span><br><span class="line">        ImageIcon icon = <span class="keyword">new</span> ImageIcon(i);</span><br><span class="line">        l.setIcon(icon);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>备份</p><p>接下来是备份和恢复功能，在开始这两个功能之前 ，先设计一个 Mysql专门的工具类 MysqlUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">备份方法backup()</span></span><br><span class="line"><span class="comment">通过Runtime调用mysqldump.exe进行备份</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">恢复方法recover</span></span><br><span class="line"><span class="comment">通过Runtime调用mysql.exe进行数据的还原</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backup</span><span class="params">(String mysqlPath, String backupfile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//注意MAC下执行，下面应为 "%s/bin/mysqldump -u%s -p%s   -hlocalhost   -P%d %s -r %s"</span></span><br><span class="line">        String commandFormat = <span class="string">"\"%s/bin/mysqldump.exe\" -u%s -p%s   -hlocalhost   -P%d %s -r \"%s\""</span>;</span><br><span class="line"> </span><br><span class="line">        String command = String.format(commandFormat, mysqlPath, DBUtil.loginName, DBUtil.password, DBUtil.port,</span><br><span class="line">                DBUtil.database, backupfile);</span><br><span class="line">        Runtime.getRuntime().exec(command);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(String mysqlPath, String recoverfile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String commandFormat = <span class="string">"\"%s/bin/mysql.exe\" -u%s -p%s   %s "</span>;</span><br><span class="line">            String command = String.format(commandFormat, mysqlPath, DBUtil.loginName, DBUtil.password,</span><br><span class="line">                    DBUtil.database);</span><br><span class="line"> </span><br><span class="line">            Process p = Runtime.getRuntime().exec(command);</span><br><span class="line">            OutputStream out = p.getOutputStream();</span><br><span class="line">            String inStr;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">            String outStr;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(recoverfile), <span class="string">"utf8"</span>));</span><br><span class="line">            <span class="keyword">while</span> ((inStr = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 注意 MAC 系统 需要写成"\n"</span></span><br><span class="line">                sb.append(inStr + <span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            outStr = sb.toString();</span><br><span class="line"> </span><br><span class="line">            OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(out, <span class="string">"utf8"</span>);</span><br><span class="line">            writer.write(outStr);</span><br><span class="line">            writer.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            br.close();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String mysqlPath = <span class="string">"D:/tools/MYSQL/mysql-5.1.57-win32"</span>;</span><br><span class="line">        String file = <span class="string">"C:/Documents and Settings/Administrator/My Documents/hutubill.sql"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// backup(mysqlPath, file);</span></span><br><span class="line">        <span class="comment">// restore();</span></span><br><span class="line">        <span class="comment">// recover(mysqlPath, file);</span></span><br><span class="line">        <span class="comment">// recover(file);</span></span><br><span class="line">        recover(mysqlPath, file);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">备份面板</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.listener.BackupListener;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackupPanel</span> <span class="keyword">extends</span> <span class="title">WorkingPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BackupPanel instance = <span class="keyword">new</span> BackupPanel();</span><br><span class="line">    JButton bBackup = <span class="keyword">new</span> JButton(<span class="string">"备份"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackupPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GUIUtil.setColor(ColorUtil.blueColor, bBackup);</span><br><span class="line">        <span class="keyword">this</span>.add(bBackup);</span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(BackupPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BackupListener listener = <span class="keyword">new</span> BackupListener();</span><br><span class="line">        bBackup.addActionListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">监听器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JFileChooser;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileFilter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.panel.BackupPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.ConfigPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> service.ConfigService;</span><br><span class="line"><span class="keyword">import</span> util.MysqlUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackupListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        BackupPanel p  =BackupPanel.instance;</span><br><span class="line">        String mysqlPath= <span class="keyword">new</span> ConfigService().get(ConfigService.mysqlPath);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==mysqlPath.length())&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(p, <span class="string">"备份前请事先配置mysql的路径"</span>);</span><br><span class="line">            MainPanel.instance.workingPanel.show(ConfigPanel.instance);</span><br><span class="line">            ConfigPanel.instance.tfMysqlPath.grabFocus();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        JFileChooser fc = <span class="keyword">new</span> JFileChooser();</span><br><span class="line">        fc.setSelectedFile(<span class="keyword">new</span> File(<span class="string">"hutubill.sql"</span>));</span><br><span class="line">        fc.setFileFilter(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">".sql"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> f.getName().toLowerCase().endsWith(<span class="string">".sql"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">int</span> returnVal =  fc.showSaveDialog(p);</span><br><span class="line">         File file = fc.getSelectedFile();</span><br><span class="line">         System.out.println(file);</span><br><span class="line">         <span class="keyword">if</span> (returnVal == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">             <span class="comment">//如果保存的文件名没有以.sql结尾，自动加上.sql</span></span><br><span class="line">             System.out.println(file);</span><br><span class="line">             <span class="keyword">if</span>(!file.getName().toLowerCase().endsWith(<span class="string">".sql"</span>))</span><br><span class="line">                 file = <span class="keyword">new</span> File(file.getParent(),file.getName()+<span class="string">".sql"</span>);</span><br><span class="line">             System.out.println(file);</span><br><span class="line">              </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MysqlUtil.backup(mysqlPath, file.getAbsolutePath());</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"备份成功,备份文件位于:\r\n"</span>+file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"备份失败\r\n,错误:\r\n"</span>+e1.getMessage());   </span><br><span class="line">            &#125;       </span><br><span class="line">         &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>恢复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JFileChooser;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileFilter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> gui.panel.BackupPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.ConfigPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> service.ConfigService;</span><br><span class="line"><span class="keyword">import</span> util.MysqlUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecoverListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        BackupPanel p  =BackupPanel.instance;</span><br><span class="line">        String mysqlPath= <span class="keyword">new</span> ConfigService().get(ConfigService.mysqlPath);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==mysqlPath.length())&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(p, <span class="string">"恢复前请事先配置mysql的路径"</span>);</span><br><span class="line">            MainPanel.instance.workingPanel.show(ConfigPanel.instance);</span><br><span class="line">            ConfigPanel.instance.tfMysqlPath.grabFocus();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        JFileChooser fc = <span class="keyword">new</span> JFileChooser();</span><br><span class="line">        fc.setSelectedFile(<span class="keyword">new</span> File(<span class="string">"hutubill.sql"</span>));</span><br><span class="line">        fc.setFileFilter(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">".sql"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> f.getName().toLowerCase().endsWith(<span class="string">".sql"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">int</span> returnVal =  fc.showOpenDialog(p);</span><br><span class="line">         File file = fc.getSelectedFile();</span><br><span class="line">         System.out.println(file);</span><br><span class="line">         <span class="keyword">if</span> (returnVal == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MysqlUtil.recover(mysqlPath,file.getAbsolutePath());</span><br><span class="line"><span class="comment">//              MysqlUtil.recover(mysqlPath, file.getAbsolutePath());</span></span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"恢复成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">                JOptionPane.showMessageDialog(p, <span class="string">"恢复失败\r\n,错误:\r\n"</span>+e1.getMessage());   </span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">         &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后，不要忘了<strong>引用第三方的包</strong>。 比如动态生成chart图片，演示如何使用这些API。</p><h3 id="五、改进与总结"><a href="#五、改进与总结" class="headerlink" title="五、改进与总结"></a>五、改进与总结</h3><p>在原有基础上添加查看消费记录<strong>详情</strong>和<strong>编辑</strong>的功能</p><ul><li>详情相关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消费详情，面板类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> gui.listener.DetailListener;</span><br><span class="line"><span class="keyword">import</span> gui.model.CategoryComboBoxModel;</span><br><span class="line"><span class="keyword">import</span> gui.model.DetailTableModel;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> service.DetailService;</span><br><span class="line"><span class="keyword">import</span> service.RecordService;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailPanel</span> <span class="keyword">extends</span> <span class="title">WorkingPanel</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DetailPanel instance = <span class="keyword">new</span> DetailPanel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JButton bEdit = <span class="keyword">new</span> JButton(<span class="string">"编辑"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bDelete = <span class="keyword">new</span> JButton(<span class="string">"删除"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bFilter = <span class="keyword">new</span> JButton(<span class="string">"筛选"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bAll = <span class="keyword">new</span> JButton(<span class="string">"查看全部"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> updataFlag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> DetailService dServer = <span class="keyword">new</span> DetailService();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DetailTableModel dtm = <span class="keyword">new</span> DetailTableModel();</span><br><span class="line">    <span class="keyword">public</span> JTable t = <span class="keyword">new</span> JTable(dtm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CategoryComboBoxModel cbModel = <span class="keyword">new</span> CategoryComboBoxModel();</span><br><span class="line">    <span class="keyword">public</span> JComboBox&lt;Category&gt; cbCategory = <span class="keyword">new</span> JComboBox&lt;&gt;(cbModel);</span><br><span class="line">    <span class="keyword">public</span> JLabel lCategory = <span class="keyword">new</span> JLabel(<span class="string">"查看分类"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DetailPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GUIUtil.setColor(ColorUtil.grayColor, lCategory);</span><br><span class="line">        GUIUtil.setColor(ColorUtil.blueColor, bEdit, bDelete);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        <span class="keyword">this</span>.add(south(), BorderLayout.SOUTH);</span><br><span class="line">        <span class="keyword">this</span>.add(center(), BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JPanel <span class="title">center</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel pInput = <span class="keyword">new</span> JPanel();</span><br><span class="line">        pInput.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        JScrollPane sp = <span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">        t.getColumnModel().getColumn(<span class="number">0</span>).setPreferredWidth(<span class="number">10</span>);</span><br><span class="line">        t.getColumnModel().getColumn(<span class="number">2</span>).setPreferredWidth(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        pInput.add(sp, BorderLayout.CENTER);</span><br><span class="line">        pInput.add(north(), BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pInput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Component <span class="title">north</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel pInput = <span class="keyword">new</span> JPanel();</span><br><span class="line">        pInput.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        cbCategory.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">20</span>));</span><br><span class="line">        bAll.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">80</span>, <span class="number">20</span>));</span><br><span class="line">        bFilter.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">80</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        pInput.add(lCategory);</span><br><span class="line">        pInput.add(cbCategory);</span><br><span class="line">        pInput.add(bFilter);</span><br><span class="line">        pInput.add(bAll);</span><br><span class="line">        <span class="keyword">return</span> pInput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JPanel <span class="title">south</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JPanel pSubmit = <span class="keyword">new</span> JPanel();</span><br><span class="line">        pSubmit.add(bEdit);</span><br><span class="line">        pSubmit.add(bDelete);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pSubmit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(DetailPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getSelectedCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Category) cbCategory.getSelectedItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Record <span class="title">getSelectedRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = t.getSelectedRow();</span><br><span class="line">        <span class="keyword">return</span> dtm.ds.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (updataFlag) &#123;</span><br><span class="line">            dtm.ds = dServer.list(getSelectedCategory().id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dtm.ds = dServer.list();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        按时间顺序排序消费记录</span></span><br><span class="line">        dtm.ds.sort((r1, r2) -&gt; r1.date.getTime() &lt;= r2.date.getTime() ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        t.updateUI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dtm.ds.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            bEdit.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            bDelete.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bEdit.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">            bDelete.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cbModel.cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">        cbModel.cs.sort(Comparator.comparing(c -&gt; c.id));</span><br><span class="line">        cbCategory.updateUI();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>!=cbModel.cs.size())</span><br><span class="line">            cbCategory.setSelectedIndex(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DetailListener listener = <span class="keyword">new</span> DetailListener();</span><br><span class="line">        bFilter.addActionListener(listener);</span><br><span class="line">        bAll.addActionListener(listener);</span><br><span class="line">        bEdit.addActionListener(listener);</span><br><span class="line">        bDelete.addActionListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DetailTableModel类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.CategoryDAO;</span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> service.DetailService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.event.TableModelListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.AbstractTableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableModel;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailTableModel</span> <span class="keyword">extends</span> <span class="title">AbstractTableModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] columNames = <span class="keyword">new</span> String[]&#123;<span class="string">"分类"</span>, <span class="string">"日期"</span>, <span class="string">"金额"</span>, <span class="string">"备注"</span>&#125;;</span><br><span class="line">    DetailService dServer = <span class="keyword">new</span> DetailService();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Record&gt; ds = dServer.list();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRowCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColumnCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columNames.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumnName</span><span class="params">(<span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columNames[columnIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCellEditable</span><span class="params">(<span class="keyword">int</span> rowIndex, <span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValueAt</span><span class="params">(<span class="keyword">int</span> rowIndex, <span class="keyword">int</span> columnIndex)</span> </span>&#123;</span><br><span class="line">        Record r = ds.get(rowIndex);</span><br><span class="line">        <span class="keyword">if</span> (columnIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dServer.getCategoryName(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnIndex == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> r.date;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnIndex == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> r.spend;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnIndex == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> r.comment;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueAt</span><span class="params">(Object o, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTableModelListener</span><span class="params">(TableModelListener tableModelListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTableModelListener</span><span class="params">(TableModelListener tableModelListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消费记录详情 业务类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.CategoryDAO;</span><br><span class="line"><span class="keyword">import</span> dao.RecordDAO;</span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> gui.panel.DetailPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailService</span> </span>&#123;</span><br><span class="line">    CategoryDAO categoryDao = <span class="keyword">new</span> CategoryDAO();</span><br><span class="line">    RecordDAO recordDao = <span class="keyword">new</span> RecordDAO();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Record&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recordDao.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Record&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recordDao.list(cid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategoryName</span><span class="params">(Record r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryDao.get(r.cid).name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> spend, <span class="keyword">int</span> id, <span class="keyword">int</span> cid, String comment, Date date)</span> </span>&#123;</span><br><span class="line">        Record r = <span class="keyword">new</span> Record();</span><br><span class="line">        r.setSpend(spend);</span><br><span class="line">        r.setId(id);</span><br><span class="line">        r.setCid(cid);</span><br><span class="line">        r.setComment(comment);</span><br><span class="line">        r.setDate(date);</span><br><span class="line">        recordDao.update(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        recordDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消费详情监听器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.Record;</span><br><span class="line"><span class="keyword">import</span> gui.frame.EditFrame;</span><br><span class="line"><span class="keyword">import</span> gui.panel.DetailPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.EditPanel;</span><br><span class="line"><span class="keyword">import</span> service.DetailService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        DetailPanel d = DetailPanel.instance;</span><br><span class="line">        JButton b = (JButton) e.getSource();</span><br><span class="line">        EditFrame fEdit = EditFrame.instance;</span><br><span class="line">        EditPanel ep = EditPanel.instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b == d.bEdit) &#123;</span><br><span class="line">            ep.updateData();</span><br><span class="line">            fEdit.setVisible(<span class="keyword">true</span>);</span><br><span class="line">            fEdit.workingPanel.show(EditPanel.instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == d.bAll) &#123;</span><br><span class="line">            d.updataFlag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == d.bFilter) &#123;</span><br><span class="line">            d.updataFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == d.bDelete) &#123;</span><br><span class="line">            Record r = d.getSelectedRecord();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (JOptionPane.OK_OPTION != JOptionPane.showConfirmDialog(d, <span class="string">"确认要删除？"</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> id = r.id;</span><br><span class="line">            <span class="keyword">new</span> DetailService().delete(id);</span><br><span class="line">        &#125;</span><br><span class="line">        d.updateData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编辑相关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编辑 面板类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.panel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.listener.EditListener;</span><br><span class="line"><span class="keyword">import</span> gui.model.CategoryComboBoxModel;</span><br><span class="line"><span class="keyword">import</span> org.jdesktop.swingx.JXDatePicker;</span><br><span class="line"><span class="keyword">import</span> service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> util.ColorUtil;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        GUIUtil.useLNF();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EditPanel instance = <span class="keyword">new</span> EditPanel();</span><br><span class="line"></span><br><span class="line">    JLabel lSpend = <span class="keyword">new</span> JLabel(<span class="string">"花费(￥)"</span>);</span><br><span class="line">    JLabel lCategory = <span class="keyword">new</span> JLabel(<span class="string">"分类"</span>);</span><br><span class="line">    JLabel lComment = <span class="keyword">new</span> JLabel(<span class="string">"备注"</span>);</span><br><span class="line">    JLabel lDate = <span class="keyword">new</span> JLabel(<span class="string">"日期"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JTextField tfSpend = <span class="keyword">new</span> JTextField(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">public</span> JTextField tfComment = <span class="keyword">new</span> JTextField(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CategoryComboBoxModel cbModel = <span class="keyword">new</span> CategoryComboBoxModel();</span><br><span class="line">    <span class="keyword">public</span> JComboBox&lt;Category&gt; cbCategory = <span class="keyword">new</span> JComboBox&lt;&gt;(cbModel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JXDatePicker datepick = <span class="keyword">new</span> JXDatePicker(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JButton bDetermine = <span class="keyword">new</span> JButton(<span class="string">"确定"</span>);</span><br><span class="line">    <span class="keyword">public</span> JButton bCancel = <span class="keyword">new</span> JButton(<span class="string">"取消"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GUIUtil.setColor(ColorUtil.grayColor, lSpend,lCategory,lComment,lDate);</span><br><span class="line">        GUIUtil.setColor(ColorUtil.blueColor, bDetermine, bCancel);</span><br><span class="line">        JPanel pInput =<span class="keyword">new</span> JPanel();</span><br><span class="line">        JPanel pSubmit = <span class="keyword">new</span> JPanel();</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">25</span>;</span><br><span class="line">        pInput.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">4</span>, <span class="number">2</span>, gap, gap));</span><br><span class="line"></span><br><span class="line">        pInput.add(lSpend);</span><br><span class="line">        pInput.add(tfSpend);</span><br><span class="line">        pInput.add(lCategory);</span><br><span class="line">        pInput.add(cbCategory);</span><br><span class="line">        pInput.add(lComment);</span><br><span class="line">        pInput.add(tfComment);</span><br><span class="line">        pInput.add(lDate);</span><br><span class="line">        pInput.add(datepick);</span><br><span class="line"></span><br><span class="line">        pSubmit.add(bDetermine);</span><br><span class="line">        pSubmit.add(bCancel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        <span class="keyword">this</span>.add(pInput,BorderLayout.NORTH);</span><br><span class="line">        <span class="keyword">this</span>.add(pSubmit,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        addListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getSelectedCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Category) cbCategory.getSelectedItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GUIUtil.showPanel(EditPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cbModel.cs = <span class="keyword">new</span> CategoryService().list();</span><br><span class="line">        cbModel.cs.sort(Comparator.comparing(c -&gt; c.id));</span><br><span class="line">        cbCategory.updateUI();</span><br><span class="line">        resetInput();</span><br><span class="line">        tfSpend.grabFocus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tfSpend.setText(String.valueOf(DetailPanel.instance.getSelectedRecord().spend));</span><br><span class="line">        tfComment.setText(DetailPanel.instance.getSelectedRecord().comment);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>!=cbModel.cs.size())</span><br><span class="line">            cbCategory.setSelectedIndex(DetailPanel.instance.getSelectedRecord().cid - <span class="number">1</span>);</span><br><span class="line">        datepick.setDate(DetailPanel.instance.getSelectedRecord().date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EditListener listener = <span class="keyword">new</span> EditListener();</span><br><span class="line">        bCancel.addActionListener(listener);</span><br><span class="line">        bDetermine.addActionListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编辑 主框体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.frame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gui.panel.EditPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> util.CenterPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EditFrame instance = <span class="keyword">new</span> EditFrame();</span><br><span class="line">    <span class="keyword">public</span> CenterPanel workingPanel;</span><br><span class="line"></span><br><span class="line">    EditFrame() &#123;</span><br><span class="line">        workingPanel = <span class="keyword">new</span> CenterPanel(<span class="number">0.8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"编辑"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setContentPane(workingPanel);</span><br><span class="line">        <span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EditFrame instance = <span class="keyword">new</span> EditFrame();</span><br><span class="line">        instance.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        instance.workingPanel.show(EditPanel.instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编辑 监听器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> gui.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.Category;</span><br><span class="line"><span class="keyword">import</span> gui.frame.EditFrame;</span><br><span class="line"><span class="keyword">import</span> gui.panel.CategoryPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.DetailPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.EditPanel;</span><br><span class="line"><span class="keyword">import</span> gui.panel.MainPanel;</span><br><span class="line"><span class="keyword">import</span> service.RecordService;</span><br><span class="line"><span class="keyword">import</span> util.GUIUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        DetailPanel dp = DetailPanel.instance;</span><br><span class="line">        EditPanel ep = EditPanel.instance;</span><br><span class="line">        JButton b = (JButton) e.getSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b == ep.bDetermine) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==ep.cbModel.cs.size())&#123;</span><br><span class="line">                JOptionPane.showMessageDialog(ep, <span class="string">"暂无消费分类，无法添加，请先增加消费分类"</span>);</span><br><span class="line">                MainPanel.instance.workingPanel.show(CategoryPanel.instance);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!GUIUtil.checkZero(ep.tfSpend,<span class="string">"花费金额"</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> spend = Integer.parseInt(ep.tfSpend.getText());</span><br><span class="line">            Category c = ep.getSelectedCategory();</span><br><span class="line">            String comment = ep.tfComment.getText();</span><br><span class="line">            Date d = ep.datepick.getDate();</span><br><span class="line">            <span class="keyword">int</span> id = dp.getSelectedRecord().id;</span><br><span class="line">            <span class="keyword">new</span> RecordService().update(spend, c, comment, d, id);</span><br><span class="line">            JOptionPane.showMessageDialog(ep, <span class="string">"修改成功"</span>);</span><br><span class="line">            EditFrame.instance.setVisible(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            dp.updateData();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == ep.bCancel) &#123;</span><br><span class="line">            EditFrame.instance.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其他细节</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RecordService 增加一个更新方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> spend, Category c, String comment, Date date, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Record r = <span class="keyword">new</span> Record();</span><br><span class="line">        r.id = id;</span><br><span class="line">        r.spend = spend;</span><br><span class="line">        r.cid = c.id;</span><br><span class="line">        r.comment = comment;</span><br><span class="line">        r.date = date;</span><br><span class="line">        recordDao.update(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主界面面板，有一些地方要修改</span></span><br><span class="line"><span class="keyword">public</span> JButton bDetail = <span class="keyword">new</span> JButton();</span><br><span class="line"></span><br><span class="line">GUIUtil.setImageIcon(bDetail, <span class="string">"report.png"</span>, <span class="string">"消费详情"</span>);</span><br><span class="line"></span><br><span class="line">tb.add(bDetail);</span><br><span class="line"></span><br><span class="line">bDetail.addActionListener(listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToolBarListener</span></span><br><span class="line"><span class="keyword">if</span> (b == p.bReport)</span><br><span class="line">  p.workingPanel.show(ReportPanel.instance);</span><br></pre></td></tr></table></figure><h4 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h4><p>创建一个<code>DetailPanel</code>面板用来显示消费详情，在编辑键上添加一个新的<code>EditFrame</code>用来编辑选定的记录</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>该面板布局分为上中下三个部分，上部放置筛选按钮和分类选择框，中部放置表格，下部放置编辑和删除按钮。</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>消费详情显示表格内容需要新建一个<code>DetailTableModel</code>，内容直接从数据库record表中查得,并在<code>updateData</code>方法中将记录按照时间顺序进行排序</p><h4 id="分类选择框"><a href="#分类选择框" class="headerlink" title="分类选择框"></a>分类选择框</h4><p>分类选择框内容直接与<code>CategoryComboBoxModel</code>连接，无需过多更改。为实现分类选择效果，这里新建<code>DetailService</code>来实现全部查找和分类查找两个方法。之后在监听器<code>DetailListener</code>中设置标志位以区分筛选和选择全部两个按钮，在刷新方法<code>updateData</code>中监听标志位，在刷新时区分查表方法。</p><h4 id="编辑和删除按钮"><a href="#编辑和删除按钮" class="headerlink" title="编辑和删除按钮"></a>编辑和删除按钮</h4><p>下方的删除按键直接在监听器中调用<code>DetailService</code>中的删除方法即可，而编辑按钮则直接打开<code>EditFrame</code>。</p><h4 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h4><p>该布局参考<code>SpendPanel</code>,分为上下两部分，上部用四行两列的方式进行布局，下部放置确定、取消按钮。</p><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><p>实现思路也与<code>SpendPanel</code>相似，不同之处在于编辑界面默认显示要与选定记录相同，且确定键的监听器<code>EditListener</code>的内容为更新。需要注意的是该面板默认显示内容需要与选定的记录相同，在<code>resetInput</code>方法中进行。因为种类也需要与所选记录一致，所以还需要在每次更新时对下拉框中的种类根据id进行排序，以保证在<code>JComboBox</code>的<code>setSelectedIndex</code>下可以选中与原记录相同的种类。</p><h4 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h4><p><img src="/usr/blogImg/effect.png" alt="Detail"></p><h3 id="六、两个问题"><a href="#六、两个问题" class="headerlink" title="六、两个问题"></a>六、两个问题</h3><ul><li>类别删除后由于id自增长且不能重复造成的冲突</li><li>新增一笔后进入详情页，和详情页编辑后，日期会倒退一天</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本项目基于Swing和JDBC开发的图形界面桌面应用，涵盖了J2SE的绝大部分基础知识，通过这个项目能运用和锻炼几乎大部分的J2SE知识和技能。涉及到如下内容：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础内容：&lt;/strong&gt;面向对象 字符串数字 日期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中级内容：&lt;/strong&gt;异常 ，集合，JDBC, 反射机制，I/O，Swing， 利用TableModel更新数据, 图形界面的皮肤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级内容：&lt;/strong&gt;图表chart动态生成，数据库的备份与恢复，自定义圆形进度条&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件设计思想：&lt;/strong&gt;单例模式，面板类与监听器类松耦合，Entity层设计，DAO层设计，Service层设计&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务常见处理手法：&lt;/strong&gt;CRUD操作，配置信息，配置信息初始化，报表生成，一对多关系，多对一关系&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：网络编程</title>
    <link href="//georgeju95.github.io/2020/03/09/Java-Learing-day-13-Network-Programming/"/>
    <id>//georgeju95.github.io/2020/03/09/Java-Learing-day-13-Network-Programming/</id>
    <published>2020-03-09T08:10:36.000Z</published>
    <updated>2023-08-29T18:58:12.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络编程概述"><a href="#网络编程概述" class="headerlink" title="网络编程概述"></a>网络编程概述</h3><ul><li>A:计算机网络<ul><li>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</li></ul></li><li>B:网络编程<ul><li>就是用来实现网络互连的不同计算机上运行的程序间可以进行数据交换。</li></ul></li></ul><a id="more"></a><h3 id="网络编程三要素之IP概述"><a href="#网络编程三要素之IP概述" class="headerlink" title="网络编程三要素之IP概述"></a>网络编程三要素之IP概述</h3><ul><li>每个设备在网络中的唯一标识</li><li>每台网络终端在网络中都有一个独立的地址，我们在网络中传输数据就是使用这个地址。 </li><li>ipconfig：查看本机IP192.168.12.42</li><li>ping：测试连接192.168.40.62</li><li>本地回路地址：127.0.0.1 255.255.255.255是广播地址</li><li>IPv4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。 </li><li>IPv6：8组，每组4个16进制数。</li><li>1a2b:0000:aaaa:0000:0000:0000:aabb:1f2f</li><li>1a2b::aaaa:0000:0000:0000:aabb:1f2f</li><li>1a2b:0000:aaaa::aabb:1f2f</li><li>1a2b:0000:aaaa::0000:aabb:1f2f</li><li>1a2b:0000:aaaa:0000::aabb:1f2f</li></ul><h3 id="网络编程三要素之端口号概述"><a href="#网络编程三要素之端口号概述" class="headerlink" title="网络编程三要素之端口号概述"></a>网络编程三要素之端口号概述</h3><ul><li>每个程序在设备上的唯一标识</li><li>每个网络程序都需要绑定一个端口号，传输数据的时候除了确定发到哪台机器上，还要明确发到哪个程序。</li><li>端口号范围从0-65535</li><li>编写网络应用就需要绑定一个端口号，尽量使用1024以上的，1024以下的基本上都被系统程序占用了。</li><li>常用端口<ul><li>mysql: 3306</li><li>oracle: 1521</li><li>web: 80</li><li>tomcat: 8080</li><li>QQ: 4000</li><li>feiQ: 2425</li></ul></li></ul><h3 id="网络编程三要素协议"><a href="#网络编程三要素协议" class="headerlink" title="网络编程三要素协议"></a>网络编程三要素协议</h3><ul><li>为计算机网络中进行数据交换而建立的规则、标准或约定的集合。</li><li>UDP<ul><li>面向无连接，数据不安全，速度快。不区分客户端与服务端。</li></ul></li><li>TCP<br>　　* 面向连接（三次握手），数据安全，速度略低。分为客户端和服务端。<ul><li>三次握手: 客户端先向服务端发起请求, 服务端响应请求, 传输数据</li></ul></li></ul><h3 id="Socket通信原理图解"><a href="#Socket通信原理图解" class="headerlink" title="Socket通信原理图解"></a>Socket通信原理图解</h3><ul><li>A:Socket套接字概述：<ul><li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</li><li>通信的两端都有Socket。</li><li>网络通信其实就是Socket间的通信。</li><li>数据在两个Socket间通过IO流传输。</li><li>Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的IP和port。</li></ul></li></ul><h3 id="UDP传输（了解）"><a href="#UDP传输（了解）" class="headerlink" title="UDP传输（了解）"></a>UDP传输（了解）</h3><ul><li><p>1.发送Send</p><ul><li><p>创建DatagramSocket, 随机端口号</p></li><li><p>创建DatagramPacket, 指定数据, 长度, 地址, 端口</p></li><li><p>使用DatagramSocket发送DatagramPacket</p></li><li><p>关闭DatagramSocket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 1.发送Send</span></span><br><span class="line"><span class="comment"> * 创建DatagramSocket, 随机端口号</span></span><br><span class="line"><span class="comment"> * 创建DatagramPacket, 指定数据, 长度, 地址, 端口</span></span><br><span class="line"><span class="comment"> * 使用DatagramSocket发送DatagramPacket</span></span><br><span class="line"><span class="comment"> * 关闭DatagramSocket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SocketException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String str = <span class="string">"what are you 弄啥呢?"</span>;</span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line">DatagramPacket packet = <span class="comment">//创建Packet相当于集装箱</span></span><br><span class="line"><span class="keyword">new</span> DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">6666</span>);</span><br><span class="line">socket.send(packet);<span class="comment">//发货,将数据发出去</span></span><br><span class="line">socket.close();<span class="comment">//关闭码头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>2.接收Receive</p><ul><li><p>创建DatagramSocket, 指定端口号</p></li><li><p>创建DatagramPacket, 指定数组, 长度</p></li><li><p>使用DatagramSocket接收DatagramPacket</p></li><li><p>关闭DatagramSocket</p></li><li><p>从DatagramPacket中获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Receive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** 2.接收Receive</span></span><br><span class="line"><span class="comment"> * 创建DatagramSocket, 指定端口号</span></span><br><span class="line"><span class="comment"> * 创建DatagramPacket, 指定数组, 长度</span></span><br><span class="line"><span class="comment"> * 使用DatagramSocket接收DatagramPacket</span></span><br><span class="line"><span class="comment"> * 关闭DatagramSocket</span></span><br><span class="line"><span class="comment"> * 从DatagramPacket中获取数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>], <span class="number">1024</span>);<span class="comment">//创建Packet相当于创建集装箱</span></span><br><span class="line">socket.receive(packet);<span class="comment">//接货,接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = packet.getData();<span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">int</span> len = packet.getLength();<span class="comment">//获取有效的字节个数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">发送和接受的单线程程序。需要在bin文件夹下开启两个终端，先执行接受程序，再执行发送程序</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>优化，传输接受多次数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[Demo2_Send.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 1.发送Send</span></span><br><span class="line"><span class="comment"> * 创建DatagramSocket, 随机端口号</span></span><br><span class="line"><span class="comment"> * 创建DatagramPacket, 指定数据, 长度, 地址, 端口</span></span><br><span class="line"><span class="comment"> * 使用DatagramSocket发送DatagramPacket</span></span><br><span class="line"><span class="comment"> * 关闭DatagramSocket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SocketException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//获取键盘录入的字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"quit"</span>.equals(line)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">DatagramPacket packet = <span class="comment">//创建Packet相当于集装箱</span></span><br><span class="line"><span class="keyword">new</span> DatagramPacket(line.getBytes(), line.getBytes().length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">6666</span>);</span><br><span class="line">socket.send(packet);<span class="comment">//发货,将数据发出去</span></span><br><span class="line">&#125;</span><br><span class="line">socket.close();<span class="comment">//关闭码头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Demo2_Send.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Receive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** 2.接收Receive</span></span><br><span class="line"><span class="comment"> * 创建DatagramSocket, 指定端口号</span></span><br><span class="line"><span class="comment"> * 创建DatagramPacket, 指定数组, 长度</span></span><br><span class="line"><span class="comment"> * 使用DatagramSocket接收DatagramPacket</span></span><br><span class="line"><span class="comment"> * 关闭DatagramSocket</span></span><br><span class="line"><span class="comment"> * 从DatagramPacket中获取数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>], <span class="number">1024</span>);<span class="comment">//创建Packet相当于创建集装箱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">socket.receive(packet);<span class="comment">//接货,接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = packet.getData();<span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">int</span> len = packet.getLength();<span class="comment">//获取有效的字节个数</span></span><br><span class="line">String ip = packet.getAddress().getHostAddress();<span class="comment">//获取ip地址</span></span><br><span class="line"><span class="keyword">int</span> port = packet.getPort();<span class="comment">//获取端口号</span></span><br><span class="line">System.out.println(ip + <span class="string">":"</span> + port + <span class="string">":"</span> + <span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP传输多线程"><a href="#UDP传输多线程" class="headerlink" title="UDP传输多线程"></a>UDP传输多线程</h3><ul><li>A发送和接收在一个窗口完成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_MoreThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Receive().start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Send().start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>], <span class="number">1024</span>);<span class="comment">//创建Packet相当于创建集装箱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">socket.receive(packet);<span class="comment">//接货,接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = packet.getData();<span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">int</span> len = packet.getLength();<span class="comment">//获取有效的字节个数</span></span><br><span class="line">String ip = packet.getAddress().getHostAddress();<span class="comment">//获取ip地址</span></span><br><span class="line"><span class="keyword">int</span> port = packet.getPort();<span class="comment">//获取端口号</span></span><br><span class="line">System.out.println(ip + <span class="string">":"</span> + port + <span class="string">":"</span> + <span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();<span class="comment">//创建Socket相当于创建码头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//获取键盘录入的字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"quit"</span>.equals(line)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">DatagramPacket packet = <span class="comment">//创建Packet相当于集装箱</span></span><br><span class="line"><span class="keyword">new</span> DatagramPacket(line.getBytes(), line.getBytes().length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">6666</span>);</span><br><span class="line">socket.send(packet);<span class="comment">//发货,将数据发出去</span></span><br><span class="line">&#125;</span><br><span class="line">socket.close();</span><br><span class="line">&#125;  <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP聊天图形化界面"><a href="#UDP聊天图形化界面" class="headerlink" title="UDP聊天图形化界面"></a>UDP聊天图形化界面</h3><h3 id="UDP聊天发送功能"><a href="#UDP聊天发送功能" class="headerlink" title="UDP聊天发送功能"></a>UDP聊天发送功能</h3><h3 id="UDP聊天记录功能"><a href="#UDP聊天记录功能" class="headerlink" title="UDP聊天记录功能"></a>UDP聊天记录功能</h3><h3 id="UDP聊天清屏功能"><a href="#UDP聊天清屏功能" class="headerlink" title="UDP聊天清屏功能"></a>UDP聊天清屏功能</h3><h3 id="UDP聊天震动功能"><a href="#UDP聊天震动功能" class="headerlink" title="UDP聊天震动功能"></a>UDP聊天震动功能</h3><h3 id="UDP聊天快捷键和代码优化"><a href="#UDP聊天快捷键和代码优化" class="headerlink" title="UDP聊天快捷键和代码优化)"></a>UDP聊天快捷键和代码优化)</h3><h3 id="UDP聊天生成jar文件"><a href="#UDP聊天生成jar文件" class="headerlink" title="UDP聊天生成jar文件"></a>UDP聊天生成jar文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"><span class="keyword">import</span> java.awt.TextArea;</span><br><span class="line"><span class="keyword">import</span> java.awt.TextField;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_GUIChat</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TextField tf;</span><br><span class="line"><span class="keyword">private</span> Button send;</span><br><span class="line"><span class="keyword">private</span> Button log;</span><br><span class="line"><span class="keyword">private</span> Button clear;</span><br><span class="line"><span class="keyword">private</span> Button shake;</span><br><span class="line"><span class="keyword">private</span> TextArea viewText;</span><br><span class="line"><span class="keyword">private</span> TextArea sendText;</span><br><span class="line"><span class="keyword">private</span> DatagramSocket socket;</span><br><span class="line"><span class="keyword">private</span> BufferedWriter bw;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * GUI聊天</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo4_GUIChat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">southPanel();</span><br><span class="line">centerPanel();</span><br><span class="line">event();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket.close();</span><br><span class="line">bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">send.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">send();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logFile();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">clear.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">viewText.setText(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">shake.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">send(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">1</span>&#125;,tf.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sendText.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if(e.getKeyCode() == KeyEvent.VK_ENTER &amp;&amp; e.isControlDown()) &#123;//isControlDown ctrl是否被按下</span></span><br><span class="line"><span class="keyword">if</span>(e.getKeyCode() == KeyEvent.VK_ENTER) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">send();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shake</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="keyword">this</span>.getLocation().x;<span class="comment">//获取横坐标位置</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="keyword">this</span>.getLocation().y;<span class="comment">//获取纵坐标位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.setLocation(x + <span class="number">20</span>, y + <span class="number">20</span>);</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.setLocation(x + <span class="number">20</span>, y - <span class="number">20</span>);</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.setLocation(x - <span class="number">20</span>, y + <span class="number">20</span>);</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.setLocation(x - <span class="number">20</span>, y - <span class="number">20</span>);</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.setLocation(x, y);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">bw.flush();<span class="comment">//刷新缓冲区</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"config.txt"</span>);</span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//在内存中创建缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">baos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String str = baos.toString();<span class="comment">//将内存中的内容转换成了字符串</span></span><br><span class="line">viewText.setText(str);</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">byte</span>[] arr, String ip)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DatagramPacket packet = </span><br><span class="line"><span class="keyword">new</span> DatagramPacket(arr, arr.length, InetAddress.getByName(ip), <span class="number">9999</span>);</span><br><span class="line">socket.send(packet);<span class="comment">//发送数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String message = sendText.getText();<span class="comment">//获取发送区域的内容</span></span><br><span class="line">String ip = tf.getText();<span class="comment">//获取ip地址;</span></span><br><span class="line">ip = ip.trim().length() == <span class="number">0</span> ? <span class="string">"255.255.255.255"</span> : ip;</span><br><span class="line"></span><br><span class="line">send(message.getBytes(),ip);</span><br><span class="line"></span><br><span class="line">String time = getCurrentTime();<span class="comment">//获取当前时间</span></span><br><span class="line">String str = time + <span class="string">" 我对:"</span> + (ip.equals(<span class="string">"255.255.255.255"</span>) ? <span class="string">"所有人"</span> : ip) + <span class="string">"说\r\n"</span> + message + <span class="string">"\r\n\r\n"</span>;<span class="comment">//alt + shift + l 抽取局部变量</span></span><br><span class="line">viewText.append(str);<span class="comment">//将信息添加到显示区域中</span></span><br><span class="line">bw.write(str);<span class="comment">//将信息写到数据库中(用缓冲区替代)</span></span><br><span class="line">sendText.setText(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date d = <span class="keyword">new</span> Date();<span class="comment">//创建当前日期对象</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">return</span> sdf.format(d);<span class="comment">//将时间格式化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">centerPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Panel center = <span class="keyword">new</span> Panel();<span class="comment">//创建中间的Panel</span></span><br><span class="line">viewText = <span class="keyword">new</span> TextArea();</span><br><span class="line">sendText = <span class="keyword">new</span> TextArea(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">center.setLayout(<span class="keyword">new</span> BorderLayout());<span class="comment">//设置为边界布局管理器</span></span><br><span class="line">center.add(sendText,BorderLayout.SOUTH);<span class="comment">//发送的文本区域放在南边</span></span><br><span class="line">center.add(viewText,BorderLayout.CENTER);<span class="comment">//显示区域放在中间</span></span><br><span class="line">viewText.setEditable(<span class="keyword">false</span>);<span class="comment">//设置不可以编辑</span></span><br><span class="line">viewText.setBackground(Color.WHITE);<span class="comment">//设置背景颜色</span></span><br><span class="line">sendText.setFont(<span class="keyword">new</span> Font(<span class="string">"xxx"</span>, Font.PLAIN, <span class="number">15</span>));</span><br><span class="line">viewText.setFont(<span class="keyword">new</span> Font(<span class="string">"xxx"</span>, Font.PLAIN, <span class="number">15</span>));</span><br><span class="line"><span class="keyword">this</span>.add(center,BorderLayout.CENTER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">southPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Panel south = <span class="keyword">new</span> Panel();<span class="comment">//创建南边的Panel</span></span><br><span class="line">tf = <span class="keyword">new</span> TextField(<span class="number">15</span>);</span><br><span class="line">tf.setText(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">send = <span class="keyword">new</span> Button(<span class="string">"发 送"</span>);</span><br><span class="line">log = <span class="keyword">new</span> Button(<span class="string">"记 录"</span>);</span><br><span class="line">clear = <span class="keyword">new</span> Button(<span class="string">"清 屏"</span>);</span><br><span class="line">shake = <span class="keyword">new</span> Button(<span class="string">"震 动"</span>);</span><br><span class="line">south.add(tf);</span><br><span class="line">south.add(send);</span><br><span class="line">south.add(log);</span><br><span class="line">south.add(clear);</span><br><span class="line">south.add(shake);</span><br><span class="line"><span class="keyword">this</span>.add(south,BorderLayout.SOUTH);<span class="comment">//将Panel放在Frame的南边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setLocation(<span class="number">500</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">this</span>.setSize(<span class="number">400</span>, <span class="number">600</span>);</span><br><span class="line"><span class="keyword">new</span> Receive().start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"config.txt"</span>,<span class="keyword">true</span>));<span class="comment">//需要在尾部追加</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//接收和发送需要同时执行,所以定义成多线程的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>], <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">socket.receive(packet);<span class="comment">//接收信息</span></span><br><span class="line"><span class="keyword">byte</span>[] arr = packet.getData();<span class="comment">//获取字节数据</span></span><br><span class="line"><span class="keyword">int</span> len = packet.getLength();<span class="comment">//获取有效的字节数据</span></span><br><span class="line"><span class="keyword">if</span>(arr[<span class="number">0</span>] == -<span class="number">1</span> &amp;&amp; len == <span class="number">1</span>) &#123;<span class="comment">//如果发过来的数组第一个存储的值是-1,并且数组长度是1</span></span><br><span class="line">shake();<span class="comment">//调用震动方法</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//终止本次循环,继续下次循环,因为震动后不需要执行下面的代码</span></span><br><span class="line">&#125;</span><br><span class="line">String message = <span class="keyword">new</span> String(arr,<span class="number">0</span>,len);<span class="comment">//转换成字符串</span></span><br><span class="line"></span><br><span class="line">String time = getCurrentTime();<span class="comment">//获取当前时间</span></span><br><span class="line">String ip = packet.getAddress().getHostAddress();<span class="comment">//获取ip地址</span></span><br><span class="line">String str = time + <span class="string">" "</span> + ip + <span class="string">" 对我说:\r\n"</span> + message + <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">viewText.append(str);</span><br><span class="line">bw.write(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Demo4_GUIChat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP协议（掌握）"><a href="#TCP协议（掌握）" class="headerlink" title="TCP协议（掌握）"></a>TCP协议（掌握）</h3><ul><li><p>1.客户端</p><ul><li><p>创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</p></li><li><p>调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</p></li><li><p>输入流可以读取服务端输出流写出的数据</p></li><li><p>输出流可以写出数据到服务端的输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 1.客户端</span></span><br><span class="line"><span class="comment">* 创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</span></span><br><span class="line"><span class="comment">* 调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</span></span><br><span class="line"><span class="comment">* 输入流可以读取服务端输出流写出的数据</span></span><br><span class="line"><span class="comment">* 输出流可以写出数据到服务端的输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">InputStream is = socket.getInputStream();<span class="comment">//获取客户端输入流</span></span><br><span class="line">OutputStream os = socket.getOutputStream();<span class="comment">//获取客户端的输出流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = is.read(arr);<span class="comment">//读取服务器发过来的数据</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));       <span class="comment">//将数据转换成字符串并打印</span></span><br><span class="line"></span><br><span class="line">os.write(<span class="string">"学习挖掘机哪家强?"</span>.getBytes());<span class="comment">//客户端向服务器写数据</span></span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>2.服务端</p><ul><li><p>创建ServerSocket(需要指定端口号)</p></li><li><p>调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket</p></li><li><p>调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</p></li><li><p>输入流可以读取客户端输出流写出的数据</p></li><li><p>输出流可以写出数据到客户端的输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 2.服务端</span></span><br><span class="line"><span class="comment">* 创建ServerSocket(需要指定端口号)</span></span><br><span class="line"><span class="comment">* 调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket</span></span><br><span class="line"><span class="comment">* 调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</span></span><br><span class="line"><span class="comment">* 输入流可以读取客户端输出流写出的数据</span></span><br><span class="line"><span class="comment">* 输出流可以写出数据到客户端的输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">Socket socket = server.accept();<span class="comment">//接受客户端的请求</span></span><br><span class="line">InputStream is = socket.getInputStream();<span class="comment">//获取客户端输入流</span></span><br><span class="line">OutputStream os = socket.getOutputStream();<span class="comment">//获取客户端的输出流</span></span><br><span class="line"></span><br><span class="line">os.write(<span class="string">"百度一下你就知道"</span>.getBytes());<span class="comment">//服务器向客户端写出数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = is.read(arr);<span class="comment">//读取客户端发过来的数据</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));       <span class="comment">//将数据转换成字符串并打印</span></span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="TCP协议代码优化"><a href="#TCP协议代码优化" class="headerlink" title="TCP协议代码优化"></a>TCP协议代码优化</h3><ul><li>客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 1.客户端</span></span><br><span class="line"><span class="comment">* 创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</span></span><br><span class="line"><span class="comment">* 调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</span></span><br><span class="line"><span class="comment">* 输入流可以读取服务端输出流写出的数据</span></span><br><span class="line"><span class="comment">* 输出流可以写出数据到服务端的输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));<span class="comment">//将字节流包装成了字符流</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());<span class="comment">//PrintStream中有写出换行的方法</span></span><br><span class="line"></span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">ps.println(<span class="string">"我想报名黑马程序员"</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">ps.println(<span class="string">"大哭!!!能不能给次机会"</span>);</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 2.服务端</span></span><br><span class="line"><span class="comment">* 创建ServerSocket(需要指定端口号)</span></span><br><span class="line"><span class="comment">* 调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket</span></span><br><span class="line"><span class="comment">* 调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</span></span><br><span class="line"><span class="comment">* 输入流可以读取客户端输出流写出的数据</span></span><br><span class="line"><span class="comment">* 输出流可以写出数据到客户端的输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//服务端是多线程的</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();<span class="comment">//接受客户端的请求</span></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));<span class="comment">//将字节流包装成了字符流</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());<span class="comment">//PrintStream中有写出换行的方法</span></span><br><span class="line"></span><br><span class="line">ps.println(<span class="string">"欢迎咨询黑马程序员"</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">ps.println(<span class="string">"不好意思,爆满了"</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">Socket socket = server.accept();<span class="comment">//接受客户端的请求</span></span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));<span class="comment">//将字节流包装成了字符流</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());<span class="comment">//PrintStream中有写出换行的方法</span></span><br><span class="line"></span><br><span class="line">ps.println(<span class="string">"欢迎咨询黑马程序员"</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">ps.println(<span class="string">"不好意思,爆满了"</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>客户端向服务器写字符串(键盘录入),服务器(多线程)将字符串反转后写回,客户端再次读取到是反转后的字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">[Demo2_Client.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端向服务器写字符串(键盘录入),服务器(多线程)将字符串反转后写回,客户端再次读取到是反转后的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54321</span>);<span class="comment">//创建客户端,指定ip地址和端口号</span></span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));<span class="comment">//获取输入流</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());<span class="comment">//获取输出流</span></span><br><span class="line"></span><br><span class="line">ps.println(sc.nextLine());<span class="comment">//将字符串写到服务器去</span></span><br><span class="line">System.out.println(br.readLine()); <span class="comment">//将反转后的结果读出来</span></span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Demo2_Server.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">54321</span>);</span><br><span class="line">System.out.println(<span class="string">"服务器启动,绑定54321端口"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();<span class="comment">//接受客户端的请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;<span class="comment">//开启一条线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));<span class="comment">//获取输入流</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());<span class="comment">//获取输出流</span></span><br><span class="line"></span><br><span class="line">String line = br.readLine();<span class="comment">//将客户端写过来的数据读取出来</span></span><br><span class="line">line = <span class="keyword">new</span> StringBuilder(line).reverse().toString();<span class="comment">//链式编程</span></span><br><span class="line">ps.println(line);<span class="comment">//反转后写回去</span></span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><ul><li>客户端向服务器上传文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">[Test2_UpdateClient.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2_UpdateClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownHostException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.提示输入要上传的文件路径, 验证路径是否存在以及是否是文件夹</span></span><br><span class="line">File file = getFile();</span><br><span class="line"><span class="comment">// 2.发送文件名到服务端</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line">ps.println(file.getName());</span><br><span class="line"><span class="comment">// 6.接收结果, 如果存在给予提示, 程序直接退出</span></span><br><span class="line">String result = br.readLine();<span class="comment">//读取存在后不存在的结果</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"存在"</span>.equals(result)) &#123;</span><br><span class="line">System.out.println(<span class="string">"您上传的文件已经存在,请不要重复上传"</span>);</span><br><span class="line">socket.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7.如果不存在, 定义FileInputStream读取文件, 写出到网络</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">ps.write(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个文件路径:"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();</span><br><span class="line">File file = <span class="keyword">new</span> File(line);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的文件路径不存在,请重新录入:"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的是文件夹路径,请输入一个文件路径:"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Test2_UpdateServer.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2_UpdateServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//3,建立多线程的服务器</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line">System.out.println(<span class="string">"服务器启动,绑定12345端口号"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.读取文件名</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();<span class="comment">//接受请求</span></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line">String fileName = br.readLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.判断文件是否存在, 将结果发回客户端</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"update"</span>);</span><br><span class="line">dir.mkdir();<span class="comment">//创建文件夹</span></span><br><span class="line">File file = <span class="keyword">new</span> File(dir,fileName);<span class="comment">//封装成File对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(file.exists()) &#123;<span class="comment">//如果服务器已经存在这个文件</span></span><br><span class="line">ps.println(<span class="string">"存在"</span>);<span class="comment">//将存在写给客户端</span></span><br><span class="line">socket.close();<span class="comment">//关闭socket</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">ps.println(<span class="string">"不存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.定义FileOutputStream, 从网络读取数据, 存储到本地</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((len = is.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fos.close();</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网络编程概述&quot;&gt;&lt;a href=&quot;#网络编程概述&quot; class=&quot;headerlink&quot; title=&quot;网络编程概述&quot;&gt;&lt;/a&gt;网络编程概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:计算机网络&lt;ul&gt;
&lt;li&gt;是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:网络编程&lt;ul&gt;
&lt;li&gt;就是用来实现网络互连的不同计算机上运行的程序间可以进行数据交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：多线程(下) &amp; GUI</title>
    <link href="//georgeju95.github.io/2020/03/06/Java-Learing-day-12-Multiple-Thread2-and-GUI/"/>
    <id>//georgeju95.github.io/2020/03/06/Java-Learing-day-12-Multiple-Thread2-and-GUI/</id>
    <published>2020-03-06T02:14:36.000Z</published>
    <updated>2023-08-29T18:58:12.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例设计模式（掌握）"><a href="#单例设计模式（掌握）" class="headerlink" title="单例设计模式（掌握）"></a>单例设计模式（掌握）</h3><ul><li><p>单例设计模式：保证类在内存中只有一个对象。</p></li><li><p>如何保证类在内存中只有一个对象呢？</p><ul><li>(1)控制类的创建，不让其他类来创建本类的对象。private</li><li>(2)在本类中定义一个本类的对象。Singleton s;</li><li>(3)提供公共的访问方式。  public static Singleton getInstance(){return s}</li></ul></li></ul><a id="more"></a><ul><li><p>单例写法两种：</p><ul><li><p>(1)饿汉式 开发用这种方式。</p></li><li><p>(2)懒汉式 面试写这种方式。多线程存在隐患</p></li><li><p>(3)第三种格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * * 单例设计模式：保证类在内存中只有一个对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Singleton s1 = new Singleton();</span></span><br><span class="line"></span><br><span class="line">Singleton s1 = Singleton.s;<span class="comment">//成员变量被私有,不能通过类名.调用</span></span><br><span class="line"><span class="comment">//Singleton.s = null;</span></span><br><span class="line">Singleton s2 = Singleton.s;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Singleton s1 = Singleton.getInstance();</span></span><br><span class="line"><span class="comment">Singleton s2 = Singleton.getInstance();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(s1 == s2);*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 饿汉式 </span></span><br><span class="line"><span class="comment">class Singleton &#123;</span></span><br><span class="line"><span class="comment">//1,私有构造方法,其他类不能访问该构造方法了</span></span><br><span class="line"><span class="comment">private Singleton()&#123;&#125;</span></span><br><span class="line"><span class="comment">//2,创建本类对象(上来就创建对象，空间换时间)</span></span><br><span class="line"><span class="comment">private static Singleton s = new Singleton();</span></span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="comment">public static Singleton getInstance() &#123;//获取实例</span></span><br><span class="line"><span class="comment">return s;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 懒汉式,单例的延迟加载模式</span></span><br><span class="line"><span class="comment">class Singleton &#123;</span></span><br><span class="line"><span class="comment">//1,私有构造方法,其他类不能访问该构造方法了</span></span><br><span class="line"><span class="comment">private Singleton()&#123;&#125;</span></span><br><span class="line"><span class="comment">//2,声明一个引用</span></span><br><span class="line"><span class="comment">private static Singleton s ;</span></span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="comment">public static Singleton getInstance() &#123;//获取实例</span></span><br><span class="line"><span class="comment">if(s == null) &#123;</span></span><br><span class="line"><span class="comment">//线程1等待,线程2等待(多线程情况下可能会出现创建多个对象的安全隐患，所以懒汉式开发中不经常用，面试用)</span></span><br><span class="line"><span class="comment">s = new Singleton();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return s;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 饿汉式和懒汉式的区别</span></span><br><span class="line"><span class="comment"> * 1,饿汉式是空间换时间,懒汉式是时间换空间</span></span><br><span class="line"><span class="comment"> * 2,在多线程访问时,饿汉式不会创建多个对象,而懒汉式有可能会创建多个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *其他模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,私有构造方法,其他类不能访问该构造方法了</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2,声明一个引用</span></span><br><span class="line">  <span class="comment">//被final修饰的变量不可以被更改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h3><ul><li>Runtime类是一个单例类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Runtime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Runtime r = Runtime.getRuntime();<span class="comment">//获取运行时对象</span></span><br><span class="line"><span class="comment">//r.exec("shutdown -s -t 300");</span></span><br><span class="line">r.exec(<span class="string">"shutdown -a"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-Timer-（掌握）"><a href="#多线程-Timer-（掌握）" class="headerlink" title="多线程(Timer)（掌握）"></a>多线程(Timer)（掌握）</h3><ul><li>Timer类:计时器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Timer t = <span class="keyword">new</span> Timer();</span><br><span class="line"><span class="comment">//在指定时间安排指定任务</span></span><br><span class="line"><span class="comment">//第一个参数,是安排的任务,第二个参数是执行的时间,第三个参数是过多长时间再重复执行</span></span><br><span class="line">t.schedule(<span class="keyword">new</span> MyTimerTask(), <span class="keyword">new</span> Date(<span class="number">188</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">50</span>),<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"起床背英语单词"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个线程间的通信（掌握）"><a href="#两个线程间的通信（掌握）" class="headerlink" title="两个线程间的通信（掌握）"></a>两个线程间的通信（掌握）</h3><ul><li><p>1.什么时候需要通信</p><ul><li>多个线程并发执行时, 在默认情况下CPU是随机切换线程的</li><li>如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印</li></ul></li><li><p>2.怎么通信</p><ul><li><p>如果希望线程等待, 就调用wait()</p></li><li><p>如果希望唤醒等待的线程, 就调用notify();</p></li><li><p>这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Notify</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 等待唤醒机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Printer p = <span class="keyword">new</span> Printer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.print1();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.print2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待唤醒机制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前线程等待</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"黑"</span>);</span><br><span class="line">System.out.print(<span class="string">"马"</span>);</span><br><span class="line">System.out.print(<span class="string">"程"</span>);</span><br><span class="line">System.out.print(<span class="string">"序"</span>);</span><br><span class="line">System.out.print(<span class="string">"员"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();<span class="comment">//随机唤醒单个等待的线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"传"</span>);</span><br><span class="line">System.out.print(<span class="string">"智"</span>);</span><br><span class="line">System.out.print(<span class="string">"播"</span>);</span><br><span class="line">System.out.print(<span class="string">"客"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="三个或三个以上间的线程通信"><a href="#三个或三个以上间的线程通信" class="headerlink" title="三个或三个以上间的线程通信"></a>三个或三个以上间的线程通信</h3><ul><li><p>多个线程通信的问题</p><ul><li><p>notify()方法是随机唤醒一个线程</p></li><li><p>notifyAll()方法是唤醒所有线程</p></li><li><p>JDK5之前无法唤醒指定的一个线程</p></li><li><p>如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_NotifyAll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Printer2 p = <span class="keyword">new</span> Printer2();</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.print1();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.print2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.print3();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*1,在同步代码块中,用哪个对象锁,就用哪个对象调用wait方法</span></span><br><span class="line"><span class="comment"> * 2,为什么wait方法和notify方法定义在Object这类中?</span></span><br><span class="line"><span class="comment"> * 因为锁对象可以是任意对象,Object是所有的类的基类,所以wait方法和notify方法需要定义在Object这个类中</span></span><br><span class="line"><span class="comment"> * 3,sleep方法和wait方法的区别?</span></span><br><span class="line"><span class="comment"> * a,sleep方法必须传入参数,参数就是时间,时间到了自动醒来</span></span><br><span class="line"><span class="comment"> *   wait方法可以传入参数也可以不传入参数,传入参数就是在参数的时间结束后等待,不传入参数就是直接等待</span></span><br><span class="line"><span class="comment"> * b,sleep方法在同步函数或同步代码块中,不释放锁,睡着了也抱着锁睡</span></span><br><span class="line"><span class="comment"> * wait方法在同步函数或者同步代码块中,释放锁</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">while</span>(flag != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前线程等待</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"黑"</span>);</span><br><span class="line">System.out.print(<span class="string">"马"</span>);</span><br><span class="line">System.out.print(<span class="string">"程"</span>);</span><br><span class="line">System.out.print(<span class="string">"序"</span>);</span><br><span class="line">System.out.print(<span class="string">"员"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//this.notify();//随机唤醒单个等待的线程</span></span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">while</span>(flag != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//线程2在此等待</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"传"</span>);</span><br><span class="line">System.out.print(<span class="string">"智"</span>);</span><br><span class="line">System.out.print(<span class="string">"播"</span>);</span><br><span class="line">System.out.print(<span class="string">"客"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">flag = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//this.notify();</span></span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">while</span>(flag != <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//线程3在此等待,if语句是在哪里等待,就在哪里起来</span></span><br><span class="line"> <span class="comment">//while循环是循环判断,每次都会判断标记</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"i"</span>);</span><br><span class="line">System.out.print(<span class="string">"t"</span>);</span><br><span class="line">System.out.print(<span class="string">"h"</span>);</span><br><span class="line">System.out.print(<span class="string">"e"</span>);</span><br><span class="line">System.out.print(<span class="string">"i"</span>);</span><br><span class="line">System.out.print(<span class="string">"m"</span>);</span><br><span class="line">System.out.print(<span class="string">"a"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//this.notify();</span></span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JDK1-5的新特性互斥锁（掌握）"><a href="#JDK1-5的新特性互斥锁（掌握）" class="headerlink" title="JDK1.5的新特性互斥锁（掌握）"></a>JDK1.5的新特性互斥锁（掌握）</h3><ul><li><p>1.同步</p><ul><li><strong>使用ReentrantLock类的lock()和unlock()方法进行同步</strong></li></ul></li><li><p>2.通信</p><ul><li><p>使用ReentrantLock类的newCondition()方法可以获取Condition对象</p></li><li><p><strong>需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法</strong></p></li><li><p><strong>不同的线程使用不同的Condition</strong>, 这样就能区分唤醒的时候找哪个线程了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_ThreadGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * ThreadGroup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">ThreadGroup tg = <span class="keyword">new</span> ThreadGroup(<span class="string">"我是一个新的线程组"</span>);<span class="comment">//创建新的线程组</span></span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();<span class="comment">//创建Runnable的子类对象</span></span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"张三"</span>);<span class="comment">//将线程t1放在组中</span></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"李四"</span>);<span class="comment">//将线程t2放在组中</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.getThreadGroup().getName());<span class="comment">//获取组名</span></span><br><span class="line">System.out.println(t2.getThreadGroup().getName());</span><br><span class="line"></span><br><span class="line">tg.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(mr, <span class="string">"张三"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(mr, <span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">ThreadGroup tg1 = t1.getThreadGroup();</span><br><span class="line">ThreadGroup tg2 = t2.getThreadGroup();</span><br><span class="line"></span><br><span class="line">System.out.println(tg1.getName());<span class="comment">//默认的是主线程</span></span><br><span class="line">System.out.println(tg2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...."</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="线程组的概述和使用"><a href="#线程组的概述和使用" class="headerlink" title="线程组的概述和使用"></a>线程组的概述和使用</h3><ul><li>A:线程组概述<ul><li>Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</li><li>默认情况下，所有的线程都属于主线程组。<ul><li>public final ThreadGroup getThreadGroup()//通过线程对象获取他所属于的组</li><li>public final String getName()//通过线程组对象获取他组的名字</li></ul></li><li>我们也可以给线程设置分组<ul><li>1,ThreadGroup(String name) 创建线程组对象并给其赋值名字</li><li>2,创建线程对象</li><li>3,Thread(ThreadGroup?group, Runnable?target, String?name) </li><li>4,设置整组的优先级或者守护线程</li></ul></li><li>B:案例演示<ul><li>线程组的使用,默认是主线程组</li><li>自己设定线程组</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_ThreadGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * ThreadGroup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">ThreadGroup tg = <span class="keyword">new</span> ThreadGroup(<span class="string">"我是一个新的线程组"</span>);<span class="comment">//创建新的线程组</span></span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();<span class="comment">//创建Runnable的子类对象</span></span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"张三"</span>);<span class="comment">//将线程t1放在组中</span></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"李四"</span>);<span class="comment">//将线程t2放在组中</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.getThreadGroup().getName());<span class="comment">//获取组名</span></span><br><span class="line">System.out.println(t2.getThreadGroup().getName());</span><br><span class="line"></span><br><span class="line">tg.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(mr, <span class="string">"张三"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(mr, <span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">ThreadGroup tg1 = t1.getThreadGroup();</span><br><span class="line">ThreadGroup tg2 = t2.getThreadGroup();</span><br><span class="line"></span><br><span class="line">System.out.println(tg1.getName());<span class="comment">//默认的是主线程</span></span><br><span class="line">System.out.println(tg2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...."</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的五种状态（掌握）"><a href="#线程的五种状态（掌握）" class="headerlink" title="线程的五种状态（掌握）"></a>线程的五种状态（掌握）</h3><ul><li>看图说话</li><li>新建,就绪,运行,阻塞,死亡</li></ul><p><img src="/assets/blogImg/%E7%BA%BF%E7%A8%8B%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="线程转换"></p><h3 id="线程池的概述和使用（了解）"><a href="#线程池的概述和使用（了解）" class="headerlink" title="线程池的概述和使用（了解）"></a>线程池的概述和使用（了解）</h3><ul><li><p>A:线程池概述</p><ul><li>程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池</li></ul></li><li><p>B:内置线程池的使用概述</p><ul><li><p>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法</p><ul><li>public static ExecutorService newFixedThreadPool(int nThreads)</li><li>public static ExecutorService newSingleThreadExecutor()</li><li>这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</li><li>Future&lt;?&gt; submit(Runnable task)</li><li><t> Future<t> submit(Callable<t> task)</t></t></t></li></ul></li><li><p>使用步骤：</p><ul><li>创建线程池对象</li><li>创建Runnable实例</li><li>提交Runnable实例</li><li>关闭线程池</li></ul></li></ul></li><li><p>C:案例演示</p><pre><code>* 提交的是Runnable<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Executors</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line"><span class="comment"> * public static ExecutorService newSingleThreadExecutor()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//创建线程池</span></span><br><span class="line">pool.submit(<span class="keyword">new</span> MyRunnable());<span class="comment">//将线程放进池子里并执行</span></span><br><span class="line">pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">pool.shutdown();<span class="comment">//关闭线程池</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="多线程程序实现的方式（了解）"><a href="#多线程程序实现的方式（了解）" class="headerlink" title="多线程程序实现的方式（了解）"></a>多线程程序实现的方式（了解）</h3><ul><li>提交的是Callable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExecutionException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//创建线程池</span></span><br><span class="line">Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));<span class="comment">//将线程放进池子里并执行</span></span><br><span class="line">Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(f1.get());</span><br><span class="line">System.out.println(f2.get());</span><br><span class="line"></span><br><span class="line">pool.shutdown();<span class="comment">//关闭线程池</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>多线程程序实现的方式3的好处和弊端</p><ul><li><p>好处：</p><ul><li>可以有返回值</li><li>可以抛出异常</li></ul></li><li><p>弊端：</p><ul><li>代码比较复杂，所以一般不用</li></ul></li></ul></li></ul><h3 id="设计模式-简单工厂模式概述和使用"><a href="#设计模式-简单工厂模式概述和使用" class="headerlink" title="设计模式(简单工厂模式概述和使用)"></a>设计模式(简单工厂模式概述和使用)</h3><ul><li><p>A:简单工厂模式概述</p><ul><li>又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例</li></ul></li><li><p>B:优点</p><ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责</li></ul></li><li><p>C:缺点</p><ul><li>这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护</li></ul></li><li><p>D:案例演示</p><ul><li><p>动物抽象类：public abstract Animal { public abstract void eat(); }</p></li><li><p>具体狗类：public class Dog extends Animal {}</p></li><li><p>具体猫类：public class Cat extends Animal {}</p></li><li><p>开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[Animal.java]</span><br><span class="line">[Dog.java]</span><br><span class="line">[Cat.java]</span><br><span class="line"></span><br><span class="line">[AnimalFactory.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.简单工厂;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public static Dog createDog() &#123;</span></span><br><span class="line"><span class="comment">return new Dog();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static Cat createCat() &#123;</span></span><br><span class="line"><span class="comment">return new Cat();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发现方法会定义很多,复用性太差</span></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">createAnimal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"dog"</span>.equals(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"cat"</span>.equals(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.heima.简单工厂;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public static Dog createDog() &#123;</span></span><br><span class="line"><span class="comment">return new Dog();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static Cat createCat() &#123;</span></span><br><span class="line"><span class="comment">return new Cat();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发现方法会定义很多,复用性太差</span></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">createAnimal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"dog"</span>.equals(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"cat"</span>.equals(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[Test.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.简单工厂;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Dog d = AnimalFactory.createDog();</span></span><br><span class="line"></span><br><span class="line">Dog d = (Dog) AnimalFactory.createAnimal(<span class="string">"dog"</span>);</span><br><span class="line">d.eat();</span><br><span class="line"></span><br><span class="line">Cat c = (Cat) AnimalFactory.createAnimal(<span class="string">"cat"</span>);</span><br><span class="line">c.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="设计模式-工厂方法模式的概述和使用"><a href="#设计模式-工厂方法模式的概述和使用" class="headerlink" title="设计模式(工厂方法模式的概述和使用)"></a>设计模式(工厂方法模式的概述和使用)</h3><ul><li><p>A:工厂方法模式概述</p><ul><li>工厂方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现。</li></ul></li><li><p>B:优点</p><ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性</li></ul></li><li><p>C:缺点</p><ul><li>需要额外的编写代码，增加了工作量</li></ul></li><li><p>D:案例演示</p></li><li><p>动物抽象类：public abstract Animal { public abstract void eat(); }</p><pre><code>    工厂接口：public interface Factory {public abstract Animal createAnimal();}具体狗类：public class Dog extends Animal {}具体猫类：public class Cat extends Animal {}开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。发现每次修改代码太麻烦，用工厂方法改进，针对每一个具体的实现提供一个具体工厂。狗工厂：public class DogFactory implements Factory {    public Animal createAnimal() {…}        }猫工厂：public class CatFactory implements Factory {    public Animal createAnimal() {…}        }  </code></pre></li></ul><h3 id="GUI-如何创建一个窗口并显示-Java-GUI不用太花精力去学"><a href="#GUI-如何创建一个窗口并显示-Java-GUI不用太花精力去学" class="headerlink" title="GUI(如何创建一个窗口并显示) [Java GUI不用太花精力去学]"></a>GUI(如何创建一个窗口并显示) [Java GUI不用太花精力去学]</h3><ul><li>Graphical User Interface(图形用户接口)。</li><li><pre><code>Frame  f = new Frame(“my window”);f.setLayout(new FlowLayout());//设置布局管理器f.setSize(500,400);//设置窗体大小f.setLocation(300,200);//设置窗体出现在屏幕的位置f.setIconImage(Toolkit.getDefaultToolkit().createImage(&quot;qq.png&quot;));f.setVisible(true);</code></pre></li></ul><h3 id="GUI-布局管理器"><a href="#GUI-布局管理器" class="headerlink" title="GUI(布局管理器)"></a>GUI(布局管理器)</h3><ul><li>FlowLayout（流式布局管理器）<ul><li>从左到右的顺序排列。</li><li>Panel默认的布局管理器。</li></ul></li><li>BorderLayout（边界布局管理器）<ul><li>东，南，西，北，中</li><li>Frame默认的布局管理器。</li></ul></li><li>GridLayout（网格布局管理器）<ul><li>规则的矩阵</li></ul></li><li>CardLayout（卡片布局管理器）<ul><li>选项卡</li></ul></li><li>GridBagLayout（网格包布局管理器）<ul><li>非规则的矩阵<h3 id="GUI-窗体监听"><a href="#GUI-窗体监听" class="headerlink" title="GUI(窗体监听)"></a>GUI(窗体监听)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Frame f = <span class="keyword">new</span> Frame(<span class="string">"我的窗体"</span>);</span><br><span class="line"><span class="comment">//事件源是窗体,把监听器注册到事件源上</span></span><br><span class="line"><span class="comment">//事件对象传递给监听器</span></span><br><span class="line">f.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                     <span class="comment">//退出虚拟机,关闭窗口</span></span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="GUI-鼠标监听"><a href="#GUI-鼠标监听" class="headerlink" title="GUI(鼠标监听)"></a>GUI(鼠标监听)</h3><h3 id="GUI-键盘监听和键盘事件"><a href="#GUI-键盘监听和键盘事件" class="headerlink" title="GUI(键盘监听和键盘事件)"></a>GUI(键盘监听和键盘事件)</h3><h3 id="GUI-动作监听"><a href="#GUI-动作监听" class="headerlink" title="GUI(动作监听)"></a>GUI(动作监听)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.gui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Frame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Frame f = <span class="keyword">new</span> Frame(<span class="string">"我的第一个窗口"</span>);</span><br><span class="line">f.setSize(<span class="number">400</span>, <span class="number">600</span>);<span class="comment">//设置窗体大小</span></span><br><span class="line">f.setLocation(<span class="number">500</span>, <span class="number">50</span>);<span class="comment">//设置窗体位置</span></span><br><span class="line">f.setIconImage(Toolkit.getDefaultToolkit().createImage(<span class="string">"qq.png"</span>));</span><br><span class="line">Button b1 = <span class="keyword">new</span> Button(<span class="string">"按钮一"</span>);</span><br><span class="line">Button b2 = <span class="keyword">new</span> Button(<span class="string">"按钮二"</span>);</span><br><span class="line">f.add(b1);</span><br><span class="line">f.add(b2);</span><br><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());<span class="comment">//设置布局管理器</span></span><br><span class="line"><span class="comment">//f.addWindowListener(new MyWindowAdapter());</span></span><br><span class="line">f.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b1.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public void mouseClicked(MouseEvent e) &#123;//单击</span></span><br><span class="line"><span class="comment">System.exit(0);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">//释放</span></span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b1.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.exit(0);</span></span><br><span class="line"><span class="comment">//System.out.println(e.getKeyCode());</span></span><br><span class="line"><span class="comment">//if(e.getKeyCode() == 32) &#123;</span></span><br><span class="line"><span class="keyword">if</span>(e.getKeyCode() == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;<span class="comment">//添加动作监听,应用场景就是暂停视频和播放视频</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);<span class="comment">//设置窗体可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*class MyWindowListener implements WindowListener &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowOpened(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowClosing(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">System.exit(0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowClosed(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("Closed");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowIconified(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowDeiconified(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowActivated(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowDeactivated(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*class MyWindowAdapter extends WindowAdapter &#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void windowClosing(WindowEvent e) &#123;</span></span><br><span class="line"><span class="comment">System.exit(0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="设计模式-适配器设计模式-掌握"><a href="#设计模式-适配器设计模式-掌握" class="headerlink" title="设计模式(适配器设计模式)(掌握)"></a>设计模式(适配器设计模式)(掌握)</h3><ul><li><p>a.什么是适配器</p><ul><li>在使用监听器的时候, 需要定义一个类事件监听器接口.</li><li>通常接口中有多个方法, 而程序中不一定所有的都用到, 但又必须重写, 这很繁琐.</li><li>适配器简化了这些操作, 我们定义监听器时只要继承适配器, 然后重写需要的方法即可.</li></ul></li><li><p>b.适配器原理</p><ul><li><p>适配器就是一个类, 实现了监听器接口, 所有抽象方法都重写了, 但是方法全是空的.</p></li><li><p>适配器类需要定义成抽象的,因为创建该类对象,调用空方法是没有意义的</p></li><li><p>目的就是为了简化程序员的操作, 定义监听器时继承适配器, 只重写需要的方法就可以了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.适配器;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 适配器设计模式</span></span><br><span class="line"><span class="comment"> * 鲁智深</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 和尚 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 打坐();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 念经();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 撞钟();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 习武();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 天罡星 <span class="keyword">implements</span> 和尚 </span>&#123;<span class="comment">//声明成抽象的原因是,不想让其他类创建本类对象,因为创建也没有意义,方法都是空的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 打坐() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 念经() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 撞钟() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 习武() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 鲁智深 <span class="keyword">extends</span> 天罡星 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 习武() &#123;</span><br><span class="line">System.out.println(<span class="string">"倒拔垂杨柳"</span>);</span><br><span class="line">System.out.println(<span class="string">"拳打镇关西"</span>);</span><br><span class="line">System.out.println(<span class="string">"大闹野猪林"</span>);</span><br><span class="line">System.out.println(<span class="string">"......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="GUI-需要知道的"><a href="#GUI-需要知道的" class="headerlink" title="GUI(需要知道的)"></a>GUI(需要知道的)</h3><ul><li>事件处理<ul><li>事件: 用户的一个操作</li><li>事件源: 被操作的组件</li><li>监听器: 一个自定义类的对象, 实现了监听器接口, 包含事件处理方法,把监听器添加在事件源上, 当事件发生的时候虚拟机就会自动调用监听器中的事件处理方法</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例设计模式（掌握）&quot;&gt;&lt;a href=&quot;#单例设计模式（掌握）&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式（掌握）&quot;&gt;&lt;/a&gt;单例设计模式（掌握）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单例设计模式：保证类在内存中只有一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何保证类在内存中只有一个对象呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)控制类的创建，不让其他类来创建本类的对象。private&lt;/li&gt;
&lt;li&gt;(2)在本类中定义一个本类的对象。Singleton s;&lt;/li&gt;
&lt;li&gt;(3)提供公共的访问方式。  public static Singleton getInstance(){return s}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：多线程(上)</title>
    <link href="//georgeju95.github.io/2020/03/05/Java-Learing-day-11-Multiple-Thread/"/>
    <id>//georgeju95.github.io/2020/03/05/Java-Learing-day-11-Multiple-Thread/</id>
    <published>2020-03-05T07:20:36.000Z</published>
    <updated>2023-08-29T18:58:12.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程的引入"><a href="#多线程的引入" class="headerlink" title="多线程的引入"></a>多线程的引入</h3><ul><li>1.什么是线程<ul><li>线程是程序执行的一条路径, 一个进程中可以包含多条线程</li><li>多线程并发执行可以提高程序的效率, 可以同时完成多项工作</li></ul></li></ul><a id="more"></a><ul><li>2.多线程的应用场景<ul><li>红蜘蛛同时共享屏幕给多个电脑</li><li>迅雷开启多条线程一起下载</li><li>QQ同时和多个人一起视频</li><li>服务器同时处理多个客户端请求</li></ul></li></ul><h3 id="多线程并行和并发的区别"><a href="#多线程并行和并发的区别" class="headerlink" title="多线程并行和并发的区别"></a>多线程并行和并发的区别</h3><ul><li>并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)</li><li>并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。</li><li>比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。</li><li>如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。</li></ul><h3 id="Java程序运行原理和JVM的启动是多线程的吗"><a href="#Java程序运行原理和JVM的启动是多线程的吗" class="headerlink" title="Java程序运行原理和JVM的启动是多线程的吗"></a>Java程序运行原理和JVM的启动是多线程的吗</h3><ul><li><p>A:Java程序运行原理</p><ul><li>Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。</li></ul></li><li><p>B:JVM的启动是多线程的吗</p><ul><li><p>JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 证明jvm是多线程的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Demo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"我是主线程的执行代码"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"垃圾被清扫了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多线程程序实现的方式1（掌握）"><a href="#多线程程序实现的方式1（掌握）" class="headerlink" title="多线程程序实现的方式1（掌握）"></a>多线程程序实现的方式1（掌握）</h3><ul><li><p>1.继承Thread </p><ul><li><p>定义类继承Thread</p></li><li><p>重写run方法</p></li><li><p>把新线程要做的事写在run方法中</p></li><li><p>创建线程对象</p></li><li><p>开启新线程, 内部会自动执行run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread();<span class="comment">//4,创建Thread类的子类对象</span></span><br><span class="line">mt.start();<span class="comment">//5,开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//1,继承Thread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;<span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多线程程序实现的方式2（掌握）"><a href="#多线程程序实现的方式2（掌握）" class="headerlink" title="多线程程序实现的方式2（掌握）"></a>多线程程序实现的方式2（掌握）</h3><ul><li><p>2.实现Runnable</p><ul><li><p>定义类实现Runnable接口</p></li><li><p>实现run方法</p></li><li><p>把新线程要做的事写在run方法中</p></li><li><p>创建自定义的Runnable的子类对象</p></li><li><p>创建Thread对象, 传入Runnable</p></li><li><p>调用start()开启新线程, 内部会自动调用Runnable的run()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();<span class="comment">//4,创建Runnable的子类对象</span></span><br><span class="line"><span class="comment">//Runnable target = mr;mr = 0x0011</span></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(mr);<span class="comment">//5,将其当作参数传递给Thread的构造函数</span></span><br><span class="line">t.start();<span class="comment">//6,开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;<span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="实现Runnable的原理"><a href="#实现Runnable的原理" class="headerlink" title="实现Runnable的原理"></a>实现Runnable的原理</h3><ul><li>查看源码<ul><li>1,看Thread类的构造函数,传递了Runnable接口的引用 </li><li>2,通过init()方法找到传递的target给成员变量的target赋值</li><li>3,查看run方法,发现run方法中有判断,如果target不为null就会调用Runnable接口子类对象的run方法</li></ul></li></ul><h3 id="两种方式的区别（掌握）"><a href="#两种方式的区别（掌握）" class="headerlink" title="两种方式的区别（掌握）"></a>两种方式的区别（掌握）</h3><ul><li><p>查看源码的区别:</p><ul><li>a.继承Thread : 由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法</li><li>b.实现Runnable : 构造函数中传入了Runnable的引用, 成员变量记住了它, start()调用run()方法时内部判断成员变量Runnable的引用是否为空, 不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法</li></ul></li><li><p>继承Thread</p><ul><li>好处是:可以直接使用Thread类中的方法,代码简单</li><li>弊端是:如果已经有了父类,就不能用这种方法</li></ul></li><li><p>实现Runnable接口</p><ul><li>好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的</li><li>弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂<h3 id="匿名内部类实现线程的两种方式（掌握）"><a href="#匿名内部类实现线程的两种方式（掌握）" class="headerlink" title="匿名内部类实现线程的两种方式（掌握）"></a>匿名内部类实现线程的两种方式（掌握）</h3></li></ul></li><li><p>继承Thread类</p></li><li><p>实现Runnable接口</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;<span class="comment">//1,继承Thread类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;<span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();<span class="comment">//4,开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;<span class="comment">//1,将Runnable的子类对象传递给Thread的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;<span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();<span class="comment">//4,开启线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="获取名字和设置名字（掌握）"><a href="#获取名字和设置名字（掌握）" class="headerlink" title="获取名字和设置名字（掌握）"></a>获取名字和设置名字（掌握）</h3><ul><li><p>1.获取名字</p><ul><li>通过getName()方法获取线程对象的名字</li></ul></li><li><p>2.设置名字</p><ul><li><p>通过构造函数可以传入String类型的名字</p></li><li><p>通过setName(String)方法可以设置线程对象的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Name</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//this.setName("张三");</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....aaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//this.setName("李四");</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">t1.setName(<span class="string">"张三"</span>);</span><br><span class="line">t2.setName(<span class="string">"李四"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="string">"芙蓉姐姐"</span>) &#123;<span class="comment">//通过构造方法给name赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....aaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="string">"凤姐"</span>) &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取当前线程的对象（掌握）"><a href="#获取当前线程的对象（掌握）" class="headerlink" title="获取当前线程的对象（掌握）"></a>获取当前线程的对象（掌握）</h3><ul><li>Thread.currentThread(), 主线程也可以获取<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_CurrentThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"....aaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Thread.currentThread()获取当前正在执行的线程</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">Thread.currentThread().setName(<span class="string">"我是主线程"</span>);      <span class="comment">// 设置主线程名称</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="休眠线程（掌握）"><a href="#休眠线程（掌握）" class="headerlink" title="休眠线程（掌握）"></a>休眠线程（掌握）</h3><ul><li>Thread.sleep(毫秒,纳秒), 控制当前线程休眠若干毫秒1秒= 1000毫秒 1秒 = 1000 * 1000 * 1000纳秒 1000000000</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Sleep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"倒计时第"</span> +i + <span class="string">"秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="守护线程（掌握）"><a href="#守护线程（掌握）" class="headerlink" title="守护线程（掌握）"></a>守护线程（掌握）</h3><ul><li>setDaemon(), 设置一个线程为守护线程, 该线程不会单独执行, 当其他非守护线程都执行结束后, 自动退出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Daemon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 守护线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">t2.setDaemon(<span class="keyword">true</span>);<span class="comment">//设置为守护线程</span></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入线程（掌握）"><a href="#加入线程（掌握）" class="headerlink" title="加入线程（掌握）"></a>加入线程（掌握）</h3><ul><li>join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续</li><li>join(int), 可以等待指定的毫秒之后继续<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Join</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Thread t1 = <span class="keyword">new</span> Thread() &#123;   <span class="comment">//下面的匿名内部类要使用所在方法的局部变量t1，所以需要final修饰</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//t1.join();</span></span><br><span class="line">t1.join(<span class="number">1</span>);<span class="comment">//插队指定的时间,过了指定时间后,两条线程交替执行</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="礼让线程（了解）"><a href="#礼让线程（了解）" class="headerlink" title="礼让线程（了解）"></a>礼让线程（了解）</h3><ul><li>yield让出cpu</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Yield</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yield让出cpu礼让线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> MyThread().start();</span><br><span class="line"><span class="keyword">new</span> MyThread().start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">Thread.yield();<span class="comment">//让出CPU</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"..."</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置线程的优先级（了解）"><a href="#设置线程的优先级（了解）" class="headerlink" title="设置线程的优先级（了解）"></a>设置线程的优先级（了解）</h3><ul><li>setPriority()设置线程的优先级</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7_Priority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaa"</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.setPriority(10);设置最大优先级</span></span><br><span class="line"><span class="comment">//t2.setPriority(1);</span></span><br><span class="line"></span><br><span class="line">t1.setPriority(Thread.MIN_PRIORITY);<span class="comment">//设置最小的线程优先级</span></span><br><span class="line">t2.setPriority(Thread.MAX_PRIORITY);<span class="comment">//设置最大的线程优先级</span></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步代码块（掌握）"><a href="#同步代码块（掌握）" class="headerlink" title="同步代码块（掌握）"></a>同步代码块（掌握）</h3><ul><li><p>1.什么情况下需要同步</p><ul><li>当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.</li><li>如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.</li></ul></li><li><p>2.同步代码块</p><ul><li><p>使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块</p></li><li><p>多个同步代码块如果使用相同的锁对象, 那么他们就是同步的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Synchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Printer p = <span class="keyword">new</span> Printer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">p.print1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">p.print2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();                        <span class="comment">//同步代码块,锁机制,锁对象可以是任意的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//synchronized(new Demo()) &#123;</span></span><br><span class="line"><span class="keyword">synchronized</span>(d) &#123;</span><br><span class="line">System.out.print(<span class="string">"黑"</span>);</span><br><span class="line">System.out.print(<span class="string">"马"</span>);</span><br><span class="line">System.out.print(<span class="string">"程"</span>);</span><br><span class="line">System.out.print(<span class="string">"序"</span>);</span><br><span class="line">System.out.print(<span class="string">"员"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//synchronized(new Demo()) &#123;//锁对象不能用匿名对象,因为匿名对象不是同一个对象</span></span><br><span class="line"><span class="keyword">synchronized</span>(d) &#123;</span><br><span class="line">System.out.print(<span class="string">"传"</span>);</span><br><span class="line">System.out.print(<span class="string">"智"</span>);</span><br><span class="line">System.out.print(<span class="string">"播"</span>);</span><br><span class="line">System.out.print(<span class="string">"客"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="同步方法（掌握）"><a href="#同步方法（掌握）" class="headerlink" title="同步方法（掌握）"></a>同步方法（掌握）</h3><ul><li>使用synchronized关键字修饰一个方法, 该方法中所有的代码都是同步的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Synchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Printer2 p = <span class="keyword">new</span> Printer2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">p.print1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">p.print2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer2</span> </span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="comment">//非静态的同步方法的锁对象是神马?</span></span><br><span class="line"><span class="comment">//答:非静态的同步方法的锁对象是this</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//静态的同步方法的锁对象是什么?</span></span><br><span class="line"><span class="comment">//是该类的字节码对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;<span class="comment">//同步方法只需要在方法上加synchronized关键字即可</span></span><br><span class="line">System.out.print(<span class="string">"黑"</span>);</span><br><span class="line">System.out.print(<span class="string">"马"</span>);</span><br><span class="line">System.out.print(<span class="string">"程"</span>);</span><br><span class="line">System.out.print(<span class="string">"序"</span>);</span><br><span class="line">System.out.print(<span class="string">"员"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Printer2.class) &#123;</span><br><span class="line">System.out.print(<span class="string">"传"</span>);</span><br><span class="line">System.out.print(<span class="string">"智"</span>);</span><br><span class="line">System.out.print(<span class="string">"播"</span>);</span><br><span class="line">System.out.print(<span class="string">"客"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全问题（掌握）"><a href="#线程安全问题（掌握）" class="headerlink" title="线程安全问题（掌握）"></a>线程安全问题（掌握）</h3><ul><li>多线程并发操作同一数据时, 就有可能出现线程安全问题</li><li>使用同步技术可以解决这种问题, 把操作数据的代码进行同步, 不要多个线程一起操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:铁路售票,一共100张,通过四个窗口卖完.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Ticket().start();</span><br><span class="line"><span class="keyword">new</span> Ticket().start();</span><br><span class="line"><span class="keyword">new</span> Ticket().start();</span><br><span class="line"><span class="keyword">new</span> Ticket().start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//private static Object obj = new Object();//如果用引用数据类型成员变量当作锁对象,必须是静态的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Ticket.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//线程1睡,线程2睡,线程3睡,线程4睡</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...这是第"</span> + ticket-- + <span class="string">"号票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="火车站卖票的例子用实现Runnable接口（掌握）"><a href="#火车站卖票的例子用实现Runnable接口（掌握）" class="headerlink" title="火车站卖票的例子用实现Runnable接口（掌握）"></a>火车站卖票的例子用实现Runnable接口（掌握）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 火车站卖票的例子用实现Runnable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyTicket mt = <span class="keyword">new</span> MyTicket();</span><br><span class="line"><span class="keyword">new</span> Thread(mt).start();</span><br><span class="line"><span class="keyword">new</span> Thread(mt).start();</span><br><span class="line"><span class="keyword">new</span> Thread(mt).start();</span><br><span class="line"><span class="keyword">new</span> Thread(mt).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Thread t1 = new Thread(mt);//多次启动一个线程是非法的</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(tickets &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//线程1睡,线程2睡,线程3睡,线程4睡</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...这是第"</span> + tickets-- + <span class="string">"号票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁</p><ul><li><p>尽量不要嵌套使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String s1 = <span class="string">"筷子左"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String s2 = <span class="string">"筷子右"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...获取"</span> + s1 + <span class="string">"等待"</span> + s2);</span><br><span class="line"><span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s2 + <span class="string">"开吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...获取"</span> + s2 + <span class="string">"等待"</span> + s1);</span><br><span class="line"><span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s1 + <span class="string">"开吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="以前的线程安全的类回顾（掌握）"><a href="#以前的线程安全的类回顾（掌握）" class="headerlink" title="以前的线程安全的类回顾（掌握）"></a>以前的线程安全的类回顾（掌握）</h3><ul><li>A:回顾以前说过的线程安全问题<ul><li>看源码：Vector,StringBuffer,Hashtable,Collections.synchroinzedXxx(xxx)</li><li>Vector是线程安全的,ArrayList是线程不安全的</li><li>StringBuffer是线程安全的,StringBuilder是线程不安全的</li><li>Hashtable是线程安全的,HashMap是线程不安全的</li><li>Collections.synchroinzedXxx(xxx)将不同步的xxx转成同步</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程的引入&quot;&gt;&lt;a href=&quot;#多线程的引入&quot; class=&quot;headerlink&quot; title=&quot;多线程的引入&quot;&gt;&lt;/a&gt;多线程的引入&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.什么是线程&lt;ul&gt;
&lt;li&gt;线程是程序执行的一条路径, 一个进程中可以包含多条线程&lt;/li&gt;
&lt;li&gt;多线程并发执行可以提高程序的效率, 可以同时完成多项工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：其他流 &amp; 属性集</title>
    <link href="//georgeju95.github.io/2020/03/03/Java-Learing-day-10-OtherStream-and-Properties/"/>
    <id>//georgeju95.github.io/2020/03/03/Java-Learing-day-10-OtherStream-and-Properties/</id>
    <published>2020-03-03T12:20:36.000Z</published>
    <updated>2023-08-29T18:58:12.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序列流（了解）"><a href="#序列流（了解）" class="headerlink" title="序列流（了解）"></a>序列流（了解）</h3><ul><li>1.什么是序列流<ul><li>序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.</li></ul></li></ul><a id="more"></a><ul><li><p>2.使用方式</p><ul><li><p>整合两个: SequenceInputStream(InputStream, InputStream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.SequenceInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_SequenceInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 整合两个输入流</span></span><br><span class="line"><span class="comment"> * SequenceInputStream(InputStream s1, InputStream s2)</span></span><br><span class="line"><span class="comment"> * 整合多个输入流</span></span><br><span class="line"><span class="comment"> * SequenceInputStream(Enumeration&lt;? extends InputStream&gt; e)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">FileInputStream fis3 = <span class="keyword">new</span> FileInputStream(<span class="string">"c.txt"</span>);</span><br><span class="line"></span><br><span class="line">Vector&lt;FileInputStream&gt; v = <span class="keyword">new</span> Vector&lt;&gt;();<span class="comment">//创建集合对象</span></span><br><span class="line">v.add(fis1);<span class="comment">//将流对象存储进来</span></span><br><span class="line">v.add(fis2);</span><br><span class="line">v.add(fis3);</span><br><span class="line"></span><br><span class="line">Enumeration&lt;FileInputStream&gt; en = v.elements();</span><br><span class="line">SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(en);<span class="comment">//将枚举中的输入流整合成一个</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = sis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sis.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(fis1, fis2);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = sis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sis.close();<span class="comment">//sis在关闭的时候,会将构造方法中传入的流对象也都关闭</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);<span class="comment">//创建字节输入流关联a.txt</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>);<span class="comment">//创建字节输出流关联c.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b1;</span><br><span class="line"><span class="keyword">while</span>((b1 = fis1.read()) != -<span class="number">1</span>) &#123;<span class="comment">//不断的在a.txt上读取字节</span></span><br><span class="line">fos.write(b1);<span class="comment">//将读到的字节写到c.txt上</span></span><br><span class="line">&#125;</span><br><span class="line">fis1.close();<span class="comment">//关闭字节输入流</span></span><br><span class="line"></span><br><span class="line">FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> b2;</span><br><span class="line"><span class="keyword">while</span>((b2 = fis2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(b2); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis2.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="内存输出流（掌握）"><a href="#内存输出流（掌握）" class="headerlink" title="内存输出流（掌握）"></a>内存输出流（掌握）</h3><ul><li><p>1.什么是内存输出流</p><ul><li>该输出流可以向内存中写数据, 把内存当作一个缓冲区, 写出之后可以一次性获取出所有数据</li></ul></li><li><p>2.使用方式</p><ul><li><p>创建对象: new ByteArrayOutputStream()</p></li><li><p>写出数据: write(int), write(byte[])</p></li><li><p>获取数据: toByteArray()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_ByteArrayOutputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * ByteArrayOutputStream</span></span><br><span class="line"><span class="comment"> * 内存输出流</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * FileInputStream读取中文的时候出现了乱码</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 解决方案</span></span><br><span class="line"><span class="comment"> * 1,字符流读取</span></span><br><span class="line"><span class="comment"> * 2,ByteArrayOutputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"e.txt"</span>);</span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//在内存中创建了可以增长的内存数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">baos.write(b);<span class="comment">//将读取到的数据逐个写到内存中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//byte[] arr = baos.toByteArray();//将缓冲区的数据全部获取出来,并赋值给arr数组</span></span><br><span class="line"><span class="comment">//System.out.println(new String(arr));              </span></span><br><span class="line"></span><br><span class="line">System.out.println(baos.toString());<span class="comment">//将缓冲区的内容转换为了字符串,在输出语句中可以省略调用toString方法</span></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"e.txt"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="内存输出流之面试题（掌握）"><a href="#内存输出流之面试题（掌握）" class="headerlink" title="内存输出流之面试题（掌握）"></a>内存输出流之面试题（掌握）</h3><ul><li><p>定义一个文件输入流,调用read(byte[] b)方法,将a.txt文件中的内容打印出来(byte数组大小限制为5)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 定义一个文件输入流,调用read(byte[] b)方法,将a.txt文件中的内容打印出来(byte数组大小限制为5)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,reda(byte[] b)是字节输入流的方法,创建FileInputStream,关联a.txt</span></span><br><span class="line"><span class="comment"> * 2,创建内存输出流,将读到的数据写到内存输出流中</span></span><br><span class="line"><span class="comment"> * 3,创建字节数组,长度为5</span></span><br><span class="line"><span class="comment"> * 4,将内存输出流的数据全部转换为字符串打印</span></span><br><span class="line"><span class="comment"> * 5,关闭输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,reda(byte[] b)是字节输入流的方法,创建FileInputStream,关联a.txt</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line"><span class="comment">//2,创建内存输出流,将读到的数据写到内存输出流中</span></span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="comment">//3,创建字节数组,长度为5</span></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">baos.write(arr, <span class="number">0</span>, len);</span><br><span class="line"><span class="comment">//System.out.println(new String(arr,0,len));    乱码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4,将内存输出流的数据全部转换为字符串打印</span></span><br><span class="line">System.out.println(baos); <span class="comment">//即使没有调用,底层也会默认帮我们调用toString()方法</span></span><br><span class="line"><span class="comment">//5,关闭输入流</span></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="随机访问流概述和读写数据（了解）"><a href="#随机访问流概述和读写数据（了解）" class="headerlink" title="随机访问流概述和读写数据（了解）"></a>随机访问流概述和读写数据（了解）</h3><ul><li><p>A:随机访问流概述</p><ul><li>RandomAccessFile概述</li><li>RandomAccessFile类不属于流，是Object类的子类。但它融合了InputStream和OutputStream的功能。</li><li>支持对随机访问文件的读取和写入。</li></ul></li><li><p>B:read(),write(),seek()</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08_RandomAccessFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"g.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line"><span class="comment">//raf.write(97);</span></span><br><span class="line"><span class="comment">//int x = raf.read();</span></span><br><span class="line"><span class="comment">//System.out.println(x);</span></span><br><span class="line">raf.seek(<span class="number">0</span>);<span class="comment">//在指定位置设置指针</span></span><br><span class="line">raf.write(<span class="number">98</span>);</span><br><span class="line">raf.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象操作流-ObjecOutputStream（了解）"><a href="#对象操作流-ObjecOutputStream（了解）" class="headerlink" title="对象操作流 ObjecOutputStream（了解）"></a>对象操作流 ObjecOutputStream（了解）</h3><ul><li><p>1.什么是对象操作流</p><ul><li>该流可以将一个对象写出, 或者读取一个对象到程序中. 也就是执行了序列化和反序列化的操作.</li></ul></li><li><p>2.使用方式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[Person.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2L</span>;  <span class="comment">//版本号，加了更好控制版本和识别报错。可不加 </span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Demo03_ObjectOutputStream.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_ObjectOutputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 序列化:将对象写到文件上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">24</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">25</span>);</span><br><span class="line">Person p4 = <span class="keyword">new</span> Person(<span class="string">"赵六"</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(p1);</span><br><span class="line">list.add(p2);</span><br><span class="line">list.add(p3);</span><br><span class="line">list.add(p4);</span><br><span class="line"></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"e.txt"</span>));</span><br><span class="line">oos.writeObject(list);<span class="comment">//把整个集合对象一次写出</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"e.txt"</span>));</span><br><span class="line">oos.writeObject(p1);</span><br><span class="line">oos.writeObject(p2);</span><br><span class="line"></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象操作流-ObjectInputStream"><a href="#对象操作流-ObjectInputStream" class="headerlink" title="对象操作流 ObjectInputStream"></a>对象操作流 ObjectInputStream</h3><ul><li>读取: new ObjectInputStream(InputStream), readObject()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_ObjectInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException </span></span><br><span class="line"><span class="comment"> * ObjectInputStream</span></span><br><span class="line"><span class="comment"> * 对象输入流,反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"e.txt"</span>));</span><br><span class="line">ArrayList&lt;Person&gt; list = (ArrayList&lt;Person&gt;) ois.readObject();<span class="comment">//将集合对象一次读取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ois.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException,</span></span><br><span class="line"><span class="function">ClassNotFoundException </span>&#123;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"e.txt"</span>));</span><br><span class="line"></span><br><span class="line">Person p1 = (Person) ois.readObject();</span><br><span class="line">Person p2 = (Person) ois.readObject();</span><br><span class="line"><span class="comment">//Person p3 = (Person) ois.readObject();//当文件读取到了末尾时出现EOFException</span></span><br><span class="line"></span><br><span class="line">System.out.println(p1);</span><br><span class="line">System.out.println(p2);</span><br><span class="line"></span><br><span class="line">ois.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据输入输出流（了解）"><a href="#数据输入输出流（了解）" class="headerlink" title="数据输入输出流（了解）"></a>数据输入输出流（了解）</h3><ul><li><p>1.什么是数据输入输出流</p><ul><li>DataInputStream, DataOutputStream可以按照基本数据类型大小读写数据</li><li>例如按Long大小写出一个数字, 写出时该数据占8字节. 读取的时候也可以按照Long类型读取, 一次读取8个字节.</li></ul></li><li><p>2.使用方式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09_Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000011 11100101int类型997</span></span><br><span class="line"><span class="comment"> * 11100101</span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000000 11100101</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line"><span class="comment">//demo3();</span></span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"h.txt"</span>));</span><br><span class="line"><span class="keyword">int</span> x = dis.readInt();</span><br><span class="line"><span class="keyword">int</span> y = dis.readInt();</span><br><span class="line"><span class="keyword">int</span> z = dis.readInt();</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">dis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"h.txt"</span>));</span><br><span class="line">dos.writeInt(<span class="number">997</span>);</span><br><span class="line">dos.writeInt(<span class="number">998</span>);</span><br><span class="line">dos.writeInt(<span class="number">999</span>);</span><br><span class="line">dos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"h.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> x = fis.read();</span><br><span class="line"><span class="keyword">int</span> y = fis.read();</span><br><span class="line"><span class="keyword">int</span> z = fis.read();</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"h.txt"</span>);</span><br><span class="line">fos.write(<span class="number">997</span>);</span><br><span class="line">fos.write(<span class="number">998</span>);</span><br><span class="line">fos.write(<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="打印流的概述和特点（掌握）"><a href="#打印流的概述和特点（掌握）" class="headerlink" title="打印流的概述和特点（掌握）"></a>打印流的概述和特点（掌握）</h3><ul><li><p>1.什么是打印流</p><ul><li>该流可以很方便的将对象的toString()结果输出, 并且自动加上换行, 而且可以使用自动刷出的模式</li></ul></li><li><p>System.out就是一个<strong>PrintStream</strong>, 其默认向控制台输出信息</p></li><li><p>2.使用方式</p><ul><li>打印: print(), println()</li><li><strong>自动刷出</strong>: <strong>PrintWriter</strong>(OutputStream out, boolean autoFlush, String encoding) </li></ul></li><li><p>打印流只操作数据目的</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05_PrintStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * PrintStream和PrintWriter分别是打印的字节流和字符流</span></span><br><span class="line"><span class="comment"> * 只操作数据目的的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"f.txt"</span>),<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//pw.println(97);//自动刷出功能只针对的是println方法</span></span><br><span class="line"><span class="comment">//pw.write(97);</span></span><br><span class="line">pw.print(<span class="number">97</span>);</span><br><span class="line">pw.println(<span class="number">97</span>);               <span class="comment">//由于println()自动刷出功能，上面的print也会写入</span></span><br><span class="line">pw.close();                   <span class="comment">//由于关闭流会刷新缓冲，自动刷出没啥用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">PrintStream ps = System.out;<span class="comment">//获取标注输出流</span></span><br><span class="line">ps.println(<span class="number">97</span>);<span class="comment">//底层通过Integer.toString()将97转换成字符串并打印</span></span><br><span class="line">ps.write(<span class="number">97</span>);<span class="comment">//查找码表,找到对应的a并打印</span></span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">ps.println(p1);<span class="comment">//默认调用p1的toString方法</span></span><br><span class="line"></span><br><span class="line">Person p2 = <span class="keyword">null</span>;<span class="comment">//打印引用数据类型,如果是null,就打印null,如果不是null就打印对象的toString方法</span></span><br><span class="line">ps.println(p2);</span><br><span class="line">ps.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="标准输入输出流概述和输出语句"><a href="#标准输入输出流概述和输出语句" class="headerlink" title="标准输入输出流概述和输出语句"></a>标准输入输出流概述和输出语句</h3><ul><li><p>1.什么是标准输入输出流(掌握)</p><ul><li>System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据</li><li>System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据</li></ul></li><li><p>2.修改标准输入输出流(了解)</p><ul><li><p>修改输入流: System.setIn(InputStream)</p></li><li><p>修改输出流: System.setOut(PrintStream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06_SystemInOut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">System.setIn(<span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>));<span class="comment">//改变标准输入流</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"b.txt"</span>));<span class="comment">//改变标注输出流</span></span><br><span class="line"></span><br><span class="line">InputStream is = System.in;<span class="comment">//获取标准的键盘输入流,默认指向键盘,改变后指向文件</span></span><br><span class="line">PrintStream ps = System.out;<span class="comment">//获取标准输出流,默认指向的是控制台,改变后就指向文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">ps.write(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println();//也是一个输出流,不用关,因为没有和硬盘上的文件产生关联的管道</span></span><br><span class="line">is.close();</span><br><span class="line">ps.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream is = System.in;</span><br><span class="line"><span class="keyword">int</span> x = is.read();</span><br><span class="line">System.out.println(x);</span><br><span class="line"></span><br><span class="line">is.close();</span><br><span class="line"></span><br><span class="line">InputStream is2 = System.in;</span><br><span class="line"><span class="keyword">int</span> y = is2.read();</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="修改标准输入输出流拷贝图片（了解）"><a href="#修改标准输入输出流拷贝图片（了解）" class="headerlink" title="修改标准输入输出流拷贝图片（了解）"></a>修改标准输入输出流拷贝图片（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.setIn(<span class="keyword">new</span> FileInputStream(<span class="string">"双元.jpg"</span>));<span class="comment">//改变标准输入流</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"copy.jpg"</span>)); <span class="comment">//改变标准输出流</span></span><br><span class="line"></span><br><span class="line">InputStream is = System.in;</span><br><span class="line">PrintStream ps = System.out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((len = is.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">ps.write(arr, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is.close();</span><br><span class="line">ps.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种方式实现键盘录入（了解）"><a href="#两种方式实现键盘录入（了解）" class="headerlink" title="两种方式实现键盘录入（了解）"></a>两种方式实现键盘录入（了解）</h3><ul><li>A:BufferedReader的readLine方法。<ul><li>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</li></ul></li><li>B:Scanner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07_SystemIn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*BufferedReader br = new BufferedReader(new InputStreamReader(System.in));//InputStreamReader转换流</span></span><br><span class="line"><span class="comment">String line = br.readLine();</span></span><br><span class="line"><span class="comment">System.out.println(line);</span></span><br><span class="line"><span class="comment">br.close();*/</span></span><br><span class="line"></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String line = sc.nextLine();</span><br><span class="line">System.out.println(line);</span><br><span class="line">sc.close();  <span class="comment">//可以不关，因为System.in没有和硬盘文件产生关联</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Properties的概述和作为Map集合的使用（了解）"><a href="#Properties的概述和作为Map集合的使用（了解）" class="headerlink" title="Properties的概述和作为Map集合的使用（了解）"></a>Properties的概述和作为Map集合的使用（了解）</h3><ul><li>A:Properties的概述<ul><li>Properties 类表示了一个持久的属性集。</li><li>Properties 可保存在流中或从流中加载。</li><li>属性列表中每个键及其对应值都是一个字符串。 </li></ul></li><li>B:案例演示<ul><li>Properties作为Map集合的使用</li></ul></li></ul><h3 id="Properties的特殊功能使用（了解）"><a href="#Properties的特殊功能使用（了解）" class="headerlink" title="Properties的特殊功能使用（了解）"></a>Properties的特殊功能使用（了解）</h3><ul><li><p>A:Properties的特殊功能</p><ul><li>public Object setProperty(String key,String value)</li><li>public String getProperty(String key)</li><li>public Enumeration<string> stringPropertyNames()</string></li></ul></li><li><p>B:案例演示</p><ul><li><p>Properties的特殊功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10_Properties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * Properties是Hashtable的子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(<span class="keyword">new</span> FileInputStream(<span class="string">"config.properties"</span>));<span class="comment">//将文件上的键值对读取到集合中</span></span><br><span class="line">prop.setProperty(<span class="string">"tel"</span>, <span class="string">"18912345678"</span>);</span><br><span class="line">prop.store(<span class="keyword">new</span> FileOutputStream(<span class="string">"config.properties"</span>), <span class="keyword">null</span>);<span class="comment">//第二个参数是对列表参数的描述,可以给值,也可以给null</span></span><br><span class="line">System.out.println(prop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">prop.setProperty(<span class="string">"tel"</span>, <span class="string">"18912345678"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(prop);</span></span><br><span class="line">Enumeration&lt;String&gt; en = (Enumeration&lt;String&gt;) prop.propertyNames();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements()) &#123;</span><br><span class="line">String key = en.nextElement();<span class="comment">//获取Properties中的每一个键</span></span><br><span class="line">String value = prop.getProperty(key);<span class="comment">//根据键获取值</span></span><br><span class="line">System.out.println(key + <span class="string">"="</span>+ value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.put(<span class="string">"abc"</span>, <span class="number">123</span>);</span><br><span class="line">System.out.println(prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Properties的load-和store-功能（了解）"><a href="#Properties的load-和store-功能（了解）" class="headerlink" title="Properties的load()和store()功能（了解）"></a>Properties的load()和store()功能（了解）</h3><ul><li><p>A:Properties的load()和store()功能</p></li><li><p>B:案例演示</p><ul><li><p>Properties的load()和store()功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.otherio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10_Properties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * Properties是Hashtable的子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(<span class="keyword">new</span> FileInputStream(<span class="string">"config.properties"</span>));<span class="comment">//将文件上的键值对读取到集合中</span></span><br><span class="line">prop.setProperty(<span class="string">"tel"</span>, <span class="string">"18912345678"</span>);</span><br><span class="line">prop.store(<span class="keyword">new</span> FileOutputStream(<span class="string">"config.properties"</span>), <span class="keyword">null</span>);<span class="comment">//第二个参数是对列表参数的描述,可以给值,也可以给null</span></span><br><span class="line">System.out.println(prop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">prop.setProperty(<span class="string">"tel"</span>, <span class="string">"18912345678"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(prop);</span></span><br><span class="line">Enumeration&lt;String&gt; en = (Enumeration&lt;String&gt;) prop.propertyNames();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements()) &#123;</span><br><span class="line">String key = en.nextElement();<span class="comment">//获取Properties中的每一个键</span></span><br><span class="line">String value = prop.getProperty(key);<span class="comment">//根据键获取值</span></span><br><span class="line">System.out.println(key + <span class="string">"="</span>+ value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.put(<span class="string">"abc"</span>, <span class="number">123</span>);</span><br><span class="line">System.out.println(prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序列流（了解）&quot;&gt;&lt;a href=&quot;#序列流（了解）&quot; class=&quot;headerlink&quot; title=&quot;序列流（了解）&quot;&gt;&lt;/a&gt;序列流（了解）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.什么是序列流&lt;ul&gt;
&lt;li&gt;序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：字节流 &amp; 递归</title>
    <link href="//georgeju95.github.io/2020/03/02/Java-Learing-day-9-ByteStream-and-Recursion/"/>
    <id>//georgeju95.github.io/2020/03/02/Java-Learing-day-9-ByteStream-and-Recursion/</id>
    <published>2020-03-02T09:15:36.000Z</published>
    <updated>2023-08-29T18:58:12.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符流FileReader"><a href="#字符流FileReader" class="headerlink" title="字符流FileReader"></a>字符流FileReader</h3><ul><li>1.字符流是什么<ul><li>字符流是可以直接读写字符的IO流</li><li>字符流读取字符, 就要先读取到字节数据, 然后转为字符. 如果要写出字符, 需要把字符转为字节再写出.    </li></ul></li></ul><a id="more"></a><ul><li><p>2.FileReader</p><ul><li><p>FileReader类的read()方法可以按照字符大小读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"xxx.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c = fr.read()) != -<span class="number">1</span>) &#123;<span class="comment">//通过项目默认的码表一次读取一个字符</span></span><br><span class="line">System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fr.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"xxx.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> x = fr.read();</span><br><span class="line">System.out.println(x);</span><br><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)x;</span><br><span class="line">System.out.println(c);</span><br><span class="line">fr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="字符流FileWriter"><a href="#字符流FileWriter" class="headerlink" title="字符流FileWriter"></a>字符流FileWriter</h3><ul><li><p>FileWriter类的write()方法可以自动把字符转为字节写出</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_FileWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"yyy.txt"</span>);</span><br><span class="line">fw.write(<span class="string">"大家好,基础班快接近尾声了,大家要努力,要坚持!!!"</span>);</span><br><span class="line">fw.write(<span class="number">97</span>);</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="字符流的拷贝"><a href="#字符流的拷贝" class="headerlink" title="字符流的拷贝"></a>字符流的拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line"><span class="comment">//demo3();  自定义字符数组的拷贝</span></span><br><span class="line">    </span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx.txt"</span>));</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"yyy.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = br.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"xxx.txt"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"yyy.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fr.read(arr)) != -<span class="number">1</span>) &#123;<span class="comment">//将文件上的数据读取到字符数组中</span></span><br><span class="line">fw.write(arr,<span class="number">0</span>,len);<span class="comment">//将字符数组中的数据写到文件上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//字符流不能拷贝纯文本的文件</span></span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"双元.jpg"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"copy.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"xxx.txt"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"zzz.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fr.close();</span><br><span class="line">fw.close();<span class="comment">//Writer类中有一个2k的小缓冲区,如果不关流,就会将内容写到缓冲区里,关流会将缓冲区内容刷新,再关闭</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么情况下使用字符流"><a href="#什么情况下使用字符流" class="headerlink" title="什么情况下使用字符流"></a>什么情况下使用字符流</h3><ul><li>字符流也可以拷贝文本文件, 但<strong>不推荐使用</strong>. 因为读取时会把字节转为字符, 写出时还要把字符转回字节.</li><li>程序需要<strong>读取一段文本</strong>, 或者需要<strong>写出一段文本</strong>的时候可以使用字符流</li><li><strong>读取的时候是按照字符的大小读取的,不会出现半个中文</strong></li><li><strong>写出的时候可以直接将字符串写出,不用转换为字节数组</strong></li></ul><h3 id="字符流是否可以拷贝非纯文本的文件"><a href="#字符流是否可以拷贝非纯文本的文件" class="headerlink" title="字符流是否可以拷贝非纯文本的文件"></a>字符流是否可以拷贝非纯文本的文件</h3><ul><li><strong>不可以拷贝非纯文本的文件</strong></li><li>因为在读的时候会将字节转换为字符,在转换过程中,可能找不到对应的字符,就会用?代替,写出的时候会将字符转换成字节写出去</li><li>如果是?,直接写出,这样写出之后的文件就乱了,看不了了     </li></ul><h3 id="readLine-和newLine-方法"><a href="#readLine-和newLine-方法" class="headerlink" title="readLine()和newLine()方法"></a>readLine()和newLine()方法</h3><ul><li><p>BufferedReader的readLine()方法可以读取一行字符(<strong>不包含换行符号</strong>)</p></li><li><p>BufferedWriter的newLine()可以<strong>输出一个跨平台的换行符号”\r\n”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Buffered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 带缓冲区的流中的特殊方法</span></span><br><span class="line"><span class="comment"> * readLine()</span></span><br><span class="line"><span class="comment"> * newLine();</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * newLine()与\r\n的区别</span></span><br><span class="line"><span class="comment"> * newLine()是跨平台的方法</span></span><br><span class="line"><span class="comment"> * \r\n只支持的是windows系统</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"zzz.txt"</span>));</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"aaa.txt"</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">bw.write(line);</span><br><span class="line"><span class="comment">//bw.newLine();//写出回车换行符</span></span><br><span class="line"><span class="comment">//bw.write("\r\n");         //不跨平台，仅限Windows</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"zzz.txt"</span>));</span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="将文本反转"><a href="#将文本反转" class="headerlink" title="将文本反转"></a>将文本反转</h3><ul><li><p>将一个文本文档上的文本反转,第一行和倒数第一行交换,第二行和倒数第二行交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 将一个文本文档上的文本反转,第一行和倒数第一行交换,第二行和倒数第二行交换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,创建输入输出流对象</span></span><br><span class="line"><span class="comment"> * 2,创建集合对象</span></span><br><span class="line"><span class="comment"> * 3,将读到的数据存储在集合中</span></span><br><span class="line"><span class="comment"> * 4,倒着遍历集合将数据写到文件上</span></span><br><span class="line"><span class="comment"> * 5,关流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意事项:</span></span><br><span class="line"><span class="comment"> * 流对象尽量晚开早关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//改写后是尽量晚开早关</span></span><br><span class="line"><span class="comment">// 1,创建输入输出流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"zzz.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2,创建集合对象</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//3,将读到的数据存储在集合中</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">list.add(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();<span class="comment">//关流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4,倒着遍历集合将数据写到文件上</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"revzzz.txt"</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">bw.write(list.get(i));</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5,关流</span></span><br><span class="line"></span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LineNumberReader"><a href="#LineNumberReader" class="headerlink" title="LineNumberReader"></a>LineNumberReader</h3><ul><li><p>LineNumberReader是BufferedReader的子类, 具有相同的功能, 并且可以统计行号</p><ul><li><p>调用getLineNumber()方法可以获取当前行号</p></li><li><p>调用setLineNumber()方法可以设置当前行号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.LineNumberReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_LineNumberReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">LineNumberReader lnr = <span class="keyword">new</span> LineNumberReader(<span class="keyword">new</span> FileReader(<span class="string">"zzz.txt"</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line">lnr.setLineNumber(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">while</span>((line = lnr.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(lnr.getLineNumber() + <span class="string">":"</span> + line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lnr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="装饰设计模式"><a href="#装饰设计模式" class="headerlink" title="装饰设计模式"></a>装饰设计模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 装饰设计模式的好处是:</span></span><br><span class="line"><span class="comment"> * 耦合性不强,被装饰的类的变化与装饰类的变化无关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HeiMaStudent hms = <span class="keyword">new</span> HeiMaStudent(<span class="keyword">new</span> Student());</span><br><span class="line">hms.code();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"javase"</span>);</span><br><span class="line">System.out.println(<span class="string">"javaweb"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeiMaStudent</span> <span class="keyword">implements</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,获取被装饰类的引用</span></span><br><span class="line"><span class="keyword">private</span> Student s;<span class="comment">//获取学生引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,在构造方法中传入被装饰类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeiMaStudent</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3,对原有的功能进行升级</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s.code();</span><br><span class="line">System.out.println(<span class="string">"ssh"</span>);</span><br><span class="line">System.out.println(<span class="string">"数据库"</span>);</span><br><span class="line">System.out.println(<span class="string">"大数据"</span>);</span><br><span class="line">System.out.println(<span class="string">"..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用指定的码表读写字符"><a href="#使用指定的码表读写字符" class="headerlink" title="使用指定的码表读写字符"></a>使用指定的码表读写字符</h3><ul><li><p>FileReader是使用默认码表读取文件, 如果需要使用指定码表读取, 那么可以使用InputStreamReader(字节流, 编码表)，它是字节流通向字符流的桥梁</p></li><li><p>FileWriter是使用默认码表写出文件, 如果需要使用指定码表写出, 那么可以使用OutputStreamWriter(字节流, 编码表)，它是字符流通向字节流的桥梁 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.chario;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7_TransIO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">BufferedReader br = <span class="comment">//更高效的读</span></span><br><span class="line"><span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"utf-8.txt"</span>), <span class="string">"utf-8"</span>));</span><br><span class="line">BufferedWriter bw = <span class="comment">//更高效的写</span></span><br><span class="line"><span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"gbk.txt"</span>), <span class="string">"gbk"</span>));</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = br.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException,</span></span><br><span class="line"><span class="function">FileNotFoundException, IOException </span>&#123;</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"utf-8.txt"</span>), <span class="string">"uTf-8"</span>);<span class="comment">//指定码表读字符</span></span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"gbk.txt"</span>), <span class="string">"gbk"</span>);<span class="comment">//指定码表写字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">osw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isr.close();</span><br><span class="line">osw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//用默认编码表读写,出现乱码</span></span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"utf-8.txt"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"gbk.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fw.write(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="转换流图解"><a href="#转换流图解" class="headerlink" title="转换流图解"></a>转换流图解</h3><p><img src="/assets/blogImg/%E8%BD%AC%E6%8D%A2%E6%B5%81.png" alt="转换流"></p><h3 id="获取文本上字符出现的次数"><a href="#获取文本上字符出现的次数" class="headerlink" title="获取文本上字符出现的次数"></a>获取文本上字符出现的次数</h3><ul><li><p>获取一个文本上每个字符出现的次数,将结果写在times.txt上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 获取一个文本上每个字符出现的次数,将结果写在times.txt上</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1,创建带缓冲区的输入流对象</span></span><br><span class="line"><span class="comment"> * 2,创建双列集合对象,目的是把字符当作键,把字符出现的次数当作值</span></span><br><span class="line"><span class="comment"> * 3,通过读取不断向集合中存储,存储的时候要判断,如果不包含这个键就将键和值为1存储,如果包含就将键和值加1存储</span></span><br><span class="line"><span class="comment"> * 4,关闭输入流</span></span><br><span class="line"><span class="comment"> * 5,创建输出流对象</span></span><br><span class="line"><span class="comment"> * 6,将结果写出</span></span><br><span class="line"><span class="comment"> * 7,关闭输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,创建带缓冲区的输入流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"zzz.txt"</span>));</span><br><span class="line"><span class="comment">//2,创建双列集合对象,目的是把字符当作键,把字符出现的次数当作值</span></span><br><span class="line">HashMap&lt;Character, Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//3,通过读取不断向集合中存储,存储的时候要判断,如果不包含这个键就将键和值为1存储,如果包含就将键和值加1存储</span></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = br.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>)c;</span><br><span class="line"><span class="comment">/*if(!hm.containsKey(ch)) &#123;</span></span><br><span class="line"><span class="comment">hm.put(ch, 1);</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">hm.put(ch, hm.get(ch) +  1);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">hm.put(ch, !hm.containsKey(ch)? <span class="number">1</span> : hm.get(ch) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4,关闭输入流</span></span><br><span class="line">br.close();</span><br><span class="line"><span class="comment">//5,创建输出流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"times.txt"</span>));</span><br><span class="line"><span class="comment">//6,将结果写出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Character key : hm.keySet()) &#123;</span><br><span class="line">bw.write(key + <span class="string">"="</span> + hm.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="试用版软件"><a href="#试用版软件" class="headerlink" title="试用版软件"></a>试用版软件</h3><ul><li><p>当我们下载一个试用版软件,没有购买正版的时候,每执行一次就会提醒我们还有多少次使用机会用学过的IO流知识,模拟试用版软件,试用10次机会,执行一次就提示一次您还有几次机会,如果次数到了提示请购买正版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  当我们下载一个试用版软件,没有购买正版的时候,每执行一次就会提醒我们还有多少次使用机会用学过的IO流知识,模拟试用版软件,</span></span><br><span class="line"><span class="comment"> *  试用10次机会,执行一次就提示一次您还有几次机会,如果次数到了提示请购买正版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,创建带缓冲的输入流对象,因为要使用readLine方法,可以保证数据的原样性</span></span><br><span class="line"><span class="comment"> * 2,将读到的字符串转换为int数</span></span><br><span class="line"><span class="comment"> * 3,对int数进行判断,如果大于0,就将其--写回去,如果不大于0,就提示请购买正版</span></span><br><span class="line"><span class="comment"> * 4,在if判断中要将--的结果打印,并将结果通过输出流写到文件上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,创建带缓冲的输入流对象,因为要使用readLine方法,可以保证数据的原样性</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"config.txt"</span>));</span><br><span class="line"><span class="comment">//2,将读到的字符串转换为int数</span></span><br><span class="line">String line = br.readLine();</span><br><span class="line"><span class="keyword">int</span> times = Integer.parseInt(line);<span class="comment">//将数字字符串转换为数字</span></span><br><span class="line"><span class="comment">//3,对int数进行判断,如果大于0,就将其--写回去,如果不大于0,就提示请购买正版</span></span><br><span class="line"><span class="keyword">if</span>(times &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//4,在if判断中要将--的结果打印,并将结果通过输出流写到文件上</span></span><br><span class="line">System.out.println(<span class="string">"您还有"</span> + times-- + <span class="string">"次机会"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"config.txt"</span>);</span><br><span class="line">fw.write(times + <span class="string">""</span>);</span><br><span class="line">fw.close();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"您的试用次数已到,请购买正版"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习（文件-递归）"><a href="#练习（文件-递归）" class="headerlink" title="练习（文件+递归）"></a>练习（文件+递归）</h3><ul><li><p>需求:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.java文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.java文件名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 从键盘接收一个文件夹路径</span></span><br><span class="line"><span class="comment"> * 1,如果录入的是不存在,给与提示</span></span><br><span class="line"><span class="comment"> * 2,如果录入的是文件路径,给与提示</span></span><br><span class="line"><span class="comment"> * 3,如果是文件夹路径,直接返回</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 打印出该文件夹下所有的.java文件名</span></span><br><span class="line"><span class="comment"> * 1,获取到该文件夹路径下的所有的文件和文件夹,存储在File数组中</span></span><br><span class="line"><span class="comment"> * 2,遍历数组,对每一个文件或文件夹做判断</span></span><br><span class="line"><span class="comment"> * 3,如果是文件,并且后缀是.java的,就打印</span></span><br><span class="line"><span class="comment"> * 4,如果是文件夹,就递归调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File dir = getDir();</span><br><span class="line">printJavaFile(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取键盘录入的文件夹路径</span></span><br><span class="line"><span class="comment"> * 1,返回值类型File</span></span><br><span class="line"><span class="comment"> * 2,不需要有参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个文件夹路径"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//将键盘录入的文件夹路径存储</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(line);<span class="comment">//封装成File对象</span></span><br><span class="line"><span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的文件夹路径不存在,请重新录入"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir.isFile()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的是文件路径,请重新录入文件夹路径"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取文件夹路径下的所.java文件</span></span><br><span class="line"><span class="comment"> * 1,返回值类型 void</span></span><br><span class="line"><span class="comment"> * 2,参数列表File dir</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printJavaFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,获取到该文件夹路径下的所有的文件和文件夹,存储在File数组中</span></span><br><span class="line">File[] subFiles = dir.listFiles();</span><br><span class="line"><span class="comment">//2,遍历数组,对每一个文件或文件夹做判断</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="comment">//3,如果是文件,并且后缀是.java的,就打印</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isFile() &amp;&amp; subFile.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">System.out.println(subFile);</span><br><span class="line"><span class="comment">//4,如果是文件夹,就递归调用</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (subFile.isDirectory())&#123;</span><br><span class="line">printJavaFile(subFile);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:从键盘接收两个文件夹路径,把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,在目标文件夹中创建原文件夹</span></span><br><span class="line"><span class="comment"> * 2,获取原文件夹中所有的文件和文件夹,存储在File数组中</span></span><br><span class="line"><span class="comment"> * 3,遍历数组</span></span><br><span class="line"><span class="comment"> * 4,如果是文件就用io流读写</span></span><br><span class="line"><span class="comment"> * 5,如果是文件夹就递归调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File src = Test1.getDir();</span><br><span class="line">File dest = Test1.getDir();</span><br><span class="line"><span class="keyword">if</span>(src.equals(dest)) &#123;</span><br><span class="line">System.out.println(<span class="string">"目标文件夹是源文件夹的子文件夹"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">copy(src,dest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * 1,返回值类型void</span></span><br><span class="line"><span class="comment"> * 2,参数列表File src,File dest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,在目标文件夹中创建原文件夹</span></span><br><span class="line">File newDir = <span class="keyword">new</span> File(dest, src.getName());</span><br><span class="line">newDir.mkdir();</span><br><span class="line"><span class="comment">//2,获取原文件夹中所有的文件和文件夹,存储在File数组中</span></span><br><span class="line">File[] subFiles = src.listFiles();</span><br><span class="line"><span class="comment">//3,遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="comment">//4,如果是文件就用io流读写</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isFile()) &#123;</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(subFile));</span><br><span class="line">BufferedOutputStream bos = </span><br><span class="line"><span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(newDir,subFile.getName())));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line"><span class="comment">//5,如果是文件夹就递归调用</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">copy(subFile,newDir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>1.会用BufferedReader读取GBK码表和UTF-8码表的字符</li><li>2.会用BufferedWriter写出字符到GBK码表和UTF-8码表的文件中</li><li>3.会使用BufferedReader从键盘读取一行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符流FileReader&quot;&gt;&lt;a href=&quot;#字符流FileReader&quot; class=&quot;headerlink&quot; title=&quot;字符流FileReader&quot;&gt;&lt;/a&gt;字符流FileReader&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.字符流是什么&lt;ul&gt;
&lt;li&gt;字符流是可以直接读写字符的IO流&lt;/li&gt;
&lt;li&gt;字符流读取字符, 就要先读取到字节数据, 然后转为字符. 如果要写出字符, 需要把字符转为字节再写出.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：IO流</title>
    <link href="//georgeju95.github.io/2020/03/01/Java-Learing-day-8-IOStream/"/>
    <id>//georgeju95.github.io/2020/03/01/Java-Learing-day-8-IOStream/</id>
    <published>2020-03-01T04:52:36.000Z</published>
    <updated>2023-08-29T18:58:12.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IO流概述及其分类"><a href="#IO流概述及其分类" class="headerlink" title="IO流概述及其分类"></a>IO流概述及其分类</h3><ul><li>1.概念<ul><li>IO流用来处理设备之间的数据传输</li><li>Java对数据的操作是通过流的方式</li><li>Java用于操作流的类都在IO包中</li><li>流按流向分为两种：输入流，输出流。</li><li>流按操作类型分为两种：<ul><li>字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的</li><li>字符流 : 字符流只能操作纯字符数据，比较方便。</li></ul></li></ul></li><li>2.IO流常用父类<ul><li>字节流的抽象父类：<ul><li>InputStream </li><li>OutputStream</li></ul></li><li>字符流的抽象父类：<ul><li>Reader </li><li>Writer        </li></ul></li></ul></li><li>3.IO程序书写<ul><li>使用前，导入IO包中的类</li><li>使用时，进行IO异常处理</li><li>使用后，释放资源</li></ul></li></ul><a id="more"></a><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><ul><li><p>read()一次读取一个字节</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_FileInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException  </span></span><br><span class="line"><span class="comment"> * read()方法读取的是一个字节,为什么返回是int,而不是byte</span></span><br><span class="line"><span class="comment"> * 因为字节输入流可以操作任意类型的文件,比如图片音频等,这些文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111。</span></span><br><span class="line"><span class="comment"> * 那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上24个0凑足4个字节,那么byte类型的-1就变成int类型的255了。</span></span><br><span class="line"><span class="comment"> * 这样可以保证整个数据读完,而结束标记的-1就是int类型。当写入时，前面的添补位会恢复原样。 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 00010100 00100100 01000001 11111111(如果返回byte，读取就结束了) 00000000</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 10000001    byte类型-1的原码</span></span><br><span class="line"><span class="comment"> * 11111110   -1的反码</span></span><br><span class="line"><span class="comment"> * 11111111    -1的补码</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000000 11111111</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);<span class="comment">//创建流对象</span></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);<span class="comment">//创建流对象</span></span><br><span class="line"><span class="keyword">int</span> x = fis.read();<span class="comment">//从硬盘上读取一个字节</span></span><br><span class="line">System.out.println(x);</span><br><span class="line"><span class="keyword">int</span> y = fis.read();</span><br><span class="line">System.out.println(y);</span><br><span class="line"><span class="keyword">int</span> z = fis.read();</span><br><span class="line">System.out.println(z);</span><br><span class="line"><span class="keyword">int</span> a = fis.read();</span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="keyword">int</span> b = fis.read();</span><br><span class="line">System.out.println(b);</span><br><span class="line">fis.close();<span class="comment">//关流释放资源</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><ul><li><p>write()一次写出一个字节</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_FileOutputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * FileOutputStream在创建对象的时候是如果没有这个文件会帮我创建出来</span></span><br><span class="line"><span class="comment"> * 如果有这个文件就会先将文件清空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"yyy.txt"</span>,<span class="keyword">true</span>);<span class="comment">//如果想续写就在第二个追加参数传true</span></span><br><span class="line">fos.write(<span class="number">97</span>);</span><br><span class="line">fos.write(<span class="number">98</span>);</span><br><span class="line"></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"yyy.txt"</span>);<span class="comment">//创建字节输出流对象,如果没有就自动创建一个</span></span><br><span class="line"><span class="comment">//fos.write(97);//虽然写出的是一个int数,但是到文件上的是一个字节,会自动去除前三个8位</span></span><br><span class="line"><span class="comment">//fos.write(98);</span></span><br><span class="line"><span class="comment">//fos.write(99);</span></span><br><span class="line">fos.write(<span class="number">100</span>);</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="拷贝音频"><a href="#拷贝音频" class="headerlink" title="拷贝音频"></a>拷贝音频</h3><ul><li><p>FileInputStream读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1(); 逐字节拷贝，效率太低</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line"><span class="comment">//demo3();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//第二种拷贝,不推荐使用,因为有可能会导致内存溢出</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>);<span class="comment">//创建输入流对象,关联致青春.mp3</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>);<span class="comment">//创建输出流对象,关联copy.mp3</span></span><br><span class="line"><span class="comment">//int len = fis.available();</span></span><br><span class="line"><span class="comment">//System.out.println(len);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];<span class="comment">//创建与文件一样大小的字节数组</span></span><br><span class="line">fis.read(arr);<span class="comment">//将文件上的字节读取到内存中</span></span><br><span class="line">fos.write(arr);<span class="comment">//将字节数组中的字节数据写到文件上</span></span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>);<span class="comment">//创建输入流对象,关联致青春.mp3</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>);<span class="comment">//创建输出流对象,关联copy.mp3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;<span class="comment">//在不断的读取每一个字节</span></span><br><span class="line">fos.write(b);<span class="comment">//将每一个字节写出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();<span class="comment">//关流释放资源</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"双元.jpg"</span>);<span class="comment">//创建输入流对象,关联双元.jpg</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.jpg"</span>);<span class="comment">//创建输出流对象,关联copy.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;<span class="comment">//在不断的读取每一个字节</span></span><br><span class="line">fos.write(b);<span class="comment">//将每一个字节写出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();<span class="comment">//关流释放资源</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="字节数组拷贝之available-方法"><a href="#字节数组拷贝之available-方法" class="headerlink" title="字节数组拷贝之available()方法"></a>字节数组拷贝之available()方法</h3><ul><li><p>A:案例演示（见上面拷贝音频代码第二种方法）</p><ul><li>int read(byte[] b):一次读取一个字节数组</li><li>write(byte[] b):一次写出一个字节数组</li><li>available()获取读的文件所有的字节个数<h3 id="定义小数组"><a href="#定义小数组" class="headerlink" title="定义小数组"></a>定义小数组</h3></li></ul></li><li><p>write(byte[] b)</p></li><li><p>write(byte[] b, int off, int len)写出有效的字节个数</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_ArrayCopy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 第三种拷贝</span></span><br><span class="line"><span class="comment"> * 定义小数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;<span class="comment">//如果忘记加arr,返回的就不是读取的字节个数,而是字节的码表值</span></span><br><span class="line">fos.write(arr,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"yyy.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(arr,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a = fis.read(arr);<span class="comment">//将文件上的字节读取到字节数组中</span></span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//读到的有效字节个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> b : arr) &#123;<span class="comment">//第一次获取到文件上的a和b</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"><span class="keyword">int</span> c = fis.read(arr);</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> b : arr) &#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="BufferedInputStream和BufferOutputStream拷贝"><a href="#BufferedInputStream和BufferOutputStream拷贝" class="headerlink" title="BufferedInputStream和BufferOutputStream拷贝"></a>BufferedInputStream和BufferOutputStream拷贝</h3><ul><li><p>A:缓冲思想</p><ul><li>字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，</li><li>这是加入了数组这样的缓冲区效果，java本身在设计的时候，</li><li>也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流</li></ul></li><li><p>B.BufferedInputStream</p><ul><li>BufferedInputStream内置了一个缓冲区(数组)</li><li>从BufferedInputStream中读取一个字节时</li><li>BufferedInputStream会一次性从文件中读取8192个, 存在缓冲区中, 返回给程序一个</li><li>程序再次读取时, 就不用找文件了, 直接从缓冲区中获取</li><li>直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个</li></ul></li><li><p>C.BufferedOutputStream</p><ul><li>BufferedOutputStream也内置了一个缓冲区(数组)</li><li>程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中</li><li>直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里</li></ul></li><li><p>D.拷贝的代码 </p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>);<span class="comment">//创建文件输入流对象,关联致青春.mp3</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);<span class="comment">//创建缓冲区对fis装饰</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>);<span class="comment">//创建输出流对象,关联copy.mp3</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);<span class="comment">//创建缓冲区对fos装饰</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();<span class="comment">//只关装饰后的对象即可</span></span><br><span class="line">bos.close();</span><br></pre></td></tr></table></figure></code></pre></li></ul><ul><li>E.小数组的读写和带Buffered的读取哪个更快?<ul><li>定义小数组如果是8192个字节大小和Buffered比较的话</li><li>定义小数组会略胜一筹,因为读和写操作的是同一个数组</li><li>而Buffered操作的是两个数组</li></ul></li></ul><h3 id="flush和close方法的区别"><a href="#flush和close方法的区别" class="headerlink" title="flush和close方法的区别"></a>flush和close方法的区别</h3><ul><li><p>flush()方法</p><ul><li>用来刷新缓冲区的,刷新后可以再次写出 </li></ul></li><li><p>close()方法</p><ul><li><p>用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_BufferCopy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * close方法</span></span><br><span class="line"><span class="comment"> * 具备刷新的功能,在关闭流之前,就会先刷新一次缓冲区,将缓冲区的字节全都刷新到文件上,再关闭,close方法刷完之后就能写了</span></span><br><span class="line"><span class="comment"> * flush方法?</span></span><br><span class="line"><span class="comment"> * 具备刷新的功能,刷完之后还可以继续写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//flush和close方法的区别</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>));</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"致青春.mp3"</span>);<span class="comment">//创建输入流对象,关联致青春.mp3</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.mp3"</span>);<span class="comment">//创建输出流对象,关联copy.mp3</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);<span class="comment">//创建缓冲区对象,对输入流进行包装让其变得更加强大</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="字节流读写中文"><a href="#字节流读写中文" class="headerlink" title="字节流读写中文"></a>字节流读写中文</h3><ul><li><p>字节流读取中文的问题</p><ul><li>字节流在读中文（一个字两个字节）的时候有可能会读到半个中文,造成乱码 </li></ul></li><li><p>字节流写出中文的问题</p><ul><li><p>字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 </p></li><li><p>写出回车换行 write(“\r\n”.getBytes());</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Chinese</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * * 字节流读取中文的问题</span></span><br><span class="line"><span class="comment">* 字节流在读中文的时候有可能会读到半个中文,造成乱码 </span></span><br><span class="line"><span class="comment">* 字节流写出中文的问题</span></span><br><span class="line"><span class="comment">* 字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 </span></span><br><span class="line"><span class="comment">* 写出回车换行 write("\r\n".getBytes());</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"zzz.txt"</span>);</span><br><span class="line">fos.write(<span class="string">"我读书少,你不要骗我"</span>.getBytes());</span><br><span class="line">fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"yyy.txt"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="流的标准处理异常代码"><a href="#流的标准处理异常代码" class="headerlink" title="流的标准处理异常代码"></a>流的标准处理异常代码</h3><ul><li><p>try{} finally{}嵌套（1.6版本及其以前）</p></li><li><p>try() {} 自动close小括号里面的对象（1.7版本）</p><pre><code>* 原理：    在try()中创建的流对象必须实现了AutoCloseable这个接口,如果实现了,在try后面的{}(读写代码)执行后就会自动调用,流对象的close方法将流关掉 </code></pre>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7_TryFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"yyy.txt"</span>);</span><br><span class="line">MyClose mc = <span class="keyword">new</span> MyClose();  <span class="comment">//如果不实现AutoCloseable接口的clouse()方法，则不会创建成功，因为不具备自动关闭功能</span></span><br><span class="line">)&#123;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line">fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"yyy.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">fos.write(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fis != <span class="keyword">null</span>)</span><br><span class="line">fis.close();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;<span class="comment">//try fianlly的嵌套目的是能关一个尽量关一个</span></span><br><span class="line"><span class="keyword">if</span>(fos != <span class="keyword">null</span>)</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClose</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我关了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="图片加密"><a href="#图片加密" class="headerlink" title="图片加密"></a>图片加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> * 将写出的字节异或上一个数,这个数就是密钥,解密的时候再次异或就可以了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"copy.jpg"</span>));</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy2.jpg"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b ^ <span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><ul><li><p>在控制台录入文件的路径,将文件拷贝到当前项目下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在控制台录入文件的路径,将文件拷贝到当前项目下</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1,定义方法对键盘录入的路径进行判断,如果是文件就返回</span></span><br><span class="line"><span class="comment"> * 2,在主方法中接收该文件</span></span><br><span class="line"><span class="comment"> * 3,读和写该文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File file = getFile();<span class="comment">//获取文件</span></span><br><span class="line">BufferedInputStream  bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file.getName()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个方法获取键盘录入的文件路径,并封装成File对象返回</span></span><br><span class="line"><span class="comment"> * 1,返回值类型File</span></span><br><span class="line"><span class="comment"> * 2,参数列表无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个文件的路径:"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//接收键盘录入的路径</span></span><br><span class="line">File file = <span class="keyword">new</span> File(line);<span class="comment">//封装成File对象,并对其进行判断</span></span><br><span class="line"><span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的文件路径不存在,请重新录入:"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">System.out.println(<span class="string">"您录入的是文件夹路径,请重新录入:"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="录入数据拷贝到文件"><a href="#录入数据拷贝到文件" class="headerlink" title="录入数据拷贝到文件"></a>录入数据拷贝到文件</h3><ul><li><p>将键盘录入的数据拷贝到当前项目下的text.txt文件中,键盘录入数据当遇到quit时就退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将键盘录入的数据拷贝到当前项目下的text.txt文件中,键盘录入数据当遇到quit时就退出</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,创建键盘录入对象</span></span><br><span class="line"><span class="comment"> * 2,创建输出流对象,关联text.txt文件</span></span><br><span class="line"><span class="comment"> * 3,定义无限循环</span></span><br><span class="line"><span class="comment"> * 4,遇到quit退出循环</span></span><br><span class="line"><span class="comment"> * 5,如果不quit,就将内容写出</span></span><br><span class="line"><span class="comment"> * 6,关闭流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//2,创建输出流对象,关联text.txt文件</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"text.txt"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入数据:"</span>);</span><br><span class="line"><span class="comment">//3,定义无限循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//将键盘录入的数据存储在line中</span></span><br><span class="line"><span class="comment">//4,遇到quit退出循环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"quit"</span>.equals(line)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5,如果不quit,就将内容写出</span></span><br><span class="line">fos.write(line.getBytes());<span class="comment">//字符串写出必须转换成字节数组</span></span><br><span class="line">fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6,关闭流</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IO流概述及其分类&quot;&gt;&lt;a href=&quot;#IO流概述及其分类&quot; class=&quot;headerlink&quot; title=&quot;IO流概述及其分类&quot;&gt;&lt;/a&gt;IO流概述及其分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.概念&lt;ul&gt;
&lt;li&gt;IO流用来处理设备之间的数据传输&lt;/li&gt;
&lt;li&gt;Java对数据的操作是通过流的方式&lt;/li&gt;
&lt;li&gt;Java用于操作流的类都在IO包中&lt;/li&gt;
&lt;li&gt;流按流向分为两种：输入流，输出流。&lt;/li&gt;
&lt;li&gt;流按操作类型分为两种：&lt;ul&gt;
&lt;li&gt;字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的&lt;/li&gt;
&lt;li&gt;字符流 : 字符流只能操作纯字符数据，比较方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.IO流常用父类&lt;ul&gt;
&lt;li&gt;字节流的抽象父类：&lt;ul&gt;
&lt;li&gt;InputStream &lt;/li&gt;
&lt;li&gt;OutputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符流的抽象父类：&lt;ul&gt;
&lt;li&gt;Reader &lt;/li&gt;
&lt;li&gt;Writer        &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3.IO程序书写&lt;ul&gt;
&lt;li&gt;使用前，导入IO包中的类&lt;/li&gt;
&lt;li&gt;使用时，进行IO异常处理&lt;/li&gt;
&lt;li&gt;使用后，释放资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：异常处理</title>
    <link href="//georgeju95.github.io/2020/02/29/Java-Learing-day-7-Exception-and-FILE/"/>
    <id>//georgeju95.github.io/2020/02/29/Java-Learing-day-7-Exception-and-FILE/</id>
    <published>2020-02-29T09:16:36.000Z</published>
    <updated>2023-08-29T18:58:12.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常的概述和分类"><a href="#异常的概述和分类" class="headerlink" title="异常的概述和分类"></a>异常的概述和分类</h3><ul><li><p>A:异常的概述</p><ul><li>异常就是Java程序在运行过程中出现的错误。</li></ul></li><li><p>B:异常的分类</p><ul><li>通过API查看Throwable</li><li>Error<ul><li>服务器宕机,数据库崩溃等</li></ul></li><li>Exception</li></ul></li><li><p>C:异常的继承体系</p><ul><li>Throwable<ul><li>Error    </li><li>Exception<ul><li>RuntimeException等</li></ul></li></ul></li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:JVM默认是如何处理异常的</span></span><br><span class="line"><span class="comment">* main函数收到这个问题时,有两种处理方式:</span></span><br><span class="line"><span class="comment">* a:自己将该问题处理,然后继续运行</span></span><br><span class="line"><span class="comment">* b:自己没有针对的处理方式,只有交给调用main的jvm来处理</span></span><br><span class="line"><span class="comment">* jvm有一个默认的异常处理机制,就将该异常进行处理.</span></span><br><span class="line"><span class="comment">* 并将该异常的名称,异常的信息.异常出现的位置打印在了控制台上,同时将程序停止运行</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* JVM默认如何处理异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="keyword">int</span> x = d.div(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="comment">//arr = null;//NullPointerException空指针异常</span></span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException数组索引越界异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 除法运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//a = 10,b = 0</span></span><br><span class="line"><span class="keyword">return</span> a / b;<span class="comment">// 10 / 0  被除数是10,除数是0当除数是0的时候违背了算数运算法则,抛出异常</span></span><br><span class="line"><span class="comment">//new ArithmeticException("/ by zero");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="try…catch-的方式处理异常-1"><a href="#try…catch-的方式处理异常-1" class="headerlink" title="try…catch 的方式处理异常 1"></a>try…catch 的方式处理异常 1</h3><ul><li><p>A:异常处理的两种方式</p><ul><li>a:try…catch…finally<ul><li>try catch</li><li>try catch finally</li><li>try finally </li></ul></li><li>b:throws</li></ul></li><li><p>B:try…catch处理异常的基本格式</p><ul><li>try…catch…finally</li></ul></li><li><p>C:案例演示</p><ul><li><p>try…catch的方式处理1个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:异常处理的两种方式</span></span><br><span class="line"><span class="comment">* a:try…catch…finally</span></span><br><span class="line"><span class="comment">* try catch</span></span><br><span class="line"><span class="comment">* try catch finally</span></span><br><span class="line"><span class="comment">* try finally </span></span><br><span class="line"><span class="comment">* b:throws</span></span><br><span class="line"><span class="comment">* B:try...catch处理异常的基本格式</span></span><br><span class="line"><span class="comment">* try…catch…finally</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* try...catch的方式处理1个异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">try:用来检测异常的</span></span><br><span class="line"><span class="comment">catch:用来捕获异常的</span></span><br><span class="line"><span class="comment">finally:释放资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">世界上最真情的相依就是你在try我在catch,无论你发神马脾气,我都静静接受,默默处理</span></span><br><span class="line"><span class="comment">当通过trycatch将问题处理了,程序会继续执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Demo2 d = <span class="keyword">new</span> Demo2();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = d.div(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException a) &#123;<span class="comment">//ArithmeticException a = new ArithmeticException();</span></span><br><span class="line">System.out.println(<span class="string">"出错了,除数为零了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"1111111111111111"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 除法运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//a = 10,b = 0</span></span><br><span class="line"><span class="keyword">return</span> a / b;<span class="comment">// 10 / 0  被除数是10,除数是0当除数是0的时候违背了算数运算法则,抛出异常</span></span><br><span class="line"><span class="comment">//new ArithmeticException("/ by zero");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="try…catch-的方式处理异常-2"><a href="#try…catch-的方式处理异常-2" class="headerlink" title="try…catch 的方式处理异常 2"></a>try…catch 的方式处理异常 2</h3><ul><li><p>A:案例演示</p><ul><li><p>try…catch的方式处理多个异常</p></li><li><p>JDK7以后处理多个异常的方式及注意事项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment"> * try...catch的方式处理多个异常</span></span><br><span class="line"><span class="comment"> * JDK7以后处理多个异常的方式及注意事项</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 安卓,客户端开发,如何处理异常?try&#123;&#125;catch(Exception e)&#123;&#125;</span></span><br><span class="line"><span class="comment"> * Java EE,服务端开发,一般都是底层开发,从底层向上抛</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * try后面如果跟多个catch,那么小的异常放前面,大的异常放后面,根据多态的原理,如果大的放前面,就会将所有的子类对象接收</span></span><br><span class="line"><span class="comment"> * 后面的catch就没有意义了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK7如何处理多个异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(a / b);</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException | ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"出错了"</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(a / b);</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">arr = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"除数不能为零"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"索引越界了"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//Exception e = new NullPointerException();</span></span><br><span class="line">System.out.println(<span class="string">"出错了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="编译期异常和运行期异常的区别"><a href="#编译期异常和运行期异常的区别" class="headerlink" title="编译期异常和运行期异常的区别"></a>编译期异常和运行期异常的区别</h3><ul><li><p>A:编译期异常和运行期异常的区别</p><ul><li><p>Java中的异常被分为两大类：编译时异常和运行时异常。</p></li><li><p>所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常</p></li><li><p>编译时异常</p><ul><li>Java程序必须显示处理，否则程序就会发生错误，无法通过编译</li></ul></li><li><p>运行时异常</p><ul><li>无需显示处理，也可以和编译时异常一样处理</li></ul></li></ul></li><li><p>B:案例演示</p><ul><li><p>编译期异常和运行期异常的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:编译期异常和运行期异常的区别</span></span><br><span class="line"><span class="comment">* Java中的异常被分为两大类：编译时异常和运行时异常。</span></span><br><span class="line"><span class="comment">* 所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 编译时异常</span></span><br><span class="line"><span class="comment">* Java程序必须显示处理，否则程序就会发生错误，无法通过编译</span></span><br><span class="line"><span class="comment">* 运行时异常</span></span><br><span class="line"><span class="comment">* 无需显示处理，也可以和编译时异常一样处理</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* 编译期异常和运行期异常的区别</span></span><br><span class="line"><span class="comment">编译时异常也叫做未雨绸缪异常(老师自己定义的)</span></span><br><span class="line"><span class="comment">未雨绸缪:在做某些事情的时候要做某些准备</span></span><br><span class="line"><span class="comment">编译时异常:在编译某个程序的时候,有可能会有这样那样的事情发生,比如文件找不到,这样的异常就必须在编译的时候处理</span></span><br><span class="line"><span class="comment">如果不处理编译通不过</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">运行时异常:就是程序员所犯得错误,需要回来修改代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Throwable-的几个常见方法"><a href="#Throwable-的几个常见方法" class="headerlink" title="Throwable 的几个常见方法"></a>Throwable 的几个常见方法</h3><ul><li><p>A:Throwable的几个常见方法</p><ul><li>a:getMessage()<ul><li>获取异常信息，返回字符串。</li></ul></li><li>b:toString()<ul><li>获取异常类名和异常信息，返回字符串。</li></ul></li><li>c:printStackTrace()<ul><li>获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。</li></ul></li></ul></li><li><p>B:案例演示</p><ul><li><p>Throwable的几个常见方法的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Throwable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:Throwable的几个常见方法</span></span><br><span class="line"><span class="comment">* a:getMessage()</span></span><br><span class="line"><span class="comment">* 获取异常信息，返回字符串。</span></span><br><span class="line"><span class="comment">* b:toString()</span></span><br><span class="line"><span class="comment">* 获取异常类名和异常信息，返回字符串。</span></span><br><span class="line"><span class="comment">* c:printStackTrace()</span></span><br><span class="line"><span class="comment">* 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* Throwable的几个常见方法的基本使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//Exception e = new ArithmeticException("/ by zero");</span></span><br><span class="line"><span class="comment">//System.out.println(e.getMessage());//获取异常信息</span></span><br><span class="line"><span class="comment">//System.out.println(e); //调用toString方法,打印异常类名和异常信息</span></span><br><span class="line">e.printStackTrace();<span class="comment">//jvm默认就用这种方式处理异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="throws-的方式处理异常"><a href="#throws-的方式处理异常" class="headerlink" title="throws 的方式处理异常"></a>throws 的方式处理异常</h3><ul><li><p>A:throws的方式处理异常</p><ul><li>定义功能方法时，需要把出现的问题暴露出来让调用者去处理。</li><li>那么就通过 throws 在方法上标识。</li></ul></li><li><p>B:案例演示</p><ul><li><p>举例分别演示编译时异常和运行时异常的抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:throws的方式处理异常</span></span><br><span class="line"><span class="comment">* 定义功能方法时，需要把出现的问题暴露出来让调用者去处理。</span></span><br><span class="line"><span class="comment">* 那么就通过throws在方法上标识。</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* 举例分别演示编译时异常和运行时异常的抛出</span></span><br><span class="line"><span class="comment">* 编译时异常的抛出必须对其进行处理</span></span><br><span class="line"><span class="comment">* 运行时异常的抛出可以处理也可以不处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAge(-<span class="number">17</span>);</span><br><span class="line">System.out.println(p.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeOutOfBoundsException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt;<span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//Exception e = new Exception("年龄非法");</span></span><br><span class="line"><span class="comment">//throw e;</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AgeOutOfBoundsException(<span class="string">"年龄非法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="throw-的概述以及和-throws-的区别"><a href="#throw-的概述以及和-throws-的区别" class="headerlink" title="throw 的概述以及和 throws 的区别"></a>throw 的概述以及和 throws 的区别</h3><ul><li>A:throw的概述<ul><li>在功能方法内部出现某种情况，程序不能继续运行，需要进行跳转时，就用throw把异常对象抛出。</li></ul></li><li>B:throws和throw的区别<ul><li>a:throws<ul><li>用在方法声明后面，跟的是异常类名</li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由该方法的调用者来处理</li></ul></li><li>b:throw<ul><li>用在方法体内，跟的是异常对象名</li><li>只能抛出一个异常对象名</li><li>表示抛出异常，由方法体内的语句处理</li></ul></li></ul></li></ul><h3 id="finally-关键字的特点及作用"><a href="#finally-关键字的特点及作用" class="headerlink" title="finally 关键字的特点及作用"></a>finally 关键字的特点及作用</h3><ul><li><p>A:finally的特点</p><ul><li>被finally控制的语句体一定会执行</li><li>特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))</li></ul></li><li><p>B:finally的作用</p><ul><li>用于释放资源，在IO流操作和数据库操作中会见到</li></ul></li><li><p>C:案例演示</p><ul><li><p>finally关键字的特点及作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7_Finally</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:finally的特点</span></span><br><span class="line"><span class="comment">* 被finally控制的语句体一定会执行</span></span><br><span class="line"><span class="comment">* 特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))</span></span><br><span class="line"><span class="comment">* B:finally的作用</span></span><br><span class="line"><span class="comment">* 用于释放资源，在IO流操作和数据库操作中会见到</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* finally关键字的特点及作用</span></span><br><span class="line"><span class="comment">*return语句相当于是方法的最后一口气,那么在他将死之前会看一看有没有finally帮其完成遗愿,如果有就将finally执行</span></span><br><span class="line"><span class="comment">*后在彻底返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"除数为零了"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);<span class="comment">//退出jvm虚拟机</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"看看我执行了吗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>D:面试题1</p><ul><li>final,finally和finalize的区别</li></ul></li><li><p>E:面试题2</p><ul><li>如果catch里面有return语句，请问finally的代码还会执行吗?如果会，请问是在return前还是return后。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:面试题1</span></span><br><span class="line"><span class="comment">* final,finally和finalize的区别</span></span><br><span class="line"><span class="comment">* final可以修饰类,不能被继承</span></span><br><span class="line"><span class="comment">* 修饰方法,不能被重写</span></span><br><span class="line"><span class="comment">* 修饰变量,只能赋值一次</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* finally是try语句中的一个语句体,不能单独使用,用来释放资源</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* finalize是一个方法,当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</span></span><br><span class="line"><span class="comment">* B:面试题2</span></span><br><span class="line"><span class="comment">* 如果catch里面有return语句，请问finally的代码还会执行吗?如果会，请问是在return前还是return后。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">System.out.println(d.method());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">x = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">x = <span class="number">40</span>;</span><br><span class="line"><span class="comment">//return x;千万不要在finally里面写返回语句,因为finally的作用是为了释放资源,是肯定会执行的</span></span><br><span class="line"><span class="comment">//如果在这里面写返回语句,那么try和catch的结果都会被改变,所以这么写就是犯罪</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义异常概述和基本使用"><a href="#自定义异常概述和基本使用" class="headerlink" title="自定义异常概述和基本使用"></a>自定义异常概述和基本使用</h3><ul><li><p>A:为什么需要自定义异常</p><ul><li>举例：人的年龄</li></ul></li><li><p>B:自定义异常概述</p><ul><li>继承自Exception (包含throw的方法需要 throws …)</li><li>继承自RuntimeException (包含throw的方法可以不写上 throws…)</li></ul></li><li><p>C:案例演示</p><ul><li><p>自定义异常的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[Demo8_Exception.java]</span><br><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:为什么需要自定义异常</span></span><br><span class="line"><span class="comment"> * 通过名字区分到底是神马异常,有针对的解决办法 </span></span><br><span class="line"><span class="comment">* 举例：人的年龄</span></span><br><span class="line"><span class="comment">* B:自定义异常概述</span></span><br><span class="line"><span class="comment">* 继承自Exception</span></span><br><span class="line"><span class="comment">* 继承自RuntimeException</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* 自定义异常的基本使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeOutOfBoundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AgeOutOfBoundsException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AgeOutOfBoundsException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[Demo6_Exception]</span><br><span class="line"><span class="keyword">package</span> com.heima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:throws的方式处理异常</span></span><br><span class="line"><span class="comment">* 定义功能方法时，需要把出现的问题暴露出来让调用者去处理。</span></span><br><span class="line"><span class="comment">* 那么就通过throws在方法上标识。</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* 举例分别演示编译时异常和运行时异常的抛出</span></span><br><span class="line"><span class="comment">* 编译时异常的抛出必须对其进行处理</span></span><br><span class="line"><span class="comment">* 运行时异常的抛出可以处理也可以不处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAge(-<span class="number">17</span>);</span><br><span class="line">System.out.println(p.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeOutOfBoundsException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt;<span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//Exception e = new Exception("年龄非法");</span></span><br><span class="line"><span class="comment">//throw e;</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AgeOutOfBoundsException(<span class="string">"年龄非法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="异常的注意事项及如何使用异常处理"><a href="#异常的注意事项及如何使用异常处理" class="headerlink" title="异常的注意事项及如何使用异常处理"></a>异常的注意事项及如何使用异常处理</h3><ul><li><p>A:异常注意事项</p><ul><li>a:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(父亲坏,儿子不能比父亲更坏)</li><li>b:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常</li><li>c:<strong>如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws</strong></li></ul></li><li><p>B:如何使用异常处理</p><ul><li><p>原则:如果该功能内部可以将问题处理,用try,如果处理不了,交由调用者处理,这是用throws</p></li><li><p>区别:</p><ul><li>后续程序需要继续运行就try</li><li>后续程序不需要继续运行就throws</li></ul></li><li><p>如果JDK没有提供对应的异常，需要自定义异常。</p></li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li><p>键盘录入一个int类型的整数,对其求二进制表现形式</p><ul><li><p>如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger</p></li><li><p>如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数</p></li><li><p>如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键盘录入一个int类型的整数,对其求二进制表现形式</span></span><br><span class="line"><span class="comment"> * 如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger</span></span><br><span class="line"><span class="comment"> * 如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数</span></span><br><span class="line"><span class="comment"> * 如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,创建键盘录入对象</span></span><br><span class="line"><span class="comment"> * 2,将键盘录入的结果存储在String类型的字符串中,存储int类型中如果有不符合条件的直接报错,无法进行后续判断</span></span><br><span class="line"><span class="comment"> * 3,键盘录入的结果转换成int类型的数据,是正确的还是错误的</span></span><br><span class="line"><span class="comment"> * 4,正确的直接转换</span></span><br><span class="line"><span class="comment"> * 5,错误的要进行对应判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入一个整数:"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String line = sc.nextLine();<span class="comment">//将键盘录入的结果存储在line中</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(line);<span class="comment">//将字符串转换为整数</span></span><br><span class="line">System.out.println(Integer.toBinaryString(num));<span class="comment">//将整数转换为二进制</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">new</span> BigInteger(line);</span><br><span class="line">System.out.println(<span class="string">"录入错误,您录入的是一个过大整数,请重新输入一个整数:"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e2) &#123;<span class="comment">//alt + shif + z (try catch快捷键)</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">new</span> BigDecimal(line);</span><br><span class="line">System.out.println(<span class="string">"录入错误,您录入的是一个小数,请重新输入一个整数:"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">System.out.println(<span class="string">"录入错误,您录入的是非法字符,请重新输入一个整数:"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="File类的概述和构造方法"><a href="#File类的概述和构造方法" class="headerlink" title="File类的概述和构造方法"></a>File类的概述和构造方法</h3><ul><li><p>A:File类的概述</p><ul><li>File更应该叫做一个路径<ul><li>文件路径或者文件夹路径  </li><li>路径分为绝对路径和相对路径</li><li>绝对路径是一个固定的路径,从盘符开始</li><li>相对路径相对于某个位置,在eclipse下是指当前项目下,在dos下</li></ul></li><li>查看API指的是当前路径</li><li>文件和目录路径名的抽象表示形式</li></ul></li><li><p>B:构造方法</p><ul><li>File(String pathname)：根据一个路径得到File对象</li><li>File(String parent, String child):根据一个目录和一个子文件/目录得到File对象</li><li>File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象</li></ul></li><li><p>C:案例演示</p><ul><li><p>File类的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File(String pathname)：根据一个路径得到File对象</span></span><br><span class="line"><span class="comment"> * File(String parent, String child):根据一个目录和一个子文件/目录得到File对象</span></span><br><span class="line"><span class="comment"> * File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line">File parent = <span class="keyword">new</span> File(<span class="string">"F:\\双元课堂\\day19\\video"</span>);</span><br><span class="line">String child = <span class="string">"001_今日内容.avi"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(parent, child);</span><br><span class="line">System.out.println(file.exists());</span><br><span class="line">System.out.println(parent.exists());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String parent = <span class="string">"F:\\双元课堂\\day19\\video"</span>;</span><br><span class="line">String child = <span class="string">"001_今日内容.avi"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(parent,child);</span><br><span class="line">System.out.println(file.exists());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"F:\\双元课堂\\day19\\video\\001_今日内容.avi"</span>);</span><br><span class="line">System.out.println(file.exists());</span><br><span class="line"></span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"xxx.txt"</span>);</span><br><span class="line">System.out.println(file2.exists());</span><br><span class="line"></span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"yyy.txt"</span>);</span><br><span class="line">System.out.println(file3.exists());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="File类的创建功能"><a href="#File类的创建功能" class="headerlink" title="File类的创建功能"></a>File类的创建功能</h3><ul><li><p>A:创建功能</p><ul><li>public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了</li><li>public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了</li><li>public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来</li></ul></li><li><p>B:案例演示</p><ul><li><p>File类的创建功能</p></li><li><p>注意事项：</p><ul><li><p>如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_FileMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:创建功能</span></span><br><span class="line"><span class="comment">* public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了</span></span><br><span class="line"><span class="comment">* public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了</span></span><br><span class="line"><span class="comment">* public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* File类的创建功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 注意事项：</span></span><br><span class="line"><span class="comment">* 如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">File dir1 = <span class="keyword">new</span> File(<span class="string">"aaa"</span>);</span><br><span class="line">System.out.println(dir1.mkdir());</span><br><span class="line"></span><br><span class="line">File dir2 = <span class="keyword">new</span> File(<span class="string">"bbb.txt"</span>);<span class="comment">//这样写是可以的,文件夹也是可以有后缀的</span></span><br><span class="line">System.out.println(dir2.mkdir());</span><br><span class="line"></span><br><span class="line">File dir3 = <span class="keyword">new</span> File(<span class="string">"ccc\\ddd"</span>);</span><br><span class="line">System.out.println(dir3.mkdirs()); <span class="comment">//创建多级目录</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"yyy.txt"</span>);</span><br><span class="line">System.out.println(file.createNewFile());<span class="comment">//如果没有就创建,返回true</span></span><br><span class="line"></span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"zzz"</span>);</span><br><span class="line">System.out.println(file2.createNewFile());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="File类的重命名和删除功能"><a href="#File类的重命名和删除功能" class="headerlink" title="File类的重命名和删除功能"></a>File类的重命名和删除功能</h3><ul><li><p>A:重命名和删除功能</p><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径</li><li>public boolean delete():删除文件或者文件夹</li></ul></li><li><p>B:重命名注意事项</p><ul><li>如果路径名相同，就是改名。</li><li>如果路径名不同，就是改名并剪切。</li></ul></li><li><p>C:删除注意事项：</p><ul><li><p>Java中的删除不走回收站。</p></li><li><p>要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_FileMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:重命名和删除功能</span></span><br><span class="line"><span class="comment">* public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">* public boolean delete():删除文件或者文件夹</span></span><br><span class="line"><span class="comment">* B:重命名注意事项</span></span><br><span class="line"><span class="comment">* 如果路径名相同，就是改名。</span></span><br><span class="line"><span class="comment">* 如果路径名不同，就是改名并剪切。</span></span><br><span class="line"><span class="comment">* C:删除注意事项：</span></span><br><span class="line"><span class="comment">* Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment">* 要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"yyy.txt"</span>);</span><br><span class="line">System.out.println(file1.delete());</span><br><span class="line"></span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"aaa"</span>);</span><br><span class="line">System.out.println(file2.delete());</span><br><span class="line"></span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"ccc"</span>);<span class="comment">//如果删除一个文件夹,那么文件夹必须是空的</span></span><br><span class="line">System.out.println(file3.delete());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"ooo.txt"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\xxx.txt"</span>);</span><br><span class="line">System.out.println(file1.renameTo(file2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="File类的判断功能"><a href="#File类的判断功能" class="headerlink" title="File类的判断功能"></a>File类的判断功能</h3><ul><li><p>A:判断功能</p><ul><li>public boolean isDirectory():判断是否是目录</li><li>public boolean isFile():判断是否是文件</li><li>public boolean exists():判断是否存在</li><li>public boolean canRead():判断是否可读</li><li>public boolean canWrite():判断是否可写</li><li>public boolean isHidden():判断是否隐藏</li></ul></li><li><p>B:案例演示</p><ul><li><p>File类的判断功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_FileMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:判断功能</span></span><br><span class="line"><span class="comment">* public boolean isDirectory():判断是否是目录</span></span><br><span class="line"><span class="comment">* public boolean isFile():判断是否是文件</span></span><br><span class="line"><span class="comment">* public boolean exists():判断是否存在</span></span><br><span class="line"><span class="comment">* public boolean canRead():判断是否可读</span></span><br><span class="line"><span class="comment">* public boolean canWrite():判断是否可写</span></span><br><span class="line"><span class="comment">* public boolean isHidden():判断是否隐藏</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* File类的判断功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"zzz"</span>);</span><br><span class="line">file.setReadable(<span class="keyword">false</span>);</span><br><span class="line">System.out.println(file.canRead()); <span class="comment">//windows系统认为所有的文件都是可读的</span></span><br><span class="line">file.setWritable(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(file.canWrite()); <span class="comment">//windows系统可以设置为不可写</span></span><br><span class="line"></span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"aaa.txt"</span>);</span><br><span class="line">System.out.println(file2.isHidden());<span class="comment">//判断是否是隐藏文件</span></span><br><span class="line">System.out.println(file.isHidden());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File dir1 = <span class="keyword">new</span> File(<span class="string">"ccc"</span>);</span><br><span class="line">System.out.println(dir1.isDirectory());<span class="comment">//判断是否是文件夹</span></span><br><span class="line"></span><br><span class="line">File dir2 = <span class="keyword">new</span> File(<span class="string">"zzz"</span>);</span><br><span class="line">System.out.println(dir2.isDirectory());</span><br><span class="line"></span><br><span class="line">System.out.println(dir1.isFile());<span class="comment">//判断是否是文件</span></span><br><span class="line">System.out.println(dir2.isFile());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="File类的获取功能"><a href="#File类的获取功能" class="headerlink" title="File类的获取功能"></a>File类的获取功能</h3><ul><li><p>A:获取功能</p><ul><li>public String getAbsolutePath()：获取绝对路径</li><li>public String getPath():获取路径</li><li>public String getName():获取名称</li><li>public long length():获取长度。字节数</li><li>public long lastModified():获取最后一次的修改时间，毫秒值</li><li>public String[] list():获取指定目录下的所有文件或者文件夹的名称数组</li><li>public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 </li></ul></li><li><p>B:案例演示</p><ul><li><p>File类的获取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_FileMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:获取功能</span></span><br><span class="line"><span class="comment">* public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">* public String getPath():获取路径</span></span><br><span class="line"><span class="comment">* public String getName():获取名称</span></span><br><span class="line"><span class="comment">* public long length():获取长度。字节数</span></span><br><span class="line"><span class="comment">* public long lastModified():获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment">* public String[] list():获取指定目录下的所有文件或者文件夹的名称数组</span></span><br><span class="line"><span class="comment">* public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"F:/双元课堂/day19/video"</span>);</span><br><span class="line">String[] arr = dir.list();<span class="comment">//仅为了获取文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : arr) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File[] subFiles = dir.listFiles();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (File file : subFiles) &#123;<span class="comment">//获取文件对象</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"ccc.txt"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\双元课堂\\day19\\ccc.txt"</span>);</span><br><span class="line"><span class="comment">//System.out.println(file1.getAbsolutePath());//获取绝对路径</span></span><br><span class="line"><span class="comment">//System.out.println(file2.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(file1.getPath());//获取构造方法中传入路径</span></span><br><span class="line"><span class="comment">//System.out.println(file2.getPath());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(file1.getName());//获取文件或者文件的名字</span></span><br><span class="line"><span class="comment">//System.out.println(file2.getName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//System.out.println(file1.length());</span></span><br><span class="line"></span><br><span class="line">Date d = <span class="keyword">new</span> Date(file1.lastModified());<span class="comment">//文件的最后修改时间</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">System.out.println(sdf.format(d));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="输出指定目录下指定后缀的文件名"><a href="#输出指定目录下指定后缀的文件名" class="headerlink" title="输出指定目录下指定后缀的文件名"></a>输出指定目录下指定后缀的文件名</h3><ul><li><p>A:案例演示</p><ul><li><p>需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment"> * 需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"E:\\"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] arr = dir.list();//获取e盘下所有的文件或文件夹</span></span><br><span class="line"><span class="comment">//for (String string : arr) &#123;</span></span><br><span class="line"><span class="comment">//if(string.endsWith(".jpg")) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(string);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*File[] subFiles = dir.listFiles();//获取e盘下所有的文件或文件夹对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (File subFile : subFiles) &#123;</span></span><br><span class="line"><span class="comment">if(subFile.isFile() &amp;&amp; subFile.getName().endsWith(".jpg")) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(subFile);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤器FilenameFilter是个接口，包含唯一方法accept()。下面是匿名内部类用法，实现了接口的子类对象</span></span><br><span class="line">String[] arr = dir.list(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(dir);</span></span><br><span class="line"><span class="comment">//System.out.println(name);</span></span><br><span class="line">File file = <span class="keyword">new</span> File(dir, name);</span><br><span class="line"><span class="keyword">return</span> file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">".jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : arr) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="文件名称过滤器的概述及使用"><a href="#文件名称过滤器的概述及使用" class="headerlink" title="文件名称过滤器的概述及使用"></a>文件名称过滤器的概述及使用</h3><ul><li><p>A:文件名称过滤器的概述</p><ul><li>public String[] list(FilenameFilter filter)</li><li>public File[] listFiles(FileFilter filter)</li></ul></li><li><p>B:文件名称过滤器的使用</p><ul><li><p>需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</p><p>见上面代码</p></li></ul></li><li><p>C:源码分析</p><ul><li><p>带文件名称过滤器的list()方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list(FilenameFilter filter) &#123;</span><br><span class="line">        String names[] = list();</span><br><span class="line">        <span class="keyword">if</span> ((names == <span class="keyword">null</span>) || (filter == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> names;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; v = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.accept(<span class="keyword">this</span>, names[i])) &#123;</span><br><span class="line">                v.add(names[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v.toArray(<span class="keyword">new</span> String[v.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异常的概述和分类&quot;&gt;&lt;a href=&quot;#异常的概述和分类&quot; class=&quot;headerlink&quot; title=&quot;异常的概述和分类&quot;&gt;&lt;/a&gt;异常的概述和分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A:异常的概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异常就是Java程序在运行过程中出现的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B:异常的分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过API查看Throwable&lt;/li&gt;
&lt;li&gt;Error&lt;ul&gt;
&lt;li&gt;服务器宕机,数据库崩溃等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C:异常的继承体系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throwable&lt;ul&gt;
&lt;li&gt;Error    &lt;/li&gt;
&lt;li&gt;Exception&lt;ul&gt;
&lt;li&gt;RuntimeException等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：Map &amp; Set</title>
    <link href="//georgeju95.github.io/2020/02/28/Java-Learing-day-6-Map-and-Set/"/>
    <id>//georgeju95.github.io/2020/02/28/Java-Learing-day-6-Map-and-Set/</id>
    <published>2020-02-28T12:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *使用HashSet存储字符串并遍历 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Set的特点：</span></span><br><span class="line"><span class="comment"> * 无序（存储和读取的顺序可能不一样）</span></span><br><span class="line"><span class="comment"> *不允许重复</span></span><br><span class="line"><span class="comment"> *没有整数索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//Set set = new HashSet();</span></span><br><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">set.add(<span class="string">"hello"</span>);</span><br><span class="line">set.add(<span class="string">"world"</span>);</span><br><span class="line">System.out.println(set.add(<span class="string">"java"</span>));</span><br><span class="line">System.out.println(set.add(<span class="string">"java"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合对象</span></span><br><span class="line"><span class="keyword">for</span>(String s : set) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>HashSet方法的add()方法解析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//K key：要添加的新元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//根据新添加元素的hashCode()返回值计算出hash值</span></span><br><span class="line">       <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">       <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//获取当前集合中的每一个元素</span></span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="comment">//和新添加的元素进行比较，判断是否重复，如果重复则返回，</span></span><br><span class="line">           <span class="comment">//先比较hash值，hash值不一样if语句结束</span></span><br><span class="line">           <span class="comment">//如果hash值一样，则比较地址在或者使用equals方法进行比较</span></span><br><span class="line">           <span class="comment">//比较结果如果为true，则重复不在添加</span></span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="comment">//直接添加元素</span></span><br><span class="line">       addEntry(hash, key, value, i);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *使用HashSet存储自定义对象并遍历 </span></span><br><span class="line"><span class="comment"> *通过查看源码发现：</span></span><br><span class="line"><span class="comment"> *HashSet的add()方法，首先会使用当前集合中的每一个元素和新添加的元素进行hash值比较，</span></span><br><span class="line"><span class="comment"> *如果hash值不一样，则直接添加新的元素</span></span><br><span class="line"><span class="comment"> *如果hash值一样，比较地址值或者使用equals方法进行比较</span></span><br><span class="line"><span class="comment"> *比较结果一样，则认为是重复不添加</span></span><br><span class="line"><span class="comment"> *所有的比较结果都不一样则添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">HashSet&lt;Student&gt; hs = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"><span class="comment">//创建元素对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>,<span class="number">18</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>,<span class="number">19</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>,<span class="number">19</span>);</span><br><span class="line"><span class="comment">//添加元素对象</span></span><br><span class="line">hs.add(s);</span><br><span class="line">hs.add(s2);</span><br><span class="line">hs.add(s3);</span><br><span class="line"><span class="comment">//遍历集合对象</span></span><br><span class="line"><span class="keyword">for</span> (Student student : hs) &#123;</span><br><span class="line">System.out.println(student);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("-------------------");</span></span><br><span class="line">Student s = (Student)obj;<span class="comment">//向下转型，可以获取子类特有成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较年龄是否相等，如果不等则返回false</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.age != s.age) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较姓名是否相等，如果不等则返回false</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.name.equals(s.name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认返回true，说明两个学生是相等的</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回一样的值，从而执行我们重写后的equals()方法</span></span><br><span class="line">    <span class="comment">//这样子比较次数还是多了，可以让hashCode()方法和成员变量挂钩，下面的代码是优化</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">[Person.java]</span><br><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">result = prime * result + age;</span><br><span class="line">result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Person other = (Person) obj;</span><br><span class="line"><span class="keyword">if</span> (age != other.age)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public int hashCode() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 我们发现当hashCode方法永远返回整数1时，所有对象的hash值都是一样的，</span></span><br><span class="line"><span class="comment"> * 有一些对象他的成员变量完全不同，但是他们还需要进行hash和equals方法的比较，</span></span><br><span class="line"><span class="comment"> * 如果我们可以让成员变量不同的对象，他们的hash值也不同，这就可以减少一部分equals方法的比较</span></span><br><span class="line"><span class="comment"> * 从而可以提高我们程序的效率</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 可以尝试着让hashCode方法的返回值和对象的成员变量有关</span></span><br><span class="line"><span class="comment"> * 可以让hashCode方法返回所有成员变量之和，</span></span><br><span class="line"><span class="comment"> * 让基本数据类型直接想加，然后引用数据类型获取hashCode方法返回值后再相加（boolean不可以参与运算）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">//return age;</span></span><br><span class="line"><span class="comment">return age + name.hashCode();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("-------------");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//提高效率</span></span><br><span class="line"><span class="comment">if(this == obj) &#123;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//提高健壮性</span></span><br><span class="line"><span class="comment">if(this.getClass() != obj.getClass()) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//向下转型</span></span><br><span class="line"><span class="comment">Person p = (Person)obj;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(!this.name.equals(p.name)) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(this.age != p.age) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HashSetDemo3.java]</span><br><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">HashSet&lt;Person&gt; hs = <span class="keyword">new</span> HashSet&lt;Person&gt;();</span><br><span class="line"><span class="comment">//创建元素对象</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">20</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//添加元素对象</span></span><br><span class="line">hs.add(p);</span><br><span class="line">hs.add(p2);</span><br><span class="line">hs.add(p3);</span><br><span class="line"><span class="comment">//遍历集合对象</span></span><br><span class="line"><span class="keyword">for</span> (Person person : hs) &#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Collections：</span></span><br><span class="line"><span class="comment"> * 面试题：Collection和Collections有什么区别？</span></span><br><span class="line"><span class="comment"> * Collection是集合体系的最顶层，包含了集合体系的共性</span></span><br><span class="line"><span class="comment"> * Collections是一个工具类，方法都是用于操作Collection</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void swap(List list, int i, int j) :将指定列表中的两个索引进行位置互换</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method6</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void  sort(List&lt;T&gt; list) :按照列表中元素的自然顺序进行排序</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void shuffle(List list):傻否，随机置换  </span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Collections.shuffle(list);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void reverse(List list)  :反转</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">Collections.reverse(list);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void fill(List list, Object obj) :使用指定的对象填充指定列表的所有元素</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"hello"</span>);</span><br><span class="line">list.add(<span class="string">"world"</span>);</span><br><span class="line">list.add(<span class="string">"java"</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">Collections.fill(list, <span class="string">"android"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void copy(List dest, List src) :是把源列表中的数据覆盖到目标列表</span></span><br><span class="line"><span class="comment">//注意：目标列表的长度至少等于源列表的长度</span></span><br><span class="line"><span class="comment">//创建源列表</span></span><br><span class="line">List&lt;String&gt; src = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">src.add(<span class="string">"hello"</span>);</span><br><span class="line">src.add(<span class="string">"world"</span>);</span><br><span class="line">src.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建目标列表</span></span><br><span class="line">List&lt;String&gt; dest = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">dest.add(<span class="string">"java"</span>);</span><br><span class="line">dest.add(<span class="string">"java"</span>);</span><br><span class="line">dest.add(<span class="string">"java"</span>);</span><br><span class="line">dest.add(<span class="string">"java"</span>);</span><br><span class="line">Collections.copy(dest, src);</span><br><span class="line">System.out.println(dest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static int  binarySearch(List list, Object key) 使用二分查找法查找指定元素在指定列表的索引位置 </span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = Collections.binarySearch(list, <span class="number">4</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>需求：实现学号和姓名这样有对应关系的数据存储</p><ul><li>为了体现这种有对应关系的数据，我们使用以前所学的内容是可以实现的，但是略有不变，所以java又给我买提供了一种专门用于存储对应关系的集合，Map</li><li>Map:将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值</li><li>Map和Collection有什么区别？<ul><li>Map:是一个双列集合，常用语处理有对应关系的数据，key是不可以重复的，我们也称之为是夫妻对集合</li><li>Collection:是单列集合，Collection有不同的子体系，有的允许重复有索引有序，有的不允许重复而且无序，那么我们也称之为单身汉集合</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Map的常用功能：</span></span><br><span class="line"><span class="comment"> * 映射功能：</span></span><br><span class="line"><span class="comment"> *  V put(K key, V value) </span></span><br><span class="line"><span class="comment"> * 获取功能：</span></span><br><span class="line"><span class="comment"> * V get(Object key) </span></span><br><span class="line"><span class="comment"> * int size() </span></span><br><span class="line"><span class="comment"> * 判断功能：</span></span><br><span class="line"><span class="comment"> * boolean containsKey(Object key) </span></span><br><span class="line"><span class="comment"> *boolean containsValue(Object value) </span></span><br><span class="line"><span class="comment"> *boolean isEmpty() </span></span><br><span class="line"><span class="comment"> * 删除功能：</span></span><br><span class="line"><span class="comment"> * void clear()  </span></span><br><span class="line"><span class="comment"> * V remove(Object key)   </span></span><br><span class="line"><span class="comment"> * 遍历功能：</span></span><br><span class="line"><span class="comment"> * Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Set&lt;K&gt; keySet()  </span></span><br><span class="line"><span class="comment"> * Collection&lt;V&gt; values()  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Map对象</span></span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//V put(K key, V value) ：就是将key映射到value，如果key存在，则覆盖value，并将原来的value返回</span></span><br><span class="line">System.out.println(map.put(<span class="string">"ITCAST001"</span>, <span class="string">"张三"</span>));</span><br><span class="line">System.out.println(map.put(<span class="string">"ITCAST002"</span>, <span class="string">"李四"</span>));</span><br><span class="line">System.out.println(map.put(<span class="string">"ITCAST001"</span>, <span class="string">"王五"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void clear() : 清空所有的对应关系  </span></span><br><span class="line"><span class="comment">//map.clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//V remove(Object key) :根据指定的key删除对应关系，并返回key所对应的值，如果没有删除成功则返回null</span></span><br><span class="line"><span class="comment">//System.out.println(map.remove("ITCAST005"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean containsKey(Object key) : 判断指定key是否存在</span></span><br><span class="line"><span class="comment">//System.out.println(map.containsKey("ITCAST003"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean containsValue(Object value)：判断指定的value是否存在</span></span><br><span class="line"><span class="comment">//System.out.println(map.containsValue("王五"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isEmpty() : 判断是否有对应关系</span></span><br><span class="line"><span class="comment">//System.out.println(map.isEmpty());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int size() : 返回对应关系的个数</span></span><br><span class="line"><span class="comment">//System.out.println(map.size());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//V get(Object key) : 根据指定的key返回对应的value</span></span><br><span class="line">System.out.println(map.get(<span class="string">"ITCAST002"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set&lt;K&gt; keySet()  </span></span><br><span class="line"><span class="comment"> * Collection&lt;V&gt; values() </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Map对象</span></span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//添加映射关系</span></span><br><span class="line">map.put(<span class="string">"ITCAST001"</span>, <span class="string">"张三"</span>);</span><br><span class="line">map.put(<span class="string">"ITCAST002"</span>, <span class="string">"李四"</span>);</span><br><span class="line">map.put(<span class="string">"ITCAST005"</span>, <span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set&lt;K&gt; keySet() : 以Set的形式获返回所有的key，因为不允许重复</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Collection&lt;V&gt; values() :</span></span><br><span class="line">Collection&lt;String&gt; values = map.values();</span><br><span class="line"><span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">Map的第一种遍历方式</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Map的第一种遍历方式：</span></span><br><span class="line"><span class="comment"> * 首先召集所有的丈夫</span></span><br><span class="line"><span class="comment"> * 遍历所有的丈夫</span></span><br><span class="line"><span class="comment"> * 获取每一个丈夫</span></span><br><span class="line"><span class="comment"> * 让每一个丈夫去找他自己的媳妇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Map对象</span></span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//添加映射关系</span></span><br><span class="line">map.put(<span class="string">"谢婷疯"</span>, <span class="string">"张箔纸"</span>);</span><br><span class="line">map.put(<span class="string">"陈关西"</span>, <span class="string">"钟欣桶"</span>);</span><br><span class="line">map.put(<span class="string">"李亚碰"</span>, <span class="string">"王飞"</span>);</span><br><span class="line"><span class="comment">//遍历Map对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先召集所有的丈夫</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="comment">//遍历所有的丈夫</span></span><br><span class="line"><span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line"><span class="comment">//让每个丈夫去找他自己的媳妇就可以了</span></span><br><span class="line">String value = map.get(key);</span><br><span class="line">System.out.println(<span class="string">"丈夫："</span> + key + <span class="string">"---"</span> + <span class="string">"媳妇："</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Map的第二种遍历方式</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Map的第二种遍历方式：</span></span><br><span class="line"><span class="comment"> * 通过结婚证对象来获取丈夫和媳妇</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  class 结婚证&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment"> *  K 丈夫;</span></span><br><span class="line"><span class="comment"> *  V 媳妇;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public 结婚证(K 丈夫，V 媳妇) &#123;</span></span><br><span class="line"><span class="comment"> *  this.丈夫 = 丈夫;</span></span><br><span class="line"><span class="comment"> *  this.媳妇 = 媳妇;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public K get丈夫() &#123;</span></span><br><span class="line"><span class="comment"> *  return 丈夫;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public V get媳妇() &#123;</span></span><br><span class="line"><span class="comment"> *  return 媳妇;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  class Entry&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment"> *  K key;</span></span><br><span class="line"><span class="comment"> *  V value;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public Entry(K key，V value) &#123;</span></span><br><span class="line"><span class="comment"> *  this.key = key;</span></span><br><span class="line"><span class="comment"> *  this.value = value;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public K getKey() &#123;</span></span><br><span class="line"><span class="comment"> *  return key;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  public V getValue() &#123;</span></span><br><span class="line"><span class="comment"> *  return value;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Map对象</span></span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//添加映射关系</span></span><br><span class="line">map.put(<span class="string">"尹志平"</span>, <span class="string">"小龙女"</span>);</span><br><span class="line">map.put(<span class="string">"令狐冲"</span>, <span class="string">"东方菇凉"</span>);</span><br><span class="line">map.put(<span class="string">"玄慈"</span>, <span class="string">"叶二娘"</span>);</span><br><span class="line"><span class="comment">//获取所有的结婚证对象</span></span><br><span class="line">Set&lt;Map.Entry&lt;String,String&gt;&gt; entrys = map.entrySet();</span><br><span class="line"><span class="comment">//遍历包含了结婚证对象的集合</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrys) &#123;</span><br><span class="line"><span class="comment">//获取每个单独的结婚证对象</span></span><br><span class="line"><span class="comment">//通过结婚证对象获取丈夫和媳妇</span></span><br><span class="line">String key = entry.getKey();</span><br><span class="line">String value = entry.getValue();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"丈夫："</span> + key + <span class="string">"---"</span> + <span class="string">"媳妇:"</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HashSet&quot;&gt;&lt;a href=&quot;#HashSet&quot; class=&quot;headerlink&quot; title=&quot;HashSet&quot;&gt;&lt;/a&gt;HashSet&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.itheima_01;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashSet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *	使用HashSet存储字符串并遍历 	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *	Set的特点：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *			 无序（存储和读取的顺序可能不一样）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *			不允许重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *			没有整数索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HashSetDemo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建集合对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//Set set = new HashSet();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		HashSet&amp;lt;String&amp;gt; set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//添加元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		set.add(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		set.add(&lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(set.add(&lt;span class=&quot;string&quot;&gt;&quot;java&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(set.add(&lt;span class=&quot;string&quot;&gt;&quot;java&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//遍历集合对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String s : set) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java：泛型与常见数据结构</title>
    <link href="//georgeju95.github.io/2020/02/27/Java-Learing-day-5-Generics-and-DS/"/>
    <id>//georgeju95.github.io/2020/02/27/Java-Learing-day-5-Generics-and-DS/</id>
    <published>2020-02-27T08:14:36.000Z</published>
    <updated>2023-08-29T18:58:12.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Collection </span></span><br><span class="line"><span class="comment"> * boolean add(E e)  </span></span><br><span class="line"><span class="comment"> * void clear()  </span></span><br><span class="line"><span class="comment"> * boolean contains(Object o)  </span></span><br><span class="line"><span class="comment"> * boolean isEmpty() </span></span><br><span class="line"><span class="comment"> * boolean remove(Object o) </span></span><br><span class="line"><span class="comment"> * int size() </span></span><br><span class="line"><span class="comment"> * Object[] toArray()  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Iterator&lt;E&gt; iterator()  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//Collection c = new Collection();//Collection是接口，不能实例化</span></span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();<span class="comment">//多态，父类引用指向子类对象  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean add(E e)  </span></span><br><span class="line">System.out.println(c.add(<span class="string">"hello"</span>));<span class="comment">//永远可以添加成功，因为ArrayList他允许重复</span></span><br><span class="line">System.out.println(c.add(<span class="string">"world"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void clear()：清空集合</span></span><br><span class="line"><span class="comment">//c.clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean contains(Object o)  :判断集合中是否包含指定元素</span></span><br><span class="line"><span class="comment">//System.out.println(c.contains("java"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isEmpty() :是否为空</span></span><br><span class="line"><span class="comment">//System.out.println(c.isEmpty());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean remove(Object o) :删除元素</span></span><br><span class="line"><span class="comment">//System.out.println(c.remove("java"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int size() :返回集合中的元素个数</span></span><br><span class="line"><span class="comment">//System.out.println(c.size());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object[] toArray()  :将集合转换成一个Object类型的数组</span></span><br><span class="line">Object[] objs = c.toArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">System.out.println(objs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>集合的遍历方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 集合的遍历方式：</span></span><br><span class="line"><span class="comment"> * 1.toArray(),可以把集合转换成数组，然后遍历数组即可</span></span><br><span class="line"><span class="comment"> * 2.iterator(),可以返回一个迭代器对象，我们可以通过迭代器对象来迭代集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Iterator：可以用于遍历集合</span></span><br><span class="line"><span class="comment"> * E next()  :返回下一个元素</span></span><br><span class="line"><span class="comment"> *  boolean hasNext()  ：判断是否有元素可以获取</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  注意：Exception in thread "main" java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment"> *  使用next方法获取下一个元素，如果没有元素可以获取，则出现NoSuchElementException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//method();</span></span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">c.add(<span class="string">"hello"</span>);</span><br><span class="line">c.add(<span class="string">"world"</span>);</span><br><span class="line">c.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取迭代器对象</span></span><br><span class="line">Iterator it = c.iterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object next()  :返回下一个元素</span></span><br><span class="line"><span class="comment">//boolean hasNext()  ：判断是否有元素可以获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*if(it.hasNext())</span></span><br><span class="line"><span class="comment">System.out.println(it.next());</span></span><br><span class="line"><span class="comment">if(it.hasNext())</span></span><br><span class="line"><span class="comment">System.out.println(it.next());</span></span><br><span class="line"><span class="comment">if(it.hasNext())</span></span><br><span class="line"><span class="comment">System.out.println(it.next());</span></span><br><span class="line"><span class="comment">if(it.hasNext())</span></span><br><span class="line"><span class="comment">System.out.println(it.next());*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">c.add(<span class="string">"hello"</span>);</span><br><span class="line">c.add(<span class="string">"world"</span>);</span><br><span class="line">c.add(<span class="string">"java"</span>);</span><br><span class="line"><span class="comment">//获取数组</span></span><br><span class="line">Object[] objs = c.toArray();</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">System.out.println(objs[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：判断集合中是否包含元素java，如果有则添加元素android</span></span><br><span class="line"><span class="comment"> * Exception in thread "main" java.util.ConcurrentModificationException:并发修改异常</span></span><br><span class="line"><span class="comment"> * 迭代器是依赖于集合的，相当于集合的一个副本，当迭代器在操作的时候，如果发现和集合不一样，则抛出异常</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 解决方案:</span></span><br><span class="line"><span class="comment"> * 你就别使用迭代器</span></span><br><span class="line"><span class="comment"> * 在使用迭代器进行遍历的时候使用迭代器来进行修改(迭代器会同步集合，List.ListIterator有add方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//method();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//Collection c = new ArrayList();</span></span><br><span class="line">List c = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">c.add(<span class="string">"hello"</span>);</span><br><span class="line">c.add(<span class="string">"world"</span>);</span><br><span class="line">c.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以通过遍历来获取集合中的每一个元素，然后进行比较即可</span></span><br><span class="line"><span class="comment">/*Iterator it = c.iterator();</span></span><br><span class="line"><span class="comment">while(it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">String s = (String)it.next();</span></span><br><span class="line"><span class="comment">if(s.equals("java")) &#123;</span></span><br><span class="line"><span class="comment">c.add("android");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">ListIterator lit = c.listIterator();</span><br><span class="line"><span class="keyword">while</span>(lit.hasNext()) &#123;</span><br><span class="line">String s = (String)lit.next();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">"java"</span>)) &#123;</span><br><span class="line">lit.add(<span class="string">"android"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">c.add(<span class="string">"hello"</span>);</span><br><span class="line">c.add(<span class="string">"world"</span>);</span><br><span class="line">c.add(<span class="string">"java"</span>);</span><br><span class="line"><span class="comment">//判断集合中是否包含元素java</span></span><br><span class="line"><span class="keyword">if</span>(c.contains(<span class="string">"java"</span>)) &#123;</span><br><span class="line">c.add(<span class="string">"android"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用集合存储自定义对象并遍历</span></span><br><span class="line"><span class="comment"> * 由于集合可以存储任意类型的对象，当我们存储了不同类型的对象，就有可能在转换的时候出现类型转换异常，</span></span><br><span class="line"><span class="comment"> * 所以java为了解决这个问题，给我们提供了一种机制，叫做泛型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 泛型：是一种广泛的类型，把明确数据类型的工作提前到了编译时期，借鉴了数组的特点</span></span><br><span class="line"><span class="comment"> * 泛型好处：</span></span><br><span class="line"><span class="comment"> * 避免了类型转换的问题</span></span><br><span class="line"><span class="comment"> * 可以减少黄色警告线</span></span><br><span class="line"><span class="comment"> * 可以简化我们代码的书写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 什么时候可以使用泛型？</span></span><br><span class="line"><span class="comment"> * 问API，当我们看到&lt;E&gt;，就可以使用泛型了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">Collection&lt;Student&gt; c = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"><span class="comment">//创建元素对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>,<span class="number">18</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>,<span class="number">19</span>);</span><br><span class="line"><span class="comment">//添加元素对象</span></span><br><span class="line">c.add(s);</span><br><span class="line">c.add(s2);</span><br><span class="line"><span class="comment">//遍历集合对象</span></span><br><span class="line"></span><br><span class="line">Iterator&lt;Student&gt; it = c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line"><span class="comment">//String str = (String)it.next();</span></span><br><span class="line"><span class="comment">//System.out.println(str);</span></span><br><span class="line"></span><br><span class="line">Student stu = it.next();</span><br><span class="line">System.out.println(stu.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * List:</span></span><br><span class="line"><span class="comment"> * 有序的（存储和读取的顺序是一致的）</span></span><br><span class="line"><span class="comment"> * 有整数索引</span></span><br><span class="line"><span class="comment"> * 允许重复的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * List的特有功能：</span></span><br><span class="line"><span class="comment"> * void add(int index, E element)  </span></span><br><span class="line"><span class="comment"> * E get(int index)  </span></span><br><span class="line"><span class="comment"> * E remove(int index)  </span></span><br><span class="line"><span class="comment"> *  E set(int index, E element)</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *   增删改查    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建的列表对象</span></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//void add(int index, E element)  : 在指定索引位置添加指定元素</span></span><br><span class="line">list.add(<span class="number">0</span>, <span class="string">"hello"</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="string">"world"</span>);</span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//E get(int index)  :根据索引返回元素</span></span><br><span class="line"><span class="comment">/*System.out.println(list.get(0));</span></span><br><span class="line"><span class="comment">System.out.println(list.get(1));</span></span><br><span class="line"><span class="comment">System.out.println(list.get(2));*/</span></span><br><span class="line"><span class="comment">//System.out.println(list.get(3));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(list.get(i));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//E remove(int index)  : 删除指定元素并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(list.remove(5));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//E set(int index, E element) : 将指定索引位置的元素替换为指定元素，并将原先的元素返回</span></span><br><span class="line">System.out.println(list.set(<span class="number">0</span>, <span class="string">"android"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * List的常用子类：</span></span><br><span class="line"><span class="comment"> * ArrayList</span></span><br><span class="line"><span class="comment"> * 底层是数组结构，查询快，增删慢</span></span><br><span class="line"><span class="comment"> * LinkedList</span></span><br><span class="line"><span class="comment"> * 底层结构是链表，查询慢，增删快</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如何选择使用不同的集合？</span></span><br><span class="line"><span class="comment"> * 如果查询多，增删少，则使用ArrayList</span></span><br><span class="line"><span class="comment"> * 如果查询少，增删多，则使用LinkedList</span></span><br><span class="line"><span class="comment"> * 如果你不知道使用什么，则使用ArrayList</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * LinkedList的特有功能：</span></span><br><span class="line"><span class="comment"> * void addFirst(E e)  </span></span><br><span class="line"><span class="comment"> * void addLast(E e) </span></span><br><span class="line"><span class="comment"> *E getFirst()  </span></span><br><span class="line"><span class="comment"> *E getLast()  </span></span><br><span class="line"><span class="comment"> *E removeFirst() </span></span><br><span class="line"><span class="comment"> *E removeLast()  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list.add(<span class="string">"hello"</span>);</span><br><span class="line">list.add(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//void addFirst(E e)  :将元素添加到索引为0的位置</span></span><br><span class="line"> <span class="comment">//void addLast(E e) ：将元素添加到索引为size()-1的位置</span></span><br><span class="line">list.addFirst(<span class="string">"java"</span>);</span><br><span class="line">list.addLast(<span class="string">"android"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//E getFirst()  :获取索引为0的元素</span></span><br><span class="line"> <span class="comment">//E getLast()  ：获取索引为size()-1的元素</span></span><br><span class="line"><span class="comment">//System.out.println(list.getFirst());</span></span><br><span class="line"><span class="comment">//System.out.println(list.getLast());</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//E removeFirst() :删除索引为0的元素并返回</span></span><br><span class="line"> <span class="comment">//E removeLast() ：删除索引为size()-1的元素并返回</span></span><br><span class="line">System.out.println(list.removeFirst());</span><br><span class="line">System.out.println(list.removeLast());</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.itheima_01;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Collection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 	Collection 	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			boolean add(E e)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			void clear()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			boolean contains(Object o)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			boolean isEmpty() &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			boolean remove(Object o) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			int size() &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 			Object[] toArray()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Iterator&amp;lt;E&amp;gt; iterator()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 		&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CollectionDemo2&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建集合对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//Collection c = new Collection();//Collection是接口，不能实例化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Collection c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;span class=&quot;comment&quot;&gt;//多态，父类引用指向子类对象  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//boolean add(E e)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(c.add(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//永远可以添加成功，因为ArrayList他允许重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(c.add(&lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//void clear()：清空集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//c.clear();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//boolean contains(Object o)  :判断集合中是否包含指定元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//System.out.println(c.contains(&quot;java&quot;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//boolean isEmpty() :是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//System.out.println(c.isEmpty());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//boolean remove(Object o) :删除元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//System.out.println(c.remove(&quot;java&quot;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//int size() :返回集合中的元素个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//System.out.println(c.size());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//Object[] toArray()  :将集合转换成一个Object类型的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Object[] objs = c.toArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; objs.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(objs[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常用API</title>
    <link href="//georgeju95.github.io/2020/02/26/Java-Learing-day-4-API/"/>
    <id>//georgeju95.github.io/2020/02/26/Java-Learing-day-4-API/</id>
    <published>2020-02-26T05:18:36.000Z</published>
    <updated>2023-08-29T18:58:12.348Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一些Eclipse的小操作<ul><li>搜索查看Java类源码 Shift + Ctrl + T</li><li>抽取方法 Alt + Shift + M</li></ul></li></ul><a id="more"></a><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String toString()  : 返回该对象的字符串表示</span></span><br><span class="line"><span class="comment"> *  return getClass().getName() + "@" + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment"> *  getClass():返回一个字节码对象</span></span><br><span class="line"><span class="comment"> *  Integer.toHexString():返回指定参数的十六进制字符串形式</span></span><br><span class="line"><span class="comment"> *  hashCode()：返回该对象的哈希码值（内部地址）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * boolean equals(Object obj)，见下段代码  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">s.age = <span class="number">18</span>;</span><br><span class="line">System.out.println(s.toString());<span class="comment">//com.itheima_01.Student@737951b0</span></span><br><span class="line">System.out.println(s);<span class="comment">//说明我们输出一个对象就是默认输出这个对象的toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">/* 重写toString()</span></span><br><span class="line"><span class="comment">public String toString() &#123;</span></span><br><span class="line"><span class="comment">return name + "@" + age;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// source - generate toString() Eclipse提供的功能</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean equals(Object obj)  </span></span><br><span class="line"><span class="comment"> * 使用==来比较两个对象是否相等，则比较地址值是否相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">18</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean flag = p.equals(p2);</span></span><br><span class="line"><span class="comment">//boolean flag = p.equals(p);</span></span><br><span class="line"><span class="keyword">boolean</span> flag = p.equals(<span class="keyword">new</span> ArrayList());</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// source - generate hashCode &amp; equals，删掉了hashCode</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="comment">//提高效率</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//提高健壮性</span></span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下转型</span></span><br><span class="line">Person other = (Person) obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age != other.age)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="comment">//提高效率 当前对象和传递进来的对象地址值一样，则不用比较成员</span></span><br><span class="line"><span class="comment">if(this == o) &#123;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//提高代码的健壮性</span></span><br><span class="line"><span class="comment">if(this.getClass() != o.getClass()) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//向下转型</span></span><br><span class="line"><span class="comment">Person other = (Person) o;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(!this.name.equals(other.name)) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(this.age != other.age) &#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>System 类包含一些有用的类字段( static所修饰的成员变量 )和类方法。它不能被实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * System:包含一些有用的类字段和方法。它不能被实例化</span></span><br><span class="line"><span class="comment"> * static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)  </span></span><br><span class="line"><span class="comment"> * static long currentTimeMillis()  </span></span><br><span class="line"><span class="comment"> * static void exit(int status) </span></span><br><span class="line"><span class="comment">   static void gc()  // 尽最大努力去回收，因此有可能调用了，重写的finalize()也没有执行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//method();</span></span><br><span class="line"><span class="comment">//method2();</span></span><br><span class="line"><span class="comment">//method3();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static void gc()  </span></span><br><span class="line"><span class="comment">//Demo d = new Demo();</span></span><br><span class="line"><span class="keyword">new</span> Demo();</span><br><span class="line">System.gc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static void exit(int status) :终止虚拟机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">100</span>) &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  static long currentTimeMillis() :以毫秒值返回当前系统时间</span></span><br><span class="line"><span class="comment"> *  这个毫秒的时间是相对时间，相对于1970-1-1 00:00:00 ： 0</span></span><br><span class="line"><span class="comment"> *  1970-1-1 00:00:01 : 1000</span></span><br><span class="line"><span class="comment"> *  1970-1-1 00:01:00: 1000 * 60</span></span><br><span class="line"><span class="comment"> *  1970-1-1 01:00:00: 1000 * 60 * 60</span></span><br><span class="line"><span class="comment"> *  1000毫秒 = 1秒</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//System.out.println(System.currentTimeMillis());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(end - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)  </span></span><br><span class="line"><span class="comment"> * 复制数组</span></span><br><span class="line"><span class="comment"> * 参数1：源数组</span></span><br><span class="line"><span class="comment"> * 参数2：源数组的起始索引位置</span></span><br><span class="line"><span class="comment"> * 参数3：目标数组</span></span><br><span class="line"><span class="comment"> * 参数4：目标数组的起始索引位置</span></span><br><span class="line"><span class="comment"> * 参数5：指定接受的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">2</span>, dest, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dest.length; i++) &#123;</span><br><span class="line">System.out.print(dest[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我被回收了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Date: 表示特定的瞬间，精确到毫秒，他可以通过方法来设定自己所表示的时间，可以表示任意的时间</span></span><br><span class="line"><span class="comment"> * System.currentTimeMillis():返回的是当前系统时间，1970-1-1至今的毫秒数</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 构造方法：</span></span><br><span class="line"><span class="comment"> * Date() ：创建的是一个表示当前系统时间的Date对象</span></span><br><span class="line"><span class="comment">Date(long date) ：根据"指定时间"创建Date对象</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Date()</span></span><br><span class="line"><span class="comment">//Date d = new Date();</span></span><br><span class="line"><span class="comment">//System.out.println(d);//Thu Aug 26 14:17:28 CST 2049</span></span><br><span class="line"><span class="comment">//System.out.println(d.toLocaleString()); //已过时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Date(long date) </span></span><br><span class="line">Date d2 = <span class="keyword">new</span> Date(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);<span class="comment">//时区 有时差</span></span><br><span class="line">System.out.println(d2.toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Date的常用用方法</span></span><br><span class="line"><span class="comment">毫秒值 --- Date</span></span><br><span class="line"><span class="comment">设置</span></span><br><span class="line"><span class="comment">返回值是void，参数long</span></span><br><span class="line"><span class="comment">void setTime(long time)  </span></span><br><span class="line"><span class="comment">Date(long date)</span></span><br><span class="line"><span class="comment">Date --- 毫秒值</span></span><br><span class="line"><span class="comment">获取</span></span><br><span class="line"><span class="comment">返回long，无参数</span></span><br><span class="line"><span class="comment">long getTime()  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date d = <span class="keyword">new</span> Date();<span class="comment">//默认当前系统时间</span></span><br><span class="line"><span class="comment">//d.setTime(1000 * 60 * 60 * 24 * 2);</span></span><br><span class="line">System.out.println(d.toLocaleString());</span><br><span class="line">System.out.println(d.getTime());<span class="comment">//172800000</span></span><br><span class="line"></span><br><span class="line">d.setTime(<span class="number">172800000L</span>);</span><br><span class="line">System.out.println(d.toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h2><ul><li><p>DateFormat类是对日期进行格式化的类 </p></li><li><p>DateFormat类的使用</p><ul><li>本身是一个抽象类，所以必须使用的时候使用的是其子类SimpleDateFormat，并且在子类中有很多模式字母需要记性。</li><li>DateFormat要掌握的功能<ul><li>从日期到字符串的转换（格式化）</li><li>从字符串到日期的转换（解析）</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SimpleDateFormat:</span></span><br><span class="line"><span class="comment"> * 格式化：</span></span><br><span class="line"><span class="comment"> * Date --- String</span></span><br><span class="line"><span class="comment"> * 2049-8-26 2049年8月26日</span></span><br><span class="line"><span class="comment"> * String format(Date date) </span></span><br><span class="line"><span class="comment"> * 解析：</span></span><br><span class="line"><span class="comment"> * String --- Date</span></span><br><span class="line"><span class="comment"> * "2049-8-26"</span></span><br><span class="line"><span class="comment"> * Date parse(String source) </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 构造方法：</span></span><br><span class="line"><span class="comment"> * SimpleDateFormat() ：使用默认的模式进行对象的构建</span></span><br><span class="line"><span class="comment"> * SimpleDateFormat(String pattern) ：使用的指定的模式进行对象的构建</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：Exception in thread "main" java.text.ParseException: Unparseable date: "49年9月26日  下午1:29"</span></span><br><span class="line"><span class="comment"> *     解析的字符串，模式必须和构建对象的模式一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">//method();</span></span><br><span class="line"><span class="comment">//method2();</span></span><br><span class="line"><span class="comment">//使用指定的模式进行对象的构建</span></span><br><span class="line"><span class="comment">//1999年9月1日 10:10:10</span></span><br><span class="line"><span class="comment">//4个小姨2个大美眉和2个小弟弟</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String s = sdf.format(date);</span><br><span class="line">System.out.println(s);<span class="comment">//2049年08月26日 13:39:12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line">Date d = sdf.parse(<span class="string">"2049年08月26日 13:39:12"</span>);</span><br><span class="line">System.out.println(d.toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">//使用指定的模式进行对象的构建</span></span><br><span class="line"><span class="comment">//1999年9月1日</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String s = sdf.format(date);</span><br><span class="line">System.out.println(s);<span class="comment">//2049年08月26日</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line">Date d = sdf.parse(<span class="string">"2049年08月26日"</span>);</span><br><span class="line">System.out.println(d.toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">//使用默认模式进行对象的构建</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"><span class="comment">//创建日期对象</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化 把日期对象转换成字符串</span></span><br><span class="line">String s = sdf.format(date);</span><br><span class="line">System.out.println(s);<span class="comment">//49-8-26 下午1:29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析 把字符串转换成日期对象</span></span><br><span class="line">Date d = sdf.parse(<span class="string">"49年9月26日  下午1:29"</span>);</span><br><span class="line">System.out.println(d.toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calendar：日历，提供了一些操作年月日时的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 获取</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//static Calendar getInstance()  </span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//void set(int field, int value) ：把指定的字段修改成指定的值</span></span><br><span class="line"><span class="comment">//c.set(Calendar.DAY_OF_MONTH, 20);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void add(int field, int amount): 在指定的字段上加上指定的值</span></span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int get(int field) // 返回给定日历字段的值</span></span><br><span class="line"><span class="comment">//public static final int YEAR 1 </span></span><br><span class="line"><span class="comment">//System.out.println(Calendar.YEAR);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int year = c.get(1);</span></span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_06;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：判断一个数是否符合int类型的范围</span></span><br><span class="line"><span class="comment"> * 由于基本数据类型只能做一些简单的操作和运算，所以Java为我们封装了基本数据类型，为每种基本数据类型提供了包装类</span></span><br><span class="line"><span class="comment"> * 包装类就是封装了基本数据类型的类，为我们提供了更多复杂的方法和一些变量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * byteByte</span></span><br><span class="line"><span class="comment"> * shortShort</span></span><br><span class="line"><span class="comment"> * charCharacter</span></span><br><span class="line"><span class="comment"> * intInteger</span></span><br><span class="line"><span class="comment"> * longLong</span></span><br><span class="line"><span class="comment"> * floatFloat</span></span><br><span class="line"><span class="comment"> * doubleDouble</span></span><br><span class="line"><span class="comment"> * booleanBoolean</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Integer:</span></span><br><span class="line"><span class="comment"> * String --- int</span></span><br><span class="line"><span class="comment"> * 方式1：int intValue()</span></span><br><span class="line"><span class="comment"> * 方式2： static int parseInt(String s) </span></span><br><span class="line"><span class="comment"> * int --- String</span></span><br><span class="line"><span class="comment"> * 方式1： + ""</span></span><br><span class="line"><span class="comment"> * 方式2：String toString()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 构造方法：</span></span><br><span class="line"><span class="comment"> * Integer(int value) </span></span><br><span class="line"><span class="comment"> * Integer(String s) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*int n = 10;</span></span><br><span class="line"><span class="comment">if(n &gt;= Math.pow(-2, 31) &amp;&amp; n &lt;= Math.pow(2, 31) -1) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("符合");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">System.out.println("不符合");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer(String s) </span></span><br><span class="line"><span class="comment">//Integer i = new Integer("10");</span></span><br><span class="line"><span class="comment">//System.out.println(i);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int intValue()  </span></span><br><span class="line"><span class="comment">//int a = i.intValue();</span></span><br><span class="line"><span class="comment">//System.out.println(a + 10 );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static int parseInt(String s) </span></span><br><span class="line"><span class="comment">//int b = Integer.parseInt("20");</span></span><br><span class="line"><span class="comment">//System.out.println(b + 30);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer(int value)</span></span><br><span class="line"><span class="comment">//Integer i2 = new Integer(40);</span></span><br><span class="line"><span class="comment">//String s = i2.toString();</span></span><br><span class="line"><span class="comment">//System.out.println(s);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static String toString(int i)  </span></span><br><span class="line"><span class="comment">//String s2 = Integer.toString(50);</span></span><br><span class="line"><span class="comment">//System.out.println(s2);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JDK1.5特性：自动装箱和拆箱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Integer i = new Integer(10);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line"><span class="comment">//相当于： Integer i = new Integer(10);</span></span><br><span class="line"><span class="comment">//Integer i = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="comment">//相当于 int a = i.intValue();</span></span><br><span class="line"><span class="comment">//Integer i = 10;</span></span><br><span class="line"><span class="comment">//int a = i;</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="number">10</span>;</span><br><span class="line">Integer i2 = <span class="number">20</span>;</span><br><span class="line">Integer i3 = i + i2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Integer i3 = new Integer(i.intValue() + i2.intValue());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//自动装箱，list.add(new Integer(1));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_07;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 校验qq号码</span></span><br><span class="line"><span class="comment"> * 要求必须是5-15位</span></span><br><span class="line"><span class="comment"> * 0不能开头</span></span><br><span class="line"><span class="comment"> * 必须都是数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  正则表达式：就是一套规则，可以用于匹配字符串</span></span><br><span class="line"><span class="comment"> *  boolean matches(String regex) ：判断当前字符串是否匹配指定的正则表达式，如果匹配则返回true，否则返回false  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String qq = <span class="string">"12a345"</span>;</span><br><span class="line"><span class="comment">/*boolean flag = checkQQ(qq);</span></span><br><span class="line"><span class="comment">System.out.println(flag);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag = qq.matches(<span class="string">"[1-9][0-9]&#123;4,14&#125;"</span>);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkQQ</span><span class="params">(String qq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = qq.length();</span><br><span class="line"><span class="comment">//要求必须是5-15位</span></span><br><span class="line"><span class="keyword">if</span>(length &lt; <span class="number">5</span> || length &gt; <span class="number">15</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0不能开头</span></span><br><span class="line"><span class="keyword">if</span>(qq.startsWith(<span class="string">"0"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须都是数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="comment">//得到参数的每一个字符</span></span><br><span class="line"><span class="keyword">char</span> c = qq.charAt(i);</span><br><span class="line"><span class="keyword">if</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//符合要求</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一些Eclipse的小操作&lt;ul&gt;
&lt;li&gt;搜索查看Java类源码 Shift + Ctrl + T&lt;/li&gt;
&lt;li&gt;抽取方法 Alt + Shift + M&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象：接口与多态</title>
    <link href="//georgeju95.github.io/2020/02/24/Java-Learing-day-2-Interface-and-Polymorphic/"/>
    <id>//georgeju95.github.io/2020/02/24/Java-Learing-day-2-Interface-and-Polymorphic/</id>
    <published>2020-02-24T07:36:36.000Z</published>
    <updated>2023-08-29T18:58:12.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口、抽象类"><a href="#接口、抽象类" class="headerlink" title="接口、抽象类"></a>接口、抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 类与类：继承关系，单一继承，多层继承</span></span><br><span class="line"><span class="comment"> * 类与接口：实现关系，多实现</span></span><br><span class="line"><span class="comment"> * 接口与接口的关系：继承关系，多继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterA</span> <span class="keyword">extends</span> <span class="title">InterB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterC</span> <span class="keyword">extends</span> <span class="title">InterA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">InterC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>接口的优点</p><ul><li>打破了Java单一继承的局限性</li><li>对外提供规则（USB接口）</li><li>降低了程序的耦合性 （可以实现模块化开发，定义好规则，每个人实现自己的模块，提高了开发的效率）</li></ul></li><li><p>接口和抽象类的区别</p><ul><li>共性：不断的抽取，抽取出抽象的概念</li><li>区别1：与类的关系<ul><li>类与接口是实现关系，而且是多实现，一个类可以实现多个接口</li><li>类与抽象类是继承关系，Java中的继承是单一继承、多层继承，一个类只能有一个父类</li></ul></li><li>区别2：成员<ul><li>成员变量：抽象类可以有成员变量，也可以有常量，但是接口只能有常量</li><li>成员方法：抽象类可以有抽象方法，也可以有非抽象方法。接口只能有抽象方法，而且方法有默认修饰符 public abstract</li><li>构造方法：抽象类有构造方法，接口没有构造方法</li></ul></li></ul></li><li><p>运动员案例分析</p><p><img src="/assets/blogImg/design.png" alt="design"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 篮球运动员和教练</span></span><br><span class="line"><span class="comment">乒乓球运动员和教练</span></span><br><span class="line"><span class="comment">现在篮球运动员和教练要出国访问,需要学习英语</span></span><br><span class="line"><span class="comment">请根据你所学的知识,分析出来哪些是类,哪些是抽象类,哪些是接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建篮球运动员对象</span></span><br><span class="line">BasketBallPlayer bbp = <span class="keyword">new</span> BasketBallPlayer();</span><br><span class="line">bbp.name = <span class="string">"女兆月日"</span>;</span><br><span class="line">bbp.age = <span class="number">35</span>;</span><br><span class="line">bbp.gender = <span class="string">"男"</span>;</span><br><span class="line">bbp.sleep();</span><br><span class="line">bbp.study();</span><br><span class="line">bbp.speak();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"><span class="comment">//创建乒乓球教练对象</span></span><br><span class="line">PingpangCoach ppc = <span class="keyword">new</span> PingpangCoach();</span><br><span class="line">ppc.name = <span class="string">"刘胖子"</span>;</span><br><span class="line">ppc.age = <span class="number">40</span>;</span><br><span class="line">ppc.gender = <span class="string">"男"</span>;</span><br><span class="line">ppc.sleep();</span><br><span class="line">ppc.teach();</span><br><span class="line"><span class="comment">//ppc.speak();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">String gender;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age,String gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吃</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//睡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学习说英语</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运动员</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//学习</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教练</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span>  <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//教</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//篮球运动员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketBallPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span>  <span class="keyword">implements</span> <span class="title">SpeakEnglish</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学扣篮"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"说英语"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乒乓球运动员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingpangPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学抽球"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//篮球教练</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketBallCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"教扣篮"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"说英语"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乒乓球教练</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingpangCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"教抽球"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><ul><li>没有名字的对象</li><li>匿名对象的应用场景：<ul><li>当方法只调用一次时可以使用匿名对象</li><li>可以当作参数进行传递，但是无法在传参之前做其他的事情 </li></ul></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * final： 修饰符，可以用于修饰类、成员方法和成员变量</span></span><br><span class="line"><span class="comment"> * final所修饰的类：不能被继承，不能有子类</span></span><br><span class="line"><span class="comment"> * final所修饰的方法:不能被重写</span></span><br><span class="line"><span class="comment"> * final所修饰的变量：是不可以修改的，是常量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 常量：</span></span><br><span class="line"><span class="comment"> * 字面值常量：1,2,3</span></span><br><span class="line"><span class="comment"> * 自定义常量：被final所修饰的成员变量，一旦初始化则不可改变</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：自定义常量必须初始化，可以选择显示初始化或者构造初始化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Animal a = new Animal();</span></span><br><span class="line"><span class="comment">//a.eat();</span></span><br><span class="line"></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//d.eat();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//d.num = 20;</span></span><br><span class="line">System.out.println(d.NUM);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*final*/</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃东西"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public void eat() &#123;&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> NUM;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">NUM = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多态的前提：</span></span><br><span class="line"><span class="comment"> * 子父类的继承关系</span></span><br><span class="line"><span class="comment"> * 方法的重写</span></span><br><span class="line"><span class="comment"> * 父类引用指向子类对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 动态绑定：运行期间调用的方法，是根据其具体的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoymorphicDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*Cat c = new Cat();</span></span><br><span class="line"><span class="comment">c.eat();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类引用 Animal a</span></span><br><span class="line"><span class="comment">//指向 =</span></span><br><span class="line"><span class="comment">//子类对象 new Cat()</span></span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">a.eat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃东西"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 多态的成员特点:</span></span><br><span class="line"><span class="comment"> * 成员变量  编译时看的是左边，运行时看的左边</span></span><br><span class="line"><span class="comment"> * 成员方法  编译时看的是左边，运行时看右边</span></span><br><span class="line"><span class="comment"> * 静态方法  编译时看的是左边，运行时看的也是左边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 编译时看的都是左边，运行时成员方法看的是右边，其他（成员变量和静态的方法）看的都是左边</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoymorphicDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dad d = <span class="keyword">new</span> Kid();</span><br><span class="line"><span class="comment">//System.out.println(d.num);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//d.method();</span></span><br><span class="line">d.function();<span class="comment">//使用变量去调用静态方法，其实相当于用变量类型的类名去调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是父类方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是父类静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kid</span> <span class="keyword">extends</span> <span class="title">Dad</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是子类方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是子类静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多态中的向上转型和向下转型:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  引用类型之间的转换</span></span><br><span class="line"><span class="comment"> *  向上转型</span></span><br><span class="line"><span class="comment"> *  由小到大(子类型转换成父类型)</span></span><br><span class="line"><span class="comment"> *  向下转型</span></span><br><span class="line"><span class="comment"> *  由大到小</span></span><br><span class="line"><span class="comment"> *  基本数据类型的转换</span></span><br><span class="line"><span class="comment"> *  自动类型转换</span></span><br><span class="line"><span class="comment"> *  由小到大</span></span><br><span class="line"><span class="comment"> *  byte short char --- int --- long --- float --- double</span></span><br><span class="line"><span class="comment"> *  强制类型转换</span></span><br><span class="line"><span class="comment"> *  由大到小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoymorphicDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal2 a = <span class="keyword">new</span> Dog();<span class="comment">//向上转型</span></span><br><span class="line"><span class="comment">//a.eat();</span></span><br><span class="line"></span><br><span class="line">Dog d = (Dog)a;<span class="comment">//向下转型</span></span><br><span class="line">d.swim();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃东西"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"啃骨头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"狗刨"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>多态的优缺点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多态的优缺点</span></span><br><span class="line"><span class="comment"> * 优点：可以提高可维护性（多态前提所保证的），提高代码的可扩展性</span></span><br><span class="line"><span class="comment"> *  缺点：无法直接访问子类特有的成员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoymorphicDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MiFactory factory = <span class="keyword">new</span> MiFactory();</span><br><span class="line">factory.createPhone(<span class="keyword">new</span> MiNote());</span><br><span class="line"></span><br><span class="line">factory.createPhone(<span class="keyword">new</span> RedMi());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public void createPhone(MiNote mi) &#123;</span></span><br><span class="line"><span class="comment">mi.call();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void createPhone(RedMi mi) &#123;</span></span><br><span class="line"><span class="comment">mi.call();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPhone</span><span class="params">(Phone p)</span> </span>&#123;</span><br><span class="line">p.call();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小米Note</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiNote</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小米Note打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//红米</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedMi</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"红米打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口、抽象类&quot;&gt;&lt;a href=&quot;#接口、抽象类&quot; class=&quot;headerlink&quot; title=&quot;接口、抽象类&quot;&gt;&lt;/a&gt;接口、抽象类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.itheima_01;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 类与类：继承关系，单一继承，多层继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 类与接口：实现关系，多实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 接口与接口的关系：继承关系，多继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterfaceDemo3&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterC&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterC&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象：包&amp;修饰符</title>
    <link href="//georgeju95.github.io/2020/02/24/Java-Learing-day-3-Package-and-Modifier/"/>
    <id>//georgeju95.github.io/2020/02/24/Java-Learing-day-3-Package-and-Modifier/</id>
    <published>2020-02-24T07:36:36.000Z</published>
    <updated>2023-08-29T18:58:12.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li><p>包的特点：</p><ul><li>可以有多层</li><li>不同包下的文件名可以重复</li><li>包的声明必须是第一行代码</li></ul></li><li><p>不同包之间的互相访问</p><ul><li>使用类的全名：包名+类名</li><li>使用关键字 import 将类导入</li></ul></li></ul><a id="more"></a><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>public</th><th>当前类</th><th>相同包下不同的类</th><th>不同包下的类</th></tr></thead><tbody><tr><td>default</td><td>当前类</td><td>相同包下不同的类</td><td></td></tr><tr><td>private</td><td>当前类</td><td></td><td></td></tr><tr><td>protected</td><td>当前类</td><td>相同包下不同的类</td><td></td></tr></tbody></table><ul><li>default:     <strong>当前包</strong>下使用<br>protected: 让<strong>子类对象</strong>使用 </li></ul><table><thead><tr><th>修饰符</th><th>类</th><th>成员变量</th><th>成员方法</th><th>构造方法</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>default</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td></td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>private</td><td></td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>abstract</td><td>Y</td><td></td><td>Y</td><td></td></tr><tr><td>static</td><td></td><td>Y</td><td>Y</td><td></td></tr><tr><td>final</td><td>Y</td><td>Y</td><td>Y</td><td></td></tr></tbody></table><p>常见规则（开发中一般够用）：</p><ul><li>使用 public 来修饰类，一个java文件中只能有一个类（实际开发默认），如果一个文件中有多个类，那么类名和文件名一样的类，必须使用public修饰，其他的类不能使用public修饰</li><li>所有的成员变量使用 private 修饰，对外提供setter和getter方法</li><li>所有的方法使用public修饰，除非有其他要求</li><li>所有的构造方法使用public修饰，即构造函数是公有的，其他任何地方都可以实例化该类。如果使用private修饰，就是私有构造函数，这个一般很少用，只有单例模式才会这样写，因为这样写了这个类就不能用普通方法实例化，只有用类里面的其他公有方法来调用构造函数实例化该类。</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li><p>成员内部类：在类的成员位置，和成员变量、成员方法在同一个位置 </p></li><li><p>局部内部类：在方法内，和局部变量在同一个位置，出了方法之后就无法使用</p></li><li><p>匿名内部类：可以把匿名内部类看成是一个<strong>没有名字</strong>的局部内部类，定义在方法中。必须在定义匿名内部类的时候创建它的对象。格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类/接口() &#123;</span><br><span class="line">  如果是创建了继承这个类的子类对象，我们可以重写父类的方法</span><br><span class="line">  如果是创建了实现这个接口的子类对象，我们必须要实现该接口的所有方法</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">原理：创建了继承这个类的子类对象，或是创建了实现这个接口的子类对象</span><br></pre></td></tr></table></figure></li><li><p>共性：</p><ul><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的<code>.class</code>文件，但是前面冠以外部类的类名和<code>$</code>符号</li><li>内部类不能用普通的方式访问。内部类是外部类的一个成员，因此<strong>内部类可以自由地访问外部类的成员变量，无论是否是private的</strong>。</li></ul></li><li><p>成员内部类代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 成员内部类：</span></span><br><span class="line"><span class="comment"> * 在类的成员位置，和成员变量以及成员方法所在的位置是一样的</span></span><br><span class="line"><span class="comment"> * 在内部类当中，可以直接访问外部类的成员，包括私有成员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Outer o = new Outer();</span></span><br><span class="line"><span class="comment">//o.method();</span></span><br><span class="line">    </span><br><span class="line">Outer.Inner i = <span class="keyword">new</span> Outer().new Inner();</span><br><span class="line">i.function();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">i.function();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 成员内部类的修饰符：</span></span><br><span class="line"><span class="comment"> * 我们可以使用权限修饰符修饰成员内部类，但是如果使用私有来修饰，则无法在其他类中访问</span></span><br><span class="line"><span class="comment"> * 我们可以使用static修饰成员内部类，不用再创建外部类的对象了</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 我们可以使用abstract,final修饰成员内部类，但没多大意义 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Outer2.Inner2 i;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Outer2.Inner2 i = new Outer2.Inner2();</span></span><br><span class="line"><span class="comment">//i.function();</span></span><br><span class="line"></span><br><span class="line">Outer2.Inner2.function();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Inner2 i = <span class="keyword">new</span> Inner2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"function"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名内部类:</span></span><br><span class="line"><span class="comment"> * 可以把匿名内部类看成是一个没有名字的局部内部类</span></span><br><span class="line"><span class="comment"> * 定义在方法当中</span></span><br><span class="line"><span class="comment"> * 必须在定义匿名内部类的时候创建他的对象</span></span><br><span class="line"><span class="comment"> * 格式：</span></span><br><span class="line"><span class="comment"> * new 类/接口()&#123;</span></span><br><span class="line"><span class="comment"> * 如果是创建了继承这个类的子类对象，我们可以重写父类的方法</span></span><br><span class="line"><span class="comment"> * 如果是创建了实现这个接口的子类对象，我们必须要实现该接口的所有方法</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * 原理：而是创建了继承这个类的子类对象或者是创建了实现这个接口的子类对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">o.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*new Inner() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void function() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("function");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;.function();;*/</span></span><br><span class="line"></span><br><span class="line">Inner i = <span class="keyword">new</span> Inner() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"function"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">i.function();</span><br><span class="line">i.function();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类的应用场景<ul><li>作为参数进行传递（一般用在一个类对象只传递一次的情景，这样就不用去创建一个类文件了）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[Animal.java]</span><br><span class="line"><span class="keyword">package</span> com.itheima_04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[InnerDemo5.java]</span><br><span class="line"><span class="keyword">package</span> com.itheima_04;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名内部类的应用场景:</span></span><br><span class="line"><span class="comment"> * 作为参数进行传递</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//使用下面的方法调用，需要创建Dog类和Cat类</span></span><br><span class="line"> <span class="comment">//method(new Dog());</span></span><br><span class="line"> <span class="comment">//method(new Cat());</span></span><br><span class="line"></span><br><span class="line">method(</span><br><span class="line"><span class="keyword">new</span> Animal() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">a.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;包的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以有多层&lt;/li&gt;
&lt;li&gt;不同包下的文件名可以重复&lt;/li&gt;
&lt;li&gt;包的声明必须是第一行代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同包之间的互相访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用类的全名：包名+类名&lt;/li&gt;
&lt;li&gt;使用关键字 import 将类导入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python——正则表达式</title>
    <link href="//georgeju95.github.io/2020/01/10/2020-01-10-Python-Learning-Day5/"/>
    <id>//georgeju95.github.io/2020/01/10/2020-01-10-Python-Learning-Day5/</id>
    <published>2020-01-10T08:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.343Z</updated>
    
    <content type="html"><![CDATA[<h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">验证输入用户名和QQ号是否有效并给出对应的提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    username = input(<span class="string">'请输入用户名: '</span>)</span><br><span class="line">    qq = input(<span class="string">'请输入QQ号: '</span>)</span><br><span class="line">    <span class="comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span></span><br><span class="line">    <span class="comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span></span><br><span class="line">    m1 = re.match(<span class="string">r'^[0-9a-zA-Z_]&#123;6,20&#125;$'</span>, username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m1:</span><br><span class="line">        print(<span class="string">'请输入有效的用户名.'</span>)</span><br><span class="line">    m2 = re.match(<span class="string">r'^[1-9]\d&#123;4,11&#125;$'</span>, qq)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m2:</span><br><span class="line">        print(<span class="string">'请输入有效的QQ号.'</span>)</span><br><span class="line">    <span class="keyword">if</span> m1 <span class="keyword">and</span> m2:</span><br><span class="line">        print(<span class="string">'你输入的信息是有效的!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\，例如表示数字的\d得书写成\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span><br><span class="line">    pattern = re.compile(<span class="string">r'(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)'</span>)</span><br><span class="line">    sentence = <span class="string">'''</span></span><br><span class="line"><span class="string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span><br><span class="line"><span class="string">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 查找所有匹配并保存到一个列表中</span></span><br><span class="line">    mylist = re.findall(pattern, sentence)</span><br><span class="line">    print(mylist)</span><br><span class="line">    print(<span class="string">'--------华丽的分隔线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过迭代器取出匹配对象并获得匹配的内容</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> pattern.finditer(sentence):</span><br><span class="line">        print(temp.group())</span><br><span class="line">    print(<span class="string">'--------华丽的分隔线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过search函数指定搜索位置找出所有匹配</span></span><br><span class="line">    m = pattern.search(sentence)</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        print(m.group())</span><br><span class="line">        m = pattern.search(sentence, m.end())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sentence = <span class="string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span></span><br><span class="line">    purified = re.sub(<span class="string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,</span><br><span class="line">                      <span class="string">'*'</span>, sentence, flags=re.IGNORECASE)</span><br><span class="line">    print(purified)  <span class="comment"># 你丫是*吗? 我*你大爷的. * you.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5" target="_blank" rel="noopener">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    print(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h4><ol><li><p><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></p></li><li><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md" target="_blank" rel="noopener">使用正则表达式</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。&quot;&gt;&lt;a href=&quot;#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。&quot; class=&quot;headerlink&quot; title=&quot;例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。&quot;&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="//georgeju95.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python——正则表达式</title>
    <link href="//georgeju95.github.io/2020/01/10/2020-01-06-Python-Learning-Day4/"/>
    <id>//georgeju95.github.io/2020/01/10/2020-01-06-Python-Learning-Day4/</id>
    <published>2020-01-10T08:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件读取与写入"><a href="#文件读取与写入" class="headerlink" title="文件读取与写入"></a>文件读取与写入</h2><ul><li><h4 id="final-和-with-关键字"><a href="#final-和-with-关键字" class="headerlink" title="final 和 with 关键字"></a>final 和 with 关键字</h4></li></ul><p><code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于<code>finally</code>块的代码不论程序正常还是异常都会执行到（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常），因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">'致橡树.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">'无法打开指定的文件!'</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">'指定了未知的编码!'</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">'读取文件时解码错误!'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">'无法打开指定的文件!'</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">'指定了未知的编码!'</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">'读取文件时解码错误!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 一次性读取整个文件内容</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过for-in循环逐行读取</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            print(line, end=<span class="string">''</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件按行读取到列表中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    print(lines)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line">【最后一个的输出】</span><br><span class="line">[<span class="string">'我如果爱你——\n'</span>, <span class="string">'绝不像攀援的凌霄花，\n'</span>, <span class="string">'借你的高枝炫耀自己；\n'</span>, <span class="string">'我如果爱你——\n'</span>, <span class="string">'绝不学痴情的鸟儿，\n'</span>, <span class="string">'为绿荫重复单调的歌曲；\n'</span>, <span class="string">'也不止像泉源，\n'</span>, <span class="string">'常年送来清凉的慰藉；\n'</span>, <span class="string">'也不止像险峰，\n'</span>, <span class="string">'增加你的高度，衬托你的威仪。\n'</span>, <span class="string">'甚至日光，\n'</span>, <span class="string">'甚至春雨。\n'</span>, <span class="string">'\n'</span>, <span class="string">'不，这些都还不够！\n'</span>, <span class="string">'我必须是你近旁的一株木棉，\n'</span>, <span class="string">'作为树的形象和你站在一起。\n'</span>, <span class="string">'根，紧握在地下；\n'</span>, <span class="string">'叶，相触在云里。\n'</span>, <span class="string">'每一阵风过，\n'</span>, <span class="string">'我们都互相致意，\n'</span>, <span class="string">'但没有人，\n'</span>, <span class="string">'听懂我们的言语。\n'</span>, <span class="string">'你有你的铜枝铁干，\n'</span>, <span class="string">'像刀，像剑，也像戟；\n'</span>, <span class="string">'我有我红硕的花朵，\n'</span>, <span class="string">'像沉重的叹息，\n'</span>, <span class="string">'又像英勇的火炬。\n'</span>, <span class="string">'\n'</span>, <span class="string">'我们分担寒潮、风雷、霹雳；\n'</span>, <span class="string">'我们共享雾霭、流岚、虹霓。\n'</span>, <span class="string">'仿佛永远分离，\n'</span>, <span class="string">'却又终身相依。\n'</span>, <span class="string">'这才是伟大的爱情，\n'</span>, <span class="string">'坚贞就在这里：\n'</span>, <span class="string">'爱——\n'</span>, <span class="string">'不仅爱你伟岸的身躯，\n'</span>, <span class="string">'也爱你坚持的位置，\n'</span>, <span class="string">'足下的土地。'</span>]</span><br></pre></td></tr></table></figure><ul><li><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""判断素数的函数"""</span></span><br><span class="line">    <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">2</span>, int(sqrt(n)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> n != <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filenames = (<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>)</span><br><span class="line">    fs_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            fs_list.append(open(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">            <span class="keyword">if</span> is_prime(number):</span><br><span class="line">                <span class="keyword">if</span> number &lt; <span class="number">100</span>:</span><br><span class="line">                    fs_list[<span class="number">0</span>].write(str(number) + <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">elif</span> number &lt; <span class="number">1000</span>:</span><br><span class="line">                    fs_list[<span class="number">1</span>].write(str(number) + <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fs_list[<span class="number">2</span>].write(str(number) + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> ex:</span><br><span class="line">        print(ex)</span><br><span class="line">        print(<span class="string">'写文件时发生错误!'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">for</span> fs <span class="keyword">in</span> fs_list:</span><br><span class="line">            fs.close()</span><br><span class="line">    print(<span class="string">'操作完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li><h4 id="JSON-序列化、反序列化"><a href="#JSON-序列化、反序列化" class="headerlink" title="JSON 序列化、反序列化"></a>JSON 序列化、反序列化</h4></li></ul><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书<a href="https://zh.wikipedia.org/" target="_blank" rel="noopener">维基百科</a>上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p><p>下面的例子演示了如何使用 <a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">requests</a> 模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了<a href="https://www.tianapi.com/" target="_blank" rel="noopener">天行数据</a>提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    resp = requests.get(<span class="string">'http://api.tianapi.com/guonei/index?key=APIKey&amp;num=10'</span>)</span><br><span class="line">    data_model = json.loads(resp.text)</span><br><span class="line">    <span class="keyword">for</span> news <span class="keyword">in</span> data_model[<span class="string">'newslist'</span>]:</span><br><span class="line">        print(news[<span class="string">'title'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">我驻纽约总领馆:请美东地区中国公民加强安全防范</span><br><span class="line">第<span class="number">36</span>届中国哈尔滨国际冰雪节开幕(组图)</span><br><span class="line">香港公务员涉嫌轮番袭击他人自首后被捕 邮政署表态</span><br><span class="line">多地探索设特别合作区：深汕首创 南京欲“扩张”</span><br><span class="line">韩国瑜：我宁愿戴假发也不会穿防弹背心</span><br><span class="line">港警“滥捕示威者”？香港终于要清理“毒教材”</span><br><span class="line">华为技术有限公司注册资本新增<span class="number">1</span>亿人民币</span><br><span class="line"><span class="number">82</span>岁著名数学家四川师范大学教授丁协平逝世</span><br><span class="line">“绿委”叫嚣支持统一就是“叛国”后 他一通狠骂</span><br><span class="line">国家统计局：今年全面实施地区生产总值统一核算</span><br></pre></td></tr></table></figure><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><p><a href="https://segmentfault.com/a/1190000007736783" target="_blank" rel="noopener">总结：Python中的异常处理</a></p></li><li><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/11.%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8.md" target="_blank" rel="noopener">Python-100-days：文件与异常</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件读取与写入&quot;&gt;&lt;a href=&quot;#文件读取与写入&quot; class=&quot;headerlink&quot; title=&quot;文件读取与写入&quot;&gt;&lt;/a&gt;文件读取与写入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;final-和-with-关键字&quot;&gt;&lt;a href=&quot;#final-和-with-关键字&quot; class=&quot;headerlink&quot; title=&quot;final 和 with 关键字&quot;&gt;&lt;/a&gt;final 和 with 关键字&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;try&lt;/code&gt;后面跟上了三个&lt;code&gt;except&lt;/code&gt;分别处理这三种不同的异常状况。最后我们使用&lt;code&gt;finally&lt;/code&gt;代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于&lt;code&gt;finally&lt;/code&gt;块的代码不论程序正常还是异常都会执行到（甚至是调用了&lt;code&gt;sys&lt;/code&gt;模块的&lt;code&gt;exit&lt;/code&gt;函数退出Python环境，&lt;code&gt;finally&lt;/code&gt;块都会被执行，因为&lt;code&gt;exit&lt;/code&gt;函数实质上是引发了&lt;code&gt;SystemExit&lt;/code&gt;异常），因此我们通常把&lt;code&gt;finally&lt;/code&gt;块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在&lt;code&gt;finally&lt;/code&gt;代码块中关闭文件对象释放资源，也可以使用上下文语法，通过&lt;code&gt;with&lt;/code&gt;关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="//georgeju95.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python——面向对象进阶</title>
    <link href="//georgeju95.github.io/2019/12/31/2019-12-31-Python-Learning-Day3/"/>
    <id>//georgeju95.github.io/2019/12/31/2019-12-31-Python-Learning-Day3/</id>
    <published>2019-12-31T08:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = '白元芳'  # AttributeError: can't set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义<strong>slots</strong>变量来进行限定。需要注意的是<strong>slots</strong>的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">'_name'</span>, <span class="string">'_age'</span>, <span class="string">'_gender'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">22</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person._gender = <span class="string">'男'</span></span><br><span class="line">    <span class="comment"># AttributeError: 'Person' object has no attribute '_is_gay'</span></span><br><span class="line">    <span class="comment"># person._is_gay = True</span></span><br></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><ul><li><p>静态方法属于类而不是对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="comment"># 海伦公式</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        print(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        print(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'无法构成三角形.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""数字时钟"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(cls)</span>:</span></span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""走字"""</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示时间"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%02d:%02d:%02d'</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object, metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nickname)</span>:</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="string">"""狗"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: 汪汪汪...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="string">"""猫"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: 喵...喵...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pets = [Dog(<span class="string">'旺财'</span>), Cat(<span class="string">'凯蒂'</span>), Dog(<span class="string">'大黄'</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h2 id="str-、-repr"><a href="#str-、-repr" class="headerlink" title="__str__、__repr__"></a>__str__、__repr__</h2><p>参考下面第三条链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一张牌"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, suite, face)</span>:</span></span><br><span class="line">        self._suite = suite</span><br><span class="line">        self._face = face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">face</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._suite</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._face == <span class="number">1</span>:</span><br><span class="line">            face_str = <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">11</span>:</span><br><span class="line">            face_str = <span class="string">'J'</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">12</span>:</span><br><span class="line">            face_str = <span class="string">'Q'</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">13</span>:</span><br><span class="line">            face_str = <span class="string">'K'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            face_str = str(self._face)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s%s'</span> % (self._suite, face_str)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poker</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一副牌"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._cards = [Card(suite, face) </span><br><span class="line">                       <span class="keyword">for</span> suite <span class="keyword">in</span> <span class="string">'♠♥♣♦'</span></span><br><span class="line">                       <span class="keyword">for</span> face <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cards</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._cards</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""洗牌(随机乱序)"""</span></span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line">        random.shuffle(self._cards)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""发牌"""</span></span><br><span class="line">        card = self._cards[self._current]</span><br><span class="line">        self._current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""还有没有牌"""</span></span><br><span class="line">        <span class="keyword">return</span> self._current &lt; len(self._cards)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""玩家"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._cards_on_hand = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cards_on_hand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._cards_on_hand</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, card)</span>:</span></span><br><span class="line">        <span class="string">"""摸牌"""</span></span><br><span class="line">        self._cards_on_hand.append(card)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(self, card_key)</span>:</span></span><br><span class="line">        <span class="string">"""玩家整理手上的牌"""</span></span><br><span class="line">        self._cards_on_hand.sort(key=card_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序规则-先根据花色再根据点数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(card)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (card.suite, card.face)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p = Poker()</span><br><span class="line">    p.shuffle()</span><br><span class="line">    players = [Player(<span class="string">'东邪'</span>), Player(<span class="string">'西毒'</span>), Player(<span class="string">'南帝'</span>), Player(<span class="string">'北丐'</span>)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">            player.get(p.next)</span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        print(player.name + <span class="string">':'</span>, end=<span class="string">' '</span>)</span><br><span class="line">        player.arrange(get_key)</span><br><span class="line">        print(player.cards_on_hand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="https://www.jianshu.com/p/ee82b941772a" target="_blank" rel="noopener">理解Python装饰器(Decorator)</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/09.面向对象进阶.md" target="_blank" rel="noopener">面向对象进阶</a></li><li><a href="https://blog.csdn.net/sinat_41104353/article/details/79254149" target="_blank" rel="noopener">Python的两个魔法方法：__repr__和__str__</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;property装饰器&quot;&gt;&lt;a href=&quot;#property装饰器&quot; class=&quot;headerlink&quot; title=&quot;@property装饰器&quot;&gt;&lt;/a&gt;@property装饰器&lt;/h3&gt;&lt;p&gt;将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="//georgeju95.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python——面向对象基础</title>
    <link href="//georgeju95.github.io/2019/12/30/2019-12-30-Python-Learning-Day2/"/>
    <id>//georgeju95.github.io/2019/12/30/2019-12-30-Python-Learning-Day2/</id>
    <published>2019-12-30T10:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问可见性问题——封装"><a href="#访问可见性问题——封装" class="headerlink" title="访问可见性问题——封装"></a>访问可见性问题——封装</h2><ul><li><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p></li><li><p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p></li><li><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p></li><li><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__bar'</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__foo'</span></span><br><span class="line">    print(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p>下面的是可以顺利执行的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    print(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496679217440" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017496679217440</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/08.面向对象编程基础.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/08.面向对象编程基础.md</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问可见性问题——封装&quot;&gt;&lt;a href=&quot;#访问可见性问题——封装&quot; class=&quot;headerlink&quot; title=&quot;访问可见性问题——封装&quot;&gt;&lt;/a&gt;访问可见性问题——封装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线&lt;code&gt;__&lt;/code&gt;，在Python中，实例的变量名如果以&lt;code&gt;__&lt;/code&gt;开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要注意的是，在Python中，变量名类似&lt;code&gt;__xxx__&lt;/code&gt;的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用&lt;code&gt;__name__&lt;/code&gt;、&lt;code&gt;__score__&lt;/code&gt;这样的变量名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些时候，你会看到以一个下划线开头的实例变量名，比如&lt;code&gt;_name&lt;/code&gt;，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问&lt;code&gt;__name&lt;/code&gt;是因为Python解释器对外把&lt;code&gt;__name&lt;/code&gt;变量改成了&lt;code&gt;_Student__name&lt;/code&gt;，所以，仍然可以通过&lt;code&gt;_Student__name&lt;/code&gt;来访问&lt;code&gt;__name&lt;/code&gt;变量。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把&lt;code&gt;__name&lt;/code&gt;改成不同的变量名。总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="//georgeju95.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读：Borrowing Treasures from the Wealthy:Deep Transfer Learning through Selective Joint Fine-Tuning</title>
    <link href="//georgeju95.github.io/2019/12/27/2019-12-27-SelectiveJoint-cvpr17/"/>
    <id>//georgeju95.github.io/2019/12/27/2019-12-27-SelectiveJoint-cvpr17/</id>
    <published>2019-12-27T10:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.342Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1702.08690" target="_blank" rel="noopener">2017_CVPR_Borrowing treasures from the wealthy: deep transfer learning through selective joint fine-tuning</a></p><p>本篇论文发表于CVPR2017，作者为香港大学的 Weifeng Guo 和 Yizhou Yu，它主要想解决的是传统神经网络训练方法需要大量样本的局限。作者提出了一个叫做 Selective joint fine-tuning 的迁移学习方法，也就是目标任务的标记样本少，但是有一个源域有大量的标记样本。从源域训练集中挑选一些样本，这些样本的低维特征与目标域很相似，然后将源域挑选出的样本与目标域的样本放在一起，进行jointly fine-tuning。结果证明，这种做法是很有效果的。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>如果用少量的数据训练深度网络，那么它的性能可能还不如传统方法。少量的数据并不能够展现出 <strong>sample diversity</strong>，所以比较容易 <strong>over-fitting</strong></li></ul><blockquote><p>Training a deep network with insufficient data might even give rise to inferior performance in comparison to traditional classifiers fed with handcrafted features. Fine-grained classification problems, such as Oxford Flowers 102 [29] and Stanford Dogs 120 [19], are such examples. The number of training samples in these datasets is far from being enough for training large-scale deep neural networks, and the networks would become overfit quickly.</p></blockquote><ul><li><strong>fine-tuning</strong> 也可以认为是一种简单的 <strong>transfer learning</strong>， 对于 fine-tuning 来说，迭代次数应该少，不然还是容易出现 <strong>over-fitting</strong></li></ul><blockquote><p>Solving the overfitting problem for deep convolutional neural networks on learning tasks without sufficient training data is challenging [39]. Transfer learning techniques that apply knowledge learnt from one task to other related tasks have been proven helpful [30]. In the context of deep learning, fine-tuning a deep network pre-trained on the ImageNet or Places dataset is a common strategy to learn taskspecific deep features.This strategy is considered a simple transfer learning technique for deep learning. However, since the ratio between the number of learnable parameters and the number of training samples still remains the same, fine-tuning needs to be terminated after a relatively small number of iterations; otherwise, overfitting still occurs.</p></blockquote><ul><li>利用迁移学习的问题：源域有足够的样本和标记，目标域只有少量样本和标记（或者有大量样本，但是标记很少，甚至没有标记），源域的样本和目标域的样本分布并不相同，有一定的相关性。</li></ul><blockquote><p>The original learning task without sufficient training data is called the target learning task, $\mathcal T_t$. To boost its performance, the target learning task is teamed up with another learning task with rich training data. The latter is called the source learning task, $\mathcal T_s$. Suppose the source learning task has a large-scale training set $\mathcal D_s$, and the target learning task has a small-scale training set $\mathcal D_t$.</p></blockquote><ul><li>文章的核心想法就是，<strong>从源域训练集中挑选一些样本</strong>，这些样本的<strong>低维特征与目标域很相似</strong>，然后将源域挑选出的样本与目标域的样本放在一起，进行<strong>jointly fine-tuning</strong>。这样做的逻辑是，如果把源域中的所有样本拿来做 fine-tuning，源域中与目标域中不相似的样本会干扰目标域特征的学习。</li></ul><blockquote><p>Our core idea is to identify a subset of training images from $\mathcal D_s$ whose low-level characteristics are similar to those from $\mathcal D_t$, and then jointly fine-tune a shared set of convolutional layers for both source and target learning tasks. The source learning task is fine-tuned using the selected training images only. Hence, this process is called selective joint fine-tuning. The rationale behind this is that the unique low-level characteristics of the images from $\mathcal D_t$ might be overwhelmed if all images from $\mathcal D_s$ were taken as training samples for the source learning task.</p></blockquote><ul><li>如何选择低维特征：使用线性或非线性滤波器组的响应来定义在低维特征上的相似度。<strong>Gabor滤波器</strong>构成线性滤波器组，<strong>预训练CNN的某些层的完整内核集</strong>构成非线性滤波器组。作者使用滤波器组响应的直方图作为图像描述符来搜索具有相似低维特征的图像。</li></ul><blockquote><p>Since kernels followed with nonlinear activation in a deep convolutional neural network (CNN) are actually nonlinear spatial filters, to find sufficient data for training high-quality kernels, we use the responses from existing linear or nonlinear filter banks to define similarity in low-level characteristics. Gabor filters [28] form an example of a linear filter bank, and the complete set of kernels from certain layers of a pretrained CNN form an example of a nonlinear filter bank. We use histograms of filter bank responses as image descriptors to search for images with similar low-level characteristics.</p></blockquote><ul><li>为什么根据低维特征来选择图片：1、较低的卷积层构成了整个卷积网络的基础。2、具有相似低维特征的图像可具有非常不同的高维语义内容。</li></ul><blockquote><p>First, low-level characteristics are extracted by kernels in the lower convolutional layers of a deep network. These lower convolutional layers form the foundation of an entire network, and the quality of features extracted by these layers determines the quality of features at higher levels of the deep network. Sufficient training images sharing similar low-level characteristics could strength the kernels in these layers. Second, images with similar low-level characteristics could have very different high-level semantic contents. Therefore, searching for images using low-level characteristics has less restrictions and can return much more training images than using high-level semantic contents.</p></blockquote><ul><li>作者提出的 source-target selective joint fine-tuning scheme 的优越性：1、防止很快过拟合。2、共享卷积层的内核训练更加鲁棒性，产生高判别特征。</li></ul><blockquote><p>First, since convolutional layers are shared between the two learning tasks, the selected training samples for the source learning task prevent the deep network from overfitting quickly. Second, since the selected training samples for the source learning task share similar lowlevel characteristics as those from the target learning task, kernels in their shared convolutional layers can be trained more robustly to generate highly discriminative features for the target learning task.</p></blockquote><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><ul><li><p>卷积神经网络相关<br><a href="https://arxiv.org/abs/1410.0736" target="_blank" rel="noopener">Hierarchical deep convolutional neural networks for large scale visual recognition.</a></p></li><li><p>特征提取、Fine-tuning 相关<br><a href="https://arxiv.org/abs/1411.1792" target="_blank" rel="noopener">How transferable are features in deep neural networks?.</a></p></li><li><p>迁移学习</p><ol><li><p><a href="https://arxiv.org/abs/1512.07928" target="_blank" rel="noopener">Learning transferrable knowledge for semantic segmentation with deep convolutional neural network.</a></p></li><li><p><a href="https://people.eecs.berkeley.edu/~jhoffman/papers/Tzeng_ICCV2015.pdf" target="_blank" rel="noopener">Simultaneous deep transfer across domains and tasks.</a></p></li><li><p><a href="https://arxiv.org/abs/1412.0035" target="_blank" rel="noopener">Understanding Deep Image Representations by Inverting Them.</a></p></li></ol></li></ul><h1 id="Selective-Joint-Fine-tuning"><a href="#Selective-Joint-Fine-tuning" class="headerlink" title="Selective Joint Fine-tuning"></a>Selective Joint Fine-tuning</h1><p><img src="/assets/blogImg/sjft.png" alt="sjft"></p><ol><li>选择 <strong>source domain</strong>：ImageNet ILSVRC, Places, and MS COCO。</li><li>选择低维特征： Gabor filter 和 kernels in the convolutional layers of AlexNet pre-trained on ImageNet，然后计算它的 histograms作为 descriptor。</li><li>选择网络结构：AlexNet， VGG， ResNet，文章用的是 ResNet，可以看下这篇论文 <a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a> 了解一下。</li><li>源域的问题和目标域的问题是各自的 cost function （两个 cost function 是同等的权重？是同时更新的还是迭代更新的？）。</li></ol><p style="color:#ff0000;">接下来是重点</p><ul><li>(Filter Bank) Gabor filter： 4 scales， 6个direction， 实部虚部分开，总共48个Gabor filter。</li></ul><blockquote><p>For each of the real and imaginary parts, we use 24 convolutional kernels with 4 scales and 6 orientations. Thus there are 48 Gabor filters in total.</p></blockquote><ul><li>(Filter Bank) kernels in convolutional layers： 利用 AlexNet pre-trained on  ImageNet的第一层和第二层的所有 kernel。</li></ul><blockquote><p>In practice, we use all kernels (and their following nonlinear activation) from the first and second convolutional layers of AlexNet pre-trained on ImageNet as our second choice of a filter bank.</p></blockquote><ul><li>Image Descriptor： 对每个 response map，计算目标域中的最大值和最小值，然后在最大和最小值直接划分许多 bin，bin 的 width 是不固定的，目的是为了让每个 bin 基本上都能落入一样多的 pixel (防止了大量的pixel 落入同一个 bin)。将一幅图所有的 response map 的 histogram 叠在一起构成特征向量，作为 descriptor。</li></ul><blockquote><p>Let $\mathbb C_i(m, n)$ denote the response map to the $i$-th convolutional kernel or Gabor filter in our filter bank, and $\phi_i$ its histogram. To obtain more discriminative histogram features, we first obtain the upper bound $h^u_i$ and lower bound $h^l_i$ of the $i$-th response map by scanning the entire target domain $\mathcal D_t$. Then the interval $h^l_i$, $h^u_i$ is divided into a set of small bins. We adaptively set the width of every histogram bin so that each of them contains a roughly equal percentage of pixels. In this manner, we can avoid a large percentage of pixels falling into the same bin. We concatenate the histograms of all filter response maps to form a feature vector, $\phi^k = \left\{\phi_1,\phi_2,,\phi_D\right\}$, for image $x_k$.</p></blockquote><ul><li>Nearest Neigh bor Ranking： convolutional layer 每一层的的 kernel 都不同，因此对 kernel 需要用每一层总的 kernel 数目进行归一化。</li></ul><blockquote><p>To ensure equal weighting among different convolutional layers during nearest neighbor search, each histogram of kernel responses is normalized by the total number of kernels in the corresponding layer.</p></blockquote><ul><li><p>Hard samples in the target domain：对 hard samples 应该选择更多的 nearest neighbor。文章中使用了迭代的方法，计算 target samples 在第 m 次迭代后，被分为某一类的概率值的确定性，这个确定性用信息熵描述。对于难分的样本，增加 nearest neighbor 的方法如下：</p><ul><li><p>如果预测标记与真实标记不同， 那么增加其 nearest neighbor，增加$4\mathcal K_0$个 nearest neighbor。</p></li><li><p>如果预测标记与真实标记相同，但是属于难分样本，增加 $2\mathcal K_0$ 个 nearest neighbor。</p></li><li><p>如果预测标记与真实标记相同，不属于难分样本，不增加 nearest neighbor。</p></li><li><p><strong>$\mathcal K_0$ 是初始给每个 target sample 选择 nearest neighbor 的数目。</strong></p></li></ul></li></ul><h1 id="实验相关"><a href="#实验相关" class="headerlink" title="实验相关"></a>实验相关</h1><ul><li><p>数据集</p><p>Large-scale image datasets, such as the <a href="https://arxiv.org/abs/1409.0575" target="_blank" rel="noopener">ImageNet ILSVRC dataset</a>, <a href="http://places.csail.mit.edu/places_NIPS14.pdf" target="_blank" rel="noopener">Places</a>, and <a href="https://arxiv.org/abs/1405.0312" target="_blank" rel="noopener">MS COCO</a></p></li><li><p>参数设置</p><blockquote><p>Every mini-batch can include 20 224×224 images using a modified implementation of the residual network. We include randomly chosen samples from the target domain in a mini-batch. Then for each of the chosen target sample, we further include one of its retrieved nearest neighbors from the source domain in the same mini-batch. We set the iter size to 10 for each iteration in Caffe [17]. The momentum parameter is set to 0.9 and the weight decay is 0.0001 in SGD. During selective joint fine-tuning, the learning rate starts from 0.01 and is divided by 10 after every 2400—5000 iterations in all the experiments. Most of the experiments can finish in 16000 iterations.</p></blockquote></li><li><p>source domain 至少需要200,000张 retrieved images，照片太少容易过拟合。而且$\mathcal K_0$设置的太大也会造成学习表现急剧下降。</p></li><li><p>作者在 <strong>Fine-grained Object Recognition</strong>、<strong>General Object Recognition</strong> 以及 <strong>Scene Classification</strong> 任务上表现都很不错，而且当每个类别的目标训练样本较少时，训练效果会提升。这是因为目标样本的多样性需要源域更多样本的支持。</p></li><li><p>作者还做了 <strong>Ablation Study</strong>：1、不用 fine-tuning，取而代之一个只用目标域，一个只用 select joint training，然后从头开始训练。结果是后者更佳，但仍然是不如 fine-tuning pre-trained networks，这是因为要从头训练神经网路，样本还是太少。2、不从源域中挑选训练样本，而是使用所有的样本。结果是使用所有样本效果变差，这说明使用更少但是更相关的源域样本效果会更好。3、不从源域中挑选训练样本，而是随机使用样本，效果变差。4、对于目标域的 hard training samples 不使用上面的迭代方法，而是对所有样本都使用同样的$\mathcal K_0$，效果变差。5、用 Gabor filter bank 代替 AlexNet pre-trained on  ImageNet的第一层和第二层的所有 kernel，效果变差。说明从不同数据集学习到的滤波器比纯统计滤波器更有威力。6、去掉 源域，不用想效果肯定变差。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1702.08690&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017_CVPR_Borrowing treasures from the wealthy: deep transfer learning through selective joint fine-tuning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇论文发表于CVPR2017，作者为香港大学的 Weifeng Guo 和 Yizhou Yu，它主要想解决的是传统神经网络训练方法需要大量样本的局限。作者提出了一个叫做 Selective joint fine-tuning 的迁移学习方法，也就是目标任务的标记样本少，但是有一个源域有大量的标记样本。从源域训练集中挑选一些样本，这些样本的低维特征与目标域很相似，然后将源域挑选出的样本与目标域的样本放在一起，进行jointly fine-tuning。结果证明，这种做法是很有效果的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小样本深度学习" scheme="//georgeju95.github.io/tags/%E5%B0%8F%E6%A0%B7%E6%9C%AC%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="//georgeju95.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="paper" scheme="//georgeju95.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>Docker + typecho 建立个人博客的一点总结</title>
    <link href="//georgeju95.github.io/2019/12/12/2019-12-11-ECS-blog/"/>
    <id>//georgeju95.github.io/2019/12/12/2019-12-11-ECS-blog/</id>
    <published>2019-12-12T11:03:00.000Z</published>
    <updated>2023-08-29T18:58:12.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li><p>购买服务器，<a href="https://oneinstack.com/docs/securitygroup/" target="_blank" rel="noopener">添加安全组端口设置</a>，购买域名，并且解析好域名到服务器IP，备案域名（国内服务器一定要做，不备案的话只能暂时直接用 IP 访问）。<a href="https://help.aliyun.com/knowledge_detail/39783.html?spm=5176.200122.n2.5.77812f5bcoH75b" target="_blank" rel="noopener">参考阿里云官方文档</a>、网站无法访问的<a href="https://help.aliyun.com/knowledge_detail/36898.html" target="_blank" rel="noopener">原因</a>。</p></li><li><p><mark>不想折腾的话，直接搬运这个 <a href="https://www.v2ex.com/t/385634" target="_blank" rel="noopener">模板</a> 即可</mark>（不要弄阿里的免费ssl ，很容易出问题，取而代之用我下面提到的 Let‘s Encrypt SSL证书）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 当前在 web 文件夹下</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/typecho/typecho</span><br><span class="line">// 只能把 typecho 文件夹下的非文件夹拷贝过来</span><br><span class="line">cp typecho/* .</span><br><span class="line">// 移动文件夹（一定要在当前目录移动）</span><br><span class="line"><span class="built_in">cd</span> typecho/</span><br><span class="line">mv admin/ ..</span><br><span class="line">mv install/ ..</span><br><span class="line">mv tools/ ..</span><br><span class="line">mv usr/ ..</span><br><span class="line">mv var/ ..</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf typecho/</span><br></pre></td></tr></table></figure></li></ul><h2 id="想自己动手做一遍，参考以下内容："><a href="#想自己动手做一遍，参考以下内容：" class="headerlink" title="想自己动手做一遍，参考以下内容："></a>想自己动手做一遍，参考以下内容：</h2><a id="more"></a><ul><li><p>参考<a href="https://www.jianshu.com/p/a4692f1e3208" target="_blank" rel="noopener">使用Docker创建Let‘s Encrypt SSL证书</a>，配置免费证书服务。如果要使用 cron 服务安装参考 <a href="https://blog.csdn.net/longgeaisisi/article/details/90477975" target="_blank" rel="noopener">这篇</a> 和 第 <a href="https://www.wxvoid.com/index.php/archives/16/" target="_blank" rel="noopener">3</a> 篇。</p></li><li><p>准备好远程连接和文件传输工具，Windows下可以使用 <a href="https://putty.org/" target="_blank" rel="noopener">Putty</a> ，传输文件参考 <a href="https://jingyan.baidu.com/article/d169e18658995a436611d8ee.html" target="_blank" rel="noopener">Here</a></p></li><li><p>服务器（Ubuntu）上<mark>安装 Docker相关工具</mark>，参考 github上的Docker<a href="https://docker_practice.gitee.io/zh-cn/install/ubuntu.html" target="_blank" rel="noopener">教程</a>，强烈建议<a href="http://get.daocloud.io/" target="_blank" rel="noopener">使用国内镜像加速</a>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 执行完后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。</span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line">// 启动 Docker CE</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">// Docker Compose 存放在Git Hub，不太稳定，使用国内镜像</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">// 国内镜像源加速</span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line">// 修改后重启服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>由于官方的 PHP 镜像中没有安装 pdo_mysql 扩展，因此我们需要自行构建一个带有 pdo_mysql 的 PHP 镜像，使用 Dockerfile 进行构建：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 编写 Dockfile 并保存</span><br><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>.<span class="number">3</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-install pdo_mysql</span></span><br><span class="line"></span><br><span class="line">// 在 Dockerfile 目录构建镜像</span><br><span class="line">docker build -t scofieldpeng/php:<span class="number">7.2</span>.<span class="number">3</span>-fpm .</span><br></pre></td></tr></table></figure></li><li><p>准备下面文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app文件夹下</span></span><br><span class="line">- docker-compose.yml</span><br><span class="line">- mysql(mysql文件夹，用来存放mysql数据，方便后期导出）</span><br><span class="line">- mysql.env（mysql镜像的环境)</span><br><span class="line">- typecho.conf(nginx配置文件)</span><br><span class="line">- typecho(typecho的安装文件，github下下载即可，注意最新的正式版有安装问题，直接从master分支下拉取)</span><br><span class="line">- ssl.config (https证书配置文件)</span><br><span class="line"></span><br><span class="line">mkdir mysql</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/typecho/typecho</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ssl.config</span><br><span class="line">// 填入以下内容，注意修改为自己的域名。（前面已经获得了证书，并知道了名字和位置）</span><br><span class="line">ssl_certificate /etc/letsencrypt/live/你的域名/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/你的域名/privkey.pem;</span><br><span class="line">ssl_session_cache shared:SSL:1m;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vim typecho.conf</span><br><span class="line">// 填入以下内容，注意修改</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 reuseport;</span><br><span class="line">    server_name 域名 子域名;</span><br><span class="line">    root /app;</span><br><span class="line">    index index.php;</span><br><span class="line">    include /etc/nginx/conf.d/ssl.config;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/typecho_access.log  main;</span><br><span class="line">    <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        rewrite ^(.*)$ /index.php<span class="variable">$1</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.php(\/.*)*$ &#123;</span><br><span class="line">       include        fastcgi_params;</span><br><span class="line">       fastcgi_param  PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">       fastcgi_param  PATH_TRANSLATED <span class="variable">$document_root</span><span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">       fastcgi_param  SCRIPT_NAME        <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">       fastcgi_param  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">       fastcgi_index  index.php;</span><br><span class="line"></span><br><span class="line">       fastcgi_pass   php-fpm:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    server_name  域名 子域名;</span><br><span class="line">    rewrite ^(.*) https://域名<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br><span class="line">// 填入以下内容</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.13.9-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"80:80"</span></span><br><span class="line">      - <span class="string">"443:443"</span></span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./typecho:/app</span><br><span class="line">      - ./typecho.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">      - logs:/var/<span class="built_in">log</span>/nginx</span><br><span class="line">      - ./ssl.config:/etc/nginx/conf.d/ssl.config</span><br><span class="line">      - /etc/letsencrypt:/etc/letsencrypt</span><br><span class="line">    links:</span><br><span class="line">      - php-fpm</span><br><span class="line">    depends_on:</span><br><span class="line">      - php-fpm</span><br><span class="line">  php-fpm:</span><br><span class="line">    image: scofieldpeng/php:7.2.3-fpm</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./typecho:/app</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7.21</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 127.0.0.1:13306:3306</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql</span><br><span class="line">      - logs:/var/logs/mysql</span><br><span class="line">    env_file:</span><br><span class="line">      - mysql.env</span><br><span class="line">volumes:</span><br><span class="line">  logs:</span><br></pre></td></tr></table></figure><p>最后配置一下数据库文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim mysql.env</span><br><span class="line">// 填入以下内容</span><br><span class="line"><span class="comment"># MySQL的root用户默认密码，这里自行更改</span></span><br><span class="line">MYSQL_ROOT_PASSWORD=123456</span><br><span class="line"><span class="comment"># MySQL镜像创建时自动创建的数据库名称</span></span><br><span class="line">MYSQL_DATABASE=typecho</span><br><span class="line"><span class="comment"># MySQL镜像创建时自动创建的用户名</span></span><br><span class="line">MYSQL_USER=typecho</span><br><span class="line"><span class="comment"># MySQL镜像创建时自动创建的用户密码</span></span><br><span class="line">MYSQL_PASSWORD=123456</span><br></pre></td></tr></table></figure></li><li><p>不出意外，大工告成。cd 到 app 目录下，执行第一个命令后，访问域名或 IP 就能看到 typecho 的页面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d  // 开启镜像和容器</span><br><span class="line">docker-compose down   // 关闭</span><br><span class="line">docker ps             // 查看运行的容器</span><br></pre></td></tr></table></figure></li></ul><h2 id="对不起，无法连接数据库"><a href="#对不起，无法连接数据库" class="headerlink" title="对不起，无法连接数据库"></a>对不起，无法连接数据库</h2><p>如果你也碰到了这个问题，然鹅已经初始化了数据库，也确认密码名称输入无误。下面检查加密方式，请参考 <a href="https://blog.fxcdev.com/archives/14.html" target="_blank" rel="noopener">mysql 改成旧版本的加密插件</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 进入容器内</span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;containerID-mysql&gt; /bin/bash</span><br><span class="line">// 如果要安装东西，容器内必须先更新源，换源提高速度</span><br><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">apt-get update </span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">输入密码</span><br><span class="line">use mysql;</span><br><span class="line">select user,plugin from user ;</span><br><span class="line">// 如果显示 mysql_native_password 就不用改，是别的问题。那么只能参考上面文章更改 install.php 去找问题了</span><br><span class="line">// 如果显示 caching_sha2_password 执行下面命令</span><br><span class="line">use mysql</span><br><span class="line">select user,host from user;</span><br><span class="line">// 会显示 % localhost 等，下面相应修改</span><br><span class="line">ALTER USER <span class="string">'typecho'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><h2 id="大功告成，以后可以直接迁移"><a href="#大功告成，以后可以直接迁移" class="headerlink" title="大功告成，以后可以直接迁移"></a>大功告成，以后可以直接迁移</h2><p>如果填完初始化参数，显示下面图像，我们就成功了</p><p><img src="/assets/blogImg/typecho.png" alt="typecho"></p><p><mark>把文件夹打包上传 github 吧 ~ 以后只用配置docker环境就可以直接迁移。</mark></p><p>当换了服务器需要重新部署，进行数据迁移</p><ol><li>Docker_LNMP 克隆到服务器，配置好 SSL。</li><li>备份原来博客的 usr 文件夹，上传覆盖新的服务器上的此文件夹。</li><li>数据库迁移<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 进入 mysql容器，备份 mysql 数据库</span><br><span class="line">docker exec -it &lt;containerID-mysql&gt; /bin/bash</span><br><span class="line">mysqldump -uroot -p --all-databases &gt; sqlfile.sql</span><br><span class="line">// 由于容器和服务器实际地址不对应，退出容器后到服务器搜索备份文件</span><br><span class="line">exit</span><br><span class="line">find / -name &quot;sqlfile.sql&quot;</span><br><span class="line"></span><br><span class="line">// 找到后放到新服务器的 mysql 文件夹下，因为挂载宿主机和容器的目录映射是./mysql:/var/lib/mysql</span><br><span class="line">// 进入新服务器 mysql 容器，注入 mysql数据库</span><br><span class="line">docker exec -it &lt;containerID-mysql&gt; /bin/bash</span><br><span class="line">cd /var/lib/mysql</span><br><span class="line">mysql -uroot -p &lt;sqlfile.sql</span><br></pre></td></tr></table></figure></li></ol><p><mark>docker 下的 mysql 进行数据注入，当使用 docker-compose 重启后会出现问题，暂时未解决</mark></p><h2 id="备案处理"><a href="#备案处理" class="headerlink" title="备案处理"></a>备案处理</h2><p>当有了备案号后，按照<a href="https://help.aliyun.com/noticelist/articleid/20004987.html?&msctype=email&mscareaid=cn&mscsiteid=cn&mscmsgid=4250120010201031044&&spm=a2c4k.12424349.zh-cnc.12&" target="_blank" rel="noopener">《非经营性互联网信息服务备案管理办法》</a>要求 ，在您的网站首页底部中间位置，放置您的备案号并链接至 “<a href="http://www.beian.miit.gov.cn/&quot;" target="_blank" rel="noopener">http://www.beian.miit.gov.cn/&quot;</a> 。例如 “京ICP备999999号”（此备案号为例子，请您一定更换成自己的备案号）。参考<a href="https://juejin.im/post/5ca4aa5d6fb9a05e5b2acf37" target="_blank" rel="noopener">这篇文章</a></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="https://pjf.name/blogs/install-typecho-by-docker.html" target="_blank" rel="noopener">docker-compose 安装 typecho</a></li><li><a href="https://www.jianshu.com/p/a4692f1e3208" target="_blank" rel="noopener">HTTPs setup - Certbot + Docker + Nginx</a></li><li><a href="https://segmentfault.com/a/1190000005797776" target="_blank" rel="noopener">在Nginx上使用CertBot签名</a></li><li><a href="https://blog.csdn.net/tornge/article/details/80975450" target="_blank" rel="noopener">续签Let’s Encrypt免费SSL证书</a></li><li><a href="https://segmentfault.com/a/1190000020606057" target="_blank" rel="noopener">CentOS 7 + Docker</a></li><li><a href="https://10.linuxstory.net/deploy-lets-encrypt-ssl-certificate-with-certbot/zh-tw/" target="_blank" rel="noopener">HTTPS 簡介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全證書詳細教程</a></li><li><a href="https://naturepi.com/2018/08/ssl-cert-letsencrypt/" target="_blank" rel="noopener">使用Docker创建Let‘s Encrypt SSL证书</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;购买服务器，&lt;a href=&quot;https://oneinstack.com/docs/securitygroup/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;添加安全组端口设置&lt;/a&gt;，购买域名，并且解析好域名到服务器IP，备案域名（国内服务器一定要做，不备案的话只能暂时直接用 IP 访问）。&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/39783.html?spm=5176.200122.n2.5.77812f5bcoH75b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考阿里云官方文档&lt;/a&gt;、网站无法访问的&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/36898.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原因&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;mark&gt;不想折腾的话，直接搬运这个 &lt;a href=&quot;https://www.v2ex.com/t/385634&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;模板&lt;/a&gt; 即可&lt;/mark&gt;（不要弄阿里的免费ssl ，很容易出问题，取而代之用我下面提到的 Let‘s Encrypt SSL证书）。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 当前在 web 文件夹下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b master https://github.com/typecho/typecho&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 只能把 typecho 文件夹下的非文件夹拷贝过来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp typecho/* .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 移动文件夹（一定要在当前目录移动）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; typecho/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv admin/ ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv install/ ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv tools/ ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv usr/ ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv var/ ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf typecho/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;想自己动手做一遍，参考以下内容：&quot;&gt;&lt;a href=&quot;#想自己动手做一遍，参考以下内容：&quot; class=&quot;headerlink&quot; title=&quot;想自己动手做一遍，参考以下内容：&quot;&gt;&lt;/a&gt;想自己动手做一遍，参考以下内容：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="typecho" scheme="//georgeju95.github.io/tags/typecho/"/>
    
  </entry>
  
  <entry>
    <title>字符串、列表、元组、集合、字典</title>
    <link href="//georgeju95.github.io/2019/12/06/2019-12-06-Python-Learning-Day1/"/>
    <id>//georgeju95.github.io/2019/12/06/2019-12-06-Python-Learning-Day1/</id>
    <published>2019-12-06T10:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>复数类型，不是常用数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">print(type(c)) <span class="comment"># &lt;class 'complex'&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>身份运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">print(flag1 <span class="keyword">is</span> <span class="literal">True</span>) <span class="comment"># True</span></span><br><span class="line">print(flag2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>模块化管理函数</p><ul><li><p>Python<strong>没有函数重载的概念</strong>，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p></li><li><p><strong>在不同的模块中可以有同名的函数</strong>，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">【module1.py】</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world!'</span>)</span><br><span class="line">【module2.py】</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye, world!'</span>)</span><br><span class="line">【test.py】</span><br><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>__name__是Python中一个隐含的变量它代表了模块的名字，<strong>只有被Python解释器直接执行的模块的名字才是__main__</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">【module3.py】</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'call foo()'</span>)</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">'call bar()'</span>)</span><br><span class="line">    bar()</span><br><span class="line">【test.py】</span><br><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main_</span></span><br><span class="line"><span class="comment"># 把上面那串代码放到test执行模块中才正确，即</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     print('call foo()')</span></span><br><span class="line"><span class="comment">#     module3.foo()</span></span><br><span class="line"><span class="comment">#     print('call bar()')</span></span><br><span class="line"><span class="comment">#     module3.bar()</span></span><br></pre></td></tr></table></figure></li><li><p>如果不希望字符串中的<code>\</code>表示转义，在字符串的最前面加上字母<code>r</code>来加以说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'\'hello, world!\''</span></span><br><span class="line">s2 = <span class="string">'\n\\hello, world!\\\n'</span></span><br><span class="line">print(s1, s2, end=<span class="string">''</span>)  </span><br><span class="line"><span class="comment"># 'hello, world!' </span></span><br><span class="line"><span class="comment"># \hello, world!\</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">r'\'hello, world!\''</span></span><br><span class="line">s2 = <span class="string">r'\n\\hello, world!\\\n'</span></span><br><span class="line">print(s1, s2, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># \'hello, world!\' \n\\hello, world!\\\n</span></span><br></pre></td></tr></table></figure></li><li><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'hello '</span> * <span class="number">3</span></span><br><span class="line">print(s1) <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">'world'</span></span><br><span class="line">s1 += s2</span><br><span class="line">print(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line">print(<span class="string">'ll'</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'good'</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">'abc123456'</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line">print(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line">print(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line">print(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line">print(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line">print(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line">print(str2[::<span class="number">-1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line">print(str2[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure></li><li><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'hello, world!'</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line">print(len(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line">print(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line">print(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line">print(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line">print(str1.find(<span class="string">'or'</span>)) <span class="comment"># 8</span></span><br><span class="line">print(str1.find(<span class="string">'shit'</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index('or'))</span></span><br><span class="line"><span class="comment"># print(str1.index('shit'))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line">print(str1.startswith(<span class="string">'He'</span>)) <span class="comment"># False</span></span><br><span class="line">print(str1.startswith(<span class="string">'hel'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line">print(str1.endswith(<span class="string">'!'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line">print(str1.center(<span class="number">50</span>, <span class="string">'*'</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line">print(str1.rjust(<span class="number">50</span>, <span class="string">' '</span>))</span><br><span class="line">str2 = <span class="string">'abc123456'</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line">print(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line">print(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line">print(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">'  jackfrued@126.com '</span></span><br><span class="line">print(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line">print(str3.strip())</span><br></pre></td></tr></table></figure></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>向列表中添加和删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line">print(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line">print(len(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line">print(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(len(list1) - <span class="number">1</span>)</span><br><span class="line">print(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line">print(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure></li><li><p>对列表的排序操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'zoo'</span>, <span class="string">'internationalization'</span>, <span class="string">'blueberry'</span>]</span><br><span class="line">list2 = sorted(list1)</span><br><span class="line"><span class="comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span></span><br><span class="line"><span class="comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span></span><br><span class="line">list3 = sorted(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span></span><br><span class="line">list4 = sorted(list1, key=len)</span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line">print(list4)</span><br><span class="line"><span class="comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span></span><br><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">[<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'zoo'</span>, <span class="string">'internationalization'</span>, <span class="string">'blueberry'</span>]</span><br><span class="line">[<span class="string">'apple'</span>, <span class="string">'blueberry'</span>, <span class="string">'internationalization'</span>, <span class="string">'orange'</span>, <span class="string">'zoo'</span>]</span><br><span class="line">[<span class="string">'zoo'</span>, <span class="string">'orange'</span>, <span class="string">'internationalization'</span>, <span class="string">'blueberry'</span>, <span class="string">'apple'</span>]</span><br><span class="line">[<span class="string">'zoo'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'blueberry'</span>, <span class="string">'internationalization'</span>]</span><br><span class="line">[<span class="string">'zoo'</span>, <span class="string">'orange'</span>, <span class="string">'internationalization'</span>, <span class="string">'blueberry'</span>, <span class="string">'apple'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="生成式和生成器语法"><a href="#生成式和生成器语法" class="headerlink" title="生成式和生成器语法"></a>生成式和生成器语法</h2><ul><li><p>生成式语法**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">print(f)</span><br><span class="line">f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABCDE'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'1234567'</span>]</span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line"><span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line">print(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数,4508</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line"><span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">print(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间,56</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure></li><li><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/斐波那契数列" target="_blank" rel="noopener">斐波拉切数列</a>的生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        print(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，<strong>不同之处在于元组的元素不能修改</strong>。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">t = (<span class="string">'骆昊'</span>, <span class="number">38</span>, <span class="literal">True</span>, <span class="string">'四川成都'</span>)</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># 获取元组中的元素</span></span><br><span class="line">print(t[<span class="number">0</span>])</span><br><span class="line">print(t[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> t:</span><br><span class="line">    print(member)</span><br><span class="line"><span class="comment"># 重新给元组赋值</span></span><br><span class="line"><span class="comment"># t[0] = '王大锤'  # TypeError</span></span><br><span class="line"><span class="comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span></span><br><span class="line">t = (<span class="string">'王大锤'</span>, <span class="number">20</span>, <span class="literal">True</span>, <span class="string">'云南昆明'</span>)</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">person = list(t)</span><br><span class="line">print(person)</span><br><span class="line"><span class="comment"># 列表是可以修改它的元素的</span></span><br><span class="line">person[<span class="number">0</span>] = <span class="string">'李小龙'</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="number">25</span></span><br><span class="line">print(person)</span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits_list = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits_tuple = tuple(fruits_list)</span><br><span class="line">print(fruits_tuple)</span><br></pre></td></tr></table></figure></li><li><p>有一个非常值得探讨的问题，<strong>我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢</strong>？</p><ul><li><p><strong>元组中的元素是无法修改的</strong>，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/多线程" target="_blank" rel="noopener">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</p></li><li><p><strong>元组在创建时间和占用的空间上面都优于列表</strong>。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的Windows系统上测试的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: %timeit [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="number">57.1</span> ns ± <span class="number">1.54</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: %timeit (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">8.82</span> ns ± <span class="number">0.146</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000000</span> loops each)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>集合，和数学上的集合一致，也有交集、并集、差集等运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合的字面量语法</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(set1)</span><br><span class="line">print(<span class="string">'Length ='</span>, len(set1))</span><br><span class="line"><span class="comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span></span><br><span class="line">set2 = set(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">set3 = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">print(set2, set3)</span><br><span class="line"><span class="comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># Length = 3</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125; &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30, 33, 35, 36, 39, 40, 42, 45, 48, 50, 51, 54, 55, 57, 60, 63, 65, 66, 69, 70, 72, 75, 78, 80, 81, 84, 85, 87, 90, 93, 95, 96, 99&#125;</span></span><br><span class="line"></span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line">print(set1, set2)</span><br><span class="line">print(set3.pop())</span><br><span class="line">print(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5&#125; &#123;1, 2, 3, 6, 7, 8, 9, 11, 12&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合的交集、并集、差集、对称差运算</span></span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line">print(set1 | set2)</span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line">print(set1 - set2)</span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line">print(set1 ^ set2)</span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line"><span class="comment"># 判断子集和超集</span></span><br><span class="line">print(set2 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line">print(set3 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set3.issubset(set1))</span></span><br><span class="line">print(set1 &gt;= set2)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br><span class="line">print(set1 &gt;= set3)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set3))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5, 6, 7, 8, 9, 11, 12&#125;</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，<strong>字典的每个元素都是由一个键和一个值组成的</strong>“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">scores = &#123;<span class="string">'骆昊'</span>: <span class="number">95</span>, <span class="string">'白元芳'</span>: <span class="number">78</span>, <span class="string">'狄仁杰'</span>: <span class="number">82</span>&#125;</span><br><span class="line">print(scores)</span><br><span class="line"><span class="comment"># 创建字典的构造器语法</span></span><br><span class="line">items1 = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 通过zip函数将两个序列压成字典</span></span><br><span class="line">items2 = dict(zip([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'123'</span>))</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line">print(items1, items2, items3)</span><br><span class="line"><span class="comment"># 通过键可以获取字典中对应的值</span></span><br><span class="line">print(scores[<span class="string">'骆昊'</span>])</span><br><span class="line">print(scores[<span class="string">'狄仁杰'</span>])</span><br><span class="line"><span class="comment"># 对字典中所有键值对进行遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;scores[key]&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">'白元芳'</span>] = <span class="number">65</span></span><br><span class="line">scores[<span class="string">'诸葛王朗'</span>] = <span class="number">71</span></span><br><span class="line">scores.update(冷面=<span class="number">67</span>, 方启鹤=<span class="number">85</span>)</span><br><span class="line">print(scores)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'武则天'</span> <span class="keyword">in</span> scores:</span><br><span class="line">    print(scores[<span class="string">'武则天'</span>])</span><br><span class="line">print(scores.get(<span class="string">'武则天'</span>))</span><br><span class="line"><span class="comment"># get方法也是通过键获取对应的值但是可以设置默认值</span></span><br><span class="line">print(scores.get(<span class="string">'武则天'</span>, <span class="number">60</span>))</span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.pop(<span class="string">'骆昊'</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">scores.clear()</span><br><span class="line">print(scores)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'骆昊': 95, '白元芳': 78, '狄仁杰': 82&#125;</span></span><br><span class="line"><span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3, 'four': 4&#125; &#123;'a': '1', 'b': '2', 'c': '3'&#125; # &#123;1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># 82</span></span><br><span class="line"><span class="comment"># 骆昊: 95</span></span><br><span class="line"><span class="comment"># 白元芳: 78</span></span><br><span class="line"><span class="comment"># 狄仁杰: 82</span></span><br><span class="line"><span class="comment"># &#123;'骆昊': 95, '白元芳': 65, '狄仁杰': 82, '诸葛王朗': 71, '冷面': 67, '方启鹤': 85&#125;</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 60</span></span><br><span class="line"><span class="comment"># ('方启鹤', 85)</span></span><br><span class="line"><span class="comment"># ('冷面', 67)</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;复数类型，不是常用数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;5j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(c)) &lt;span class=&quot;comment&quot;&gt;# &amp;lt;class &#39;complex&#39;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;身份运算符&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flag1 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag2 = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(flag1 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(flag2 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="//georgeju95.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java的一些基础：数组、方法、集合、IO等</title>
    <link href="//georgeju95.github.io/2019/11/08/Java-Learing-week-1/"/>
    <id>//georgeju95.github.io/2019/11/08/Java-Learing-week-1/</id>
    <published>2019-11-08T07:36:36.000Z</published>
    <updated>2023-08-29T18:58:12.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h2><ul><li><p>Eclipse快捷键</p><ul><li>main – Alt + / – 回车</li><li>syso – Alt + / – 回车</li><li>单行注释 ctrl + /，取消  ctrl + /</li><li>多行注释 ctrl + shift + /  取消 ctrl + shift + \</li><li>格式化，ctrl shift f  或者 右键–Source–Format</li><li>导包，方式1：自己打，方式2：点击左边错误标记，<strong>方式3</strong>：ctrl + shift + o</li></ul></li></ul><a id="more"></a><ul><li><p>字符串 ASCII码 </p><ul><li>‘A’  65</li><li>‘a’  97</li><li>‘0’  48</li></ul></li><li><p>字符串参与 + 运算，做的是<strong>字符串的拼接</strong></p><ul><li>a = 10; b = 20;</li><li>“hello” + a + b 即 hello1020</li><li>a + b “hello”    即 30hello</li></ul></li><li><p>扩展的赋值运算符（+=、-= ……），隐含了<strong>强制类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">s += <span class="number">1</span>;                 <span class="comment">// 如果改为普通的赋值运算 s = s + 1，则会报错</span></span><br><span class="line">System.out.println(s);  <span class="comment">// 输出2</span></span><br></pre></td></tr></table></figure></li><li><p>单 &amp; 和 &amp;&amp; 的区别之一，&amp;&amp; 有 <strong>短路效果</strong></p></li><li><p>键盘录入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Scanner获取键盘输入录入数据的步骤：</span></span><br><span class="line"><span class="comment"> * 1、导包</span></span><br><span class="line"><span class="comment"> * import java.util.Scanner;</span></span><br><span class="line"><span class="comment"> * 在一个类中顺序：package &gt; import &gt; class</span></span><br><span class="line"><span class="comment"> * 2、创建键盘录入对象</span></span><br><span class="line"><span class="comment"> * Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment"> * 3、接收数据</span></span><br><span class="line"><span class="comment"> * int i = sc.nextInt();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"Please input a int Num"</span>);</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h2><ul><li><p><strong>Random</strong>用于产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Random:用于产生随机数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用步骤：</span></span><br><span class="line"><span class="comment"> * A:导包</span></span><br><span class="line"><span class="comment"> * import java.util.Random;</span></span><br><span class="line"><span class="comment"> * B:创建对象</span></span><br><span class="line"><span class="comment"> * Random r = new Random();</span></span><br><span class="line"><span class="comment"> * C:获取随机数</span></span><br><span class="line"><span class="comment"> * int number = r.nextInt(10);</span></span><br><span class="line"><span class="comment"> * 获取数据的范围：[0,10) 包括0,不包括10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">10</span>; x++) &#123;</span><br><span class="line"><span class="comment">//获取随机数</span></span><br><span class="line"><span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"number:"</span>+number);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何获取1-100之间的随机数呢?</span></span><br><span class="line"><span class="comment">//int i = r.nextInt(100); //[0,99]</span></span><br><span class="line"><span class="keyword">int</span> i = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组初始化</p><ul><li>动态初始化    数据类型[] 数组名 = new 数据类型[数组长度];</li><li>静态初始化    数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, 元素3,…};</li></ul></li><li><p>Java中的内存分配：</p><ul><li><strong>栈</strong>（存储的是局部变量）<ul><li>使用完毕，立即回收</li></ul></li><li><strong>堆</strong>（存储的是new出来的东西，<strong>实体</strong>，<strong>对象</strong>）<ul><li>每一个对象都有<strong>地址值</strong></li><li>每一个对象的数据都有<strong>默认值</strong></li><li>使用完毕后，会在垃圾回收器空闲的时候回收</li><li>byte，short，int，long  0</li><li>float，double  0.0</li><li>char  ‘\u0000’</li><li>boolean  false</li><li>引用类型  null</li></ul></li><li><strong>方法区</strong>（面向对象）</li><li><strong>本地方法区</strong>（和系统相关）</li><li><strong>寄存器</strong>（给CPU使用）</li></ul></li><li><p>数组操作中两个常见小问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 两个常见小问题：</span></span><br><span class="line"><span class="comment"> * ArrayIndexOutOfBoundsException:数组索引越界异常</span></span><br><span class="line"><span class="comment"> * 产生的原因：我们访问了不存在的索引</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * NullPointerException:空指针异常</span></span><br><span class="line"><span class="comment"> * 产生的原因：数组已经不在指向堆内存的数据了，你还使用数组名去访问元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问数组元素，越界</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类型：类,接口,数组</span></span><br><span class="line"><span class="comment">//常量：空常量,null,是可以赋值给引用类型的</span></span><br><span class="line">arr = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//空指针异常</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_05;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二维数组：其实就是元素为一维数组的数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 定义格式：</span></span><br><span class="line"><span class="comment"> * A:数据类型[][] 数组名; (推荐的方式)</span></span><br><span class="line"><span class="comment"> * B:数据类型 数组名[][];</span></span><br><span class="line"><span class="comment"> * C:数据类型[] 数组名[];</span></span><br><span class="line"><span class="comment"> * 初始化：</span></span><br><span class="line"><span class="comment"> * A:动态初始化</span></span><br><span class="line"><span class="comment"> * 数据类型[][] 数组名 = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"> * m表示的是二维数组中一维数组的个数</span></span><br><span class="line"><span class="comment"> * n表示的是一维数组中的元素个数</span></span><br><span class="line"><span class="comment"> * B:静态初始化</span></span><br><span class="line"><span class="comment"> * 数据类型[][] 数组名 = new 数据类型[][]&#123;&#123;元素...&#125;,&#123;元素...&#125;,&#123;元素...&#125;,...&#125;;</span></span><br><span class="line"><span class="comment"> * 简化格式：</span></span><br><span class="line"><span class="comment"> * 数据类型[][] 数组名 = &#123;&#123;元素...&#125;,&#123;元素...&#125;,&#123;元素...&#125;,...&#125;;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二维数组名配合索引可以获取到每一个一维数组。</span></span><br><span class="line"><span class="comment"> * 每一个一维数组配合索引名可以获取到数组中的元素。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 假如我有一个二维数组：arr。</span></span><br><span class="line"><span class="comment"> * 我要从中获取一维数组：arr[索引]</span></span><br><span class="line"><span class="comment"> * 我要从中获取二维数组的元素：arr[索引][索引]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据类型[][] 数组名 = &#123;&#123;元素...&#125;,&#123;元素...&#125;,&#123;元素...&#125;,...&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr); <span class="comment">//[[I@1774b9b</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//[I@104c575</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何获取二维数组中的元素呢?</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="day-3"><a href="#day-3" class="headerlink" title="day 3"></a>day 3</h2><ul><li><p>方法重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方法重载：在同一个类中，出现了方法名相同的情况。</span></span><br><span class="line"><span class="comment"> * 方法重载的特点：</span></span><br><span class="line"><span class="comment"> * 方法名相同，参数列表不同。与返回值无关。</span></span><br><span class="line"><span class="comment"> * 参数列表不同：</span></span><br><span class="line"><span class="comment"> * 参数的个数不同</span></span><br><span class="line"><span class="comment"> * 参数对应的数据类型不同</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 在调用方法的时候，java虚拟机会通过参数列表的不同来区分同名的方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和方法</span></span><br><span class="line"><span class="keyword">int</span> result = sum(a,b);</span><br><span class="line">System.out.println(<span class="string">"result:"</span>+result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//求和方法</span></span><br><span class="line"><span class="comment">//int result2 = sum2(a,b,c);</span></span><br><span class="line"><span class="keyword">int</span> result2 = sum(a,b,c);</span><br><span class="line">System.out.println(<span class="string">"result2:"</span>+result2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能出现方法名相同，并且参数列表也相同的情况</span></span><br><span class="line"><span class="comment">//public static int sum(int x,int y) &#123;</span></span><br><span class="line"><span class="comment">//return x + y;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">sum</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三个数据的和</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static int sum2(int a,int b,int c) &#123;</span></span><br><span class="line"><span class="comment">return a + b + c;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两个数据的和方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="comment">//int c = a + b;</span></span><br><span class="line"><span class="comment">//return c;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>形式参数与实际参数</p><ul><li>如果方法参数类型是基本数据类型，形式参数的改变不影响实际参数</li><li>如果方法参数类型是引用数据类型，形式参数的改变直接影响实际参数</li></ul></li><li><p><strong>Eclipse 断点调试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、加断点，双击左边。</span><br><span class="line">2、Step Over F6</span><br><span class="line">看哪些区域</span><br><span class="line">代码区域：看程序的执行流程</span><br><span class="line">Debug区域：看程序的执行流程</span><br><span class="line">Variables：看变量的变化</span><br><span class="line">Console：看程序的输入和输出</span><br><span class="line">3、取消断点</span><br><span class="line">方法1：双击左边断点处</span><br><span class="line">方法2：Debug视图 -- 断点 -- 除去所有断点（或选择删除）</span><br></pre></td></tr></table></figure></li></ul><h2 id="day-4-String-和-StringBuilder"><a href="#day-4-String-和-StringBuilder" class="headerlink" title="day 4 String 和 StringBuilder"></a>day 4 String 和 StringBuilder</h2><p><img src="/assets/blogImg/compare.png" alt="compare"></p><ul><li><p>通过构造方法创建字符串对象是在堆内存，直接赋值方式创建对象是在方法区的常量池。</p></li><li><p>String类可以通过 length()和charAt() 方法遍历，也可以先toCharArray转换成字符数组，再利用属性 length 和数组下标遍历。</p></li></ul><p><img src="/assets/blogImg/concatenate.png" alt="caocatenate"></p><ul><li><p>如果对字符串进行拼操作，每次拼接，都会构建一个新的 String 对象，既耗时，又浪费空间。而StringBuilder就可以解决这个问题，因为它是<strong>可变的字符序列。也被称为字符串缓冲区类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加功能</span></span><br><span class="line"><span class="comment"> *public StringBuilder append(任意类型):添加数据，并返回自身对象</span></span><br><span class="line"><span class="comment"> * 反转功能</span></span><br><span class="line"><span class="comment"> *public StringBuilder reverse()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">//public StringBuilder append(任意类型)</span></span><br><span class="line"><span class="comment">//StringBuilder sb2 = sb.append("hello");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println("sb:"+sb);</span></span><br><span class="line"><span class="comment">System.out.println("sb2:"+sb2);</span></span><br><span class="line"><span class="comment">System.out.println(sb == sb2); //true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sb.append("hello");</span></span><br><span class="line"><span class="comment">sb.append("world");</span></span><br><span class="line"><span class="comment">sb.append(true);</span></span><br><span class="line"><span class="comment">sb.append(100);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链式编程</span></span><br><span class="line">sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="keyword">true</span>).append(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"sb:"</span>+sb);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public StringBuilder reverse()</span></span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(<span class="string">"sb:"</span>+sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>String 和 StringBuilder 的互相转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_03;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * StringBuilder和String的相互转换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * StringBuilder -- String</span></span><br><span class="line"><span class="comment"> * public String toString():通过toString()就可以实现把StringBuilder转成String</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * String -- StringBuilder</span></span><br><span class="line"><span class="comment"> * StringBuilder(String str):通过构造方法就可以实现把String转成StringBuilder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//StringBuilder -- String</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">sb.append("hello").append("world");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String s = sb.toString();</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String -- StringBuilder</span></span><br><span class="line">String s = <span class="string">"helloworld"</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="day-5-集合类"><a href="#day-5-集合类" class="headerlink" title="day 5 集合类"></a>day 5 集合类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 集合类的特点：</span></span><br><span class="line"><span class="comment"> * 长度可变。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ArrayList&lt;E&gt;:</span></span><br><span class="line"><span class="comment"> * 大小可变数组的实现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;E&gt;:是一种特殊的数据类型，泛型。</span></span><br><span class="line"><span class="comment"> * 怎么用呢?</span></span><br><span class="line"><span class="comment"> * 在出现E的地方我们使用引用数据类型替换即可</span></span><br><span class="line"><span class="comment"> * 举例：ArrayList&lt;String&gt;,ArrayList&lt;Student&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 构造方法：</span></span><br><span class="line"><span class="comment"> * ArrayList()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 添加元素：</span></span><br><span class="line"><span class="comment"> * public boolean add(E e):添加元素</span></span><br><span class="line"><span class="comment"> * public void add(int index,E element):在指定的索引处添加一个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span>  ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add(E e):添加元素</span></span><br><span class="line">array.add(<span class="string">"hello"</span>);</span><br><span class="line">array.add(<span class="string">"world"</span>);</span><br><span class="line">array.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add(int index,E element):在指定的索引处添加一个元素</span></span><br><span class="line"><span class="comment">//array.add(1, "android");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"array:"</span>+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取元素</span></span><br><span class="line"><span class="comment"> * public E get(int index):返回指定索引处的元素</span></span><br><span class="line"><span class="comment"> * 集合长度</span></span><br><span class="line"><span class="comment"> * public int size():返回集合中的元素的个数</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> * public boolean remove(Object o):删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="comment"> * public E remove(int index):删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment"> * 修改元素</span></span><br><span class="line"><span class="comment"> * public E set(int index,E element):修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">array.add(<span class="string">"hello"</span>);</span><br><span class="line">array.add(<span class="string">"world"</span>);</span><br><span class="line">array.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public E get(int index):返回指定索引处的元素</span></span><br><span class="line"><span class="comment">//System.out.println("get:"+array.get(0));</span></span><br><span class="line"><span class="comment">//System.out.println("get:"+array.get(1));</span></span><br><span class="line"><span class="comment">//System.out.println("get:"+array.get(2));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public int size():返回集合中的元素的个数</span></span><br><span class="line"><span class="comment">//System.out.println("size:"+array.size());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public boolean remove(Object o):删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="comment">//System.out.println("remove:"+array.remove("world"));//true</span></span><br><span class="line"><span class="comment">//System.out.println("remove:"+array.remove("world"));//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public E remove(int index):删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">//System.out.println("remove:"+array.remove(0));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public E set(int index,E element):修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line">System.out.println(<span class="string">"set:"</span>+array.set(<span class="number">1</span>, <span class="string">"android"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">System.out.println(<span class="string">"array:"</span>+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day-6-IO流"><a href="#day-6-IO流" class="headerlink" title="day 6 IO流"></a>day 6 IO流</h2><h4 id="基本输入输出流"><a href="#基本输入输出流" class="headerlink" title="基本输入输出流"></a>基本输入输出流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出流写数据的步骤：</span></span><br><span class="line"><span class="comment"> * A:创建输出流对象</span></span><br><span class="line"><span class="comment"> * B:调用输出流对象的写数据方法，并刷新缓冲区</span></span><br><span class="line"><span class="comment"> * C:释放资源</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 相对路径：相对当前项目而言的，在项目的根目录下(a.txt)</span></span><br><span class="line"><span class="comment"> * 绝对路径：以盘符开始的路径(d:\\a.txt)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * close()和flush()方法的区别：</span></span><br><span class="line"><span class="comment"> * flush():刷新缓冲区。流对象还可以继续使用。</span></span><br><span class="line"><span class="comment"> * close():先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输出流对象</span></span><br><span class="line"><span class="comment">//FileWriter fw = new FileWriter("d:\\a.txt");</span></span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用输出流对象的写数据方法，并刷新缓冲区</span></span><br><span class="line">fw.write(<span class="string">"helloworld"</span>);</span><br><span class="line">fw.flush();</span><br><span class="line">fw.write(<span class="string">"java"</span>);</span><br><span class="line">fw.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">fw.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Stream closed</span></span><br><span class="line"><span class="comment">//fw.write("javaee");</span></span><br><span class="line"><span class="comment">//fw.flush();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何实现数据的换行?</span></span><br><span class="line"><span class="comment"> * \n可以实现换行，但是windows系统自带的记事本打开并没有换行，这是为什么呢?因为windows识别的换行不是\n，而是\r\n</span></span><br><span class="line"><span class="comment"> * windows:\r\n</span></span><br><span class="line"><span class="comment"> * linux:\n</span></span><br><span class="line"><span class="comment"> * mac:\r</span></span><br><span class="line"><span class="comment"> * 如何实现数据的追加写入?</span></span><br><span class="line"><span class="comment"> * FileWriter(String fileName, boolean append)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输出流对象</span></span><br><span class="line"><span class="comment">//FileWriter fw = new FileWriter("c.txt");</span></span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"c.txt"</span>,<span class="keyword">true</span>); <span class="comment">//表示追加写入，默认是false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">10</span>; x++) &#123;</span><br><span class="line">fw.write(<span class="string">"hello"</span>+x);</span><br><span class="line">fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输入流读数据的步骤：</span></span><br><span class="line"><span class="comment"> * A:创建输入流对象</span></span><br><span class="line"><span class="comment"> * B:调用输入流对象的读数据方法</span></span><br><span class="line"><span class="comment"> * C:释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输入流对象</span></span><br><span class="line"><span class="comment">//FileReader fr = new FileReader("fr2.txt");</span></span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"FileWriterDemo.java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//调用输入流对象的读数据方法</span></span><br><span class="line"><span class="comment">//int read(char[] cbuf)：一次读取一个字符数组的数据，返回的是实际读取的字符个数</span></span><br><span class="line"><span class="comment">char[] chs = new char[5];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第一次读数据</span></span><br><span class="line"><span class="comment">int len = fr.read(chs);</span></span><br><span class="line"><span class="comment">System.out.println("len:"+len);</span></span><br><span class="line"><span class="comment">//System.out.println(new String(chs));</span></span><br><span class="line"><span class="comment">System.out.println(new String(chs,0,len));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第二次读数据</span></span><br><span class="line"><span class="comment">len = fr.read(chs);</span></span><br><span class="line"><span class="comment">System.out.println("len:"+len);</span></span><br><span class="line"><span class="comment">//System.out.println(new String(chs));</span></span><br><span class="line"><span class="comment">System.out.println(new String(chs,0,len));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第三次读数据,只读取了四个，上一次读取的第五个字符 r 还保留着</span></span><br><span class="line"><span class="comment">len = fr.read(chs);</span></span><br><span class="line"><span class="comment">System.out.println("len:"+len);</span></span><br><span class="line"><span class="comment">//不要第五个字符 r</span></span><br><span class="line"><span class="comment">System.out.println(new String(chs,0,len));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//我们发现读取代码的方式相似度很高，想用循环改进，但是不知道什么时候结束循环</span></span><br><span class="line"><span class="comment">len = fr.read(chs);</span></span><br><span class="line"><span class="comment">System.out.println("len:"+len);</span></span><br><span class="line"><span class="comment">len = fr.read(chs);</span></span><br><span class="line"><span class="comment">System.out.println("len:"+len);</span></span><br><span class="line"><span class="comment">//通过测试，我们知道，如果实际读取长度是-1的时候，说明没有数据了</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char[] chs = new char[5];</span></span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>]; <span class="comment">//这里可以是1024及其整数倍</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="comment">//1:fr.read(chs)</span></span><br><span class="line"><span class="comment">//2:len=fr.read(chs)</span></span><br><span class="line"><span class="comment">//3:len != -1</span></span><br><span class="line"><span class="keyword">while</span>((len=fr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println(new String(chs,0,len));</span></span><br><span class="line">System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">fr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/FileRead.png" alt="FileRead"></p><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BufferedWriter:将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 </span></span><br><span class="line"><span class="comment"> * BufferedReader:从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输出缓冲流对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BufferedWriter bw = new BufferedWriter(new FileWriter("bw.txt"));</span></span><br><span class="line"><span class="comment">bw.write("hello");</span></span><br><span class="line"><span class="comment">//bw.flush();</span></span><br><span class="line"><span class="comment">bw.close();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建输入缓冲流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"FileWriterDemo.java"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//一次读写一个字符</span></span><br><span class="line"><span class="comment">int ch;</span></span><br><span class="line"><span class="comment">while((ch=br.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一次读写一个字符数组</span></span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">br.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缓冲流的特殊功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 缓冲流的特殊功能：</span></span><br><span class="line"><span class="comment"> * BufferedWriter</span></span><br><span class="line"><span class="comment"> * void newLine():写一个换行符，这个换行符由系统决定</span></span><br><span class="line"><span class="comment"> * BufferedReader</span></span><br><span class="line"><span class="comment"> * String readLine():一次读取一行数据，但是不读取换行符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BufferedWriter bw = new BufferedWriter(new FileWriter("bw2.txt"));</span></span><br><span class="line"><span class="comment">for(int x=0; x&lt;10; x++) &#123;</span></span><br><span class="line"><span class="comment">bw.write("hello"+x);</span></span><br><span class="line"><span class="comment">//bw.write("\r\n");</span></span><br><span class="line"><span class="comment">bw.newLine();</span></span><br><span class="line"><span class="comment">bw.flush();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bw.close();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"br.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String line = br.readLine();</span></span><br><span class="line"><span class="comment">System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">line = br.readLine();</span></span><br><span class="line"><span class="comment">System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">line = br.readLine();</span></span><br><span class="line"><span class="comment">System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">line = br.readLine();</span></span><br><span class="line"><span class="comment">System.out.println(line);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="comment">//1:br.readLine()</span></span><br><span class="line"><span class="comment">//2:line=br.readLine()</span></span><br><span class="line"><span class="comment">//3:line != null</span></span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据源：</span></span><br><span class="line"><span class="comment"> * FileWriterDemo.java -- 读数据 -- FileReader -- 高效的读数据 -- BufferedReader</span></span><br><span class="line"><span class="comment"> * 目的地：</span></span><br><span class="line"><span class="comment"> * Copy.java -- 写数据 -- FileWriter -- 高效的写数据 -- BufferedWriter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输入缓冲流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"FileWriterDemo.java"</span>));</span><br><span class="line"><span class="comment">//创建输出缓冲流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"Copy.java"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//读写数据</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">bw.write(line);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">bw.close();</span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">【File to ArrayList】</span><br><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 把上一题的文本文件中的学生信息读取出来存储到集合中，然后遍历集合，在控制台输出</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * A:定义学生类</span></span><br><span class="line"><span class="comment"> * B:创建输入缓冲流对象</span></span><br><span class="line"><span class="comment"> * C:创建集合对象</span></span><br><span class="line"><span class="comment"> * D:读取文件数据，并把数据按照一定的格式进行分割赋值给学生对象，然后把学生对象作为元素存储到集合</span></span><br><span class="line"><span class="comment"> * heima001,向問天,30,北京</span></span><br><span class="line"><span class="comment"> * E:释放资源</span></span><br><span class="line"><span class="comment"> * F:遍历集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileToArrayListTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输入缓冲流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"array.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件数据，并把数据按照一定的格式进行分割赋值给学生对象，然后把学生对象作为元素存储到集合</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//分割字符串</span></span><br><span class="line">String[] strArray = line.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//创建学生对象并赋值</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setId(strArray[<span class="number">0</span>]);</span><br><span class="line">s.setName(strArray[<span class="number">1</span>]);</span><br><span class="line">s.setAge(strArray[<span class="number">2</span>]);</span><br><span class="line">s.setAddress(strArray[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//把学生对象作为元素存储到集合</span></span><br><span class="line">array.add(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">br.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">System.out.println(<span class="string">"学号\t\t姓名\t年龄\t居住地"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line">System.out.println(s.getId()+<span class="string">"\t"</span>+s.getName()+<span class="string">"\t"</span>+s.getAge()+<span class="string">"\t"</span>+s.getAddress());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">【ArrayList to File】</span><br><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 键盘录入3个学生信息(学号,姓名,年龄,居住地)存入集合。然后遍历集合把每一个学生信息存入文本文件(每一个学生信息为一行数据，自己定义分割标记)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * A:定义学生类</span></span><br><span class="line"><span class="comment"> * B:创建集合对象</span></span><br><span class="line"><span class="comment"> * C:写方法实现键盘录入学生信息，并把学生对象作为元素添加到集合</span></span><br><span class="line"><span class="comment"> * D:创建输出缓冲流对象</span></span><br><span class="line"><span class="comment"> * E:遍历集合,得到每一个学生信息，并把学生信息按照一定的格式写入文本文件</span></span><br><span class="line"><span class="comment"> * 举例：heima001,向问天,30,北京</span></span><br><span class="line"><span class="comment"> * F:释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToFileTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//写方法实现键盘录入学生信息，并把学生对象作为元素添加到集合</span></span><br><span class="line">addStudent(array);</span><br><span class="line">addStudent(array);</span><br><span class="line">addStudent(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建输出缓冲流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"array.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合,得到每一个学生信息，并把学生信息按照一定的格式写入文本文件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line"><span class="comment">//heima001,向问天,30,北京</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(s.getId()).append(<span class="string">","</span>).append(s.getName()).append(<span class="string">","</span>).append(s.getAge()).append(<span class="string">","</span>).append(s.getAddress());</span><br><span class="line"></span><br><span class="line">bw.write(sb.toString());</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了让id能够被访问到，我们就把id定义在了循环的外面</span></span><br><span class="line">String id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了让代码能够回到这里，用循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入学生学号："</span>);</span><br><span class="line"><span class="comment">//String id = sc.nextLine();</span></span><br><span class="line">id = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断学号有没有被人占用</span></span><br><span class="line"><span class="comment">//定义标记</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//遍历集合，得到每一个学生</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line"><span class="comment">//获取该学生的学号，和键盘录入的学号进行比较</span></span><br><span class="line"><span class="keyword">if</span>(s.getId().equals(id)) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>; <span class="comment">//说明学号被占用了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"你输入的学号已经被占用,请重新输入"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//结束循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">String name = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">String age = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生居住地："</span>);</span><br><span class="line">String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把学生对象作为元素添加到集合</span></span><br><span class="line">array.add(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给出提示</span></span><br><span class="line">System.out.println(<span class="string">"添加学生成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>学生系统，利用文件永久保存信息，利用集合进行增删改查</li></ul><p><img src="/assets/blogImg/Student.png" alt="StudentSystem"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是我的学生管理系统的主类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 步骤如下：</span></span><br><span class="line"><span class="comment"> * A:定义学生类</span></span><br><span class="line"><span class="comment"> * B:学生管理系统的主界面的代码编写</span></span><br><span class="line"><span class="comment"> * C:学生管理系统的查看所有学生的代码编写</span></span><br><span class="line"><span class="comment"> * D:学生管理系统的添加学生的代码编写</span></span><br><span class="line"><span class="comment"> * E:学生管理系统的删除学生的代码编写</span></span><br><span class="line"><span class="comment"> * F:学生管理系统的修改学生的代码编写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentManagerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//定义文件路径</span></span><br><span class="line">String fileName = <span class="string">"students.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了让程序能够回到这里来，我们使用循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//这是学生管理系统的主界面</span></span><br><span class="line">System.out.println(<span class="string">"--------欢迎来到学生管理系统--------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1 查看所有学生"</span>);</span><br><span class="line">System.out.println(<span class="string">"2 添加学生"</span>);</span><br><span class="line">System.out.println(<span class="string">"3 删除学生"</span>);</span><br><span class="line">System.out.println(<span class="string">"4 修改学生"</span>);</span><br><span class="line">System.out.println(<span class="string">"5 退出"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入你的选择："</span>);</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String choiceString = sc.nextLine();</span><br><span class="line"><span class="comment">//用switch语句实现选择</span></span><br><span class="line"><span class="keyword">switch</span>(choiceString) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line"><span class="comment">//查看所有学生</span></span><br><span class="line">findAllStudent(fileName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line"><span class="comment">//添加学生</span></span><br><span class="line">addStudent(fileName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line"><span class="comment">//删除学生</span></span><br><span class="line">deleteStudent(fileName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line"><span class="comment">//修改学生</span></span><br><span class="line">updateStudent(fileName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"谢谢你的使用"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>); <span class="comment">//JVM退出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从文件中读数据到集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(String fileName,ArrayList&lt;Student&gt; array)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输入缓冲流对象</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">String[] datas = line.split(<span class="string">","</span>);</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setId(datas[<span class="number">0</span>]);</span><br><span class="line">s.setName(datas[<span class="number">1</span>]);</span><br><span class="line">s.setAge(datas[<span class="number">2</span>]);</span><br><span class="line">s.setAddress(datas[<span class="number">3</span>]);</span><br><span class="line">array.add(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把集合中的数据写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(String fileName,ArrayList&lt;Student&gt; array)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建输出缓冲流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(fileName));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(s.getId()).append(<span class="string">","</span>).append(s.getName()).append(<span class="string">","</span>).append(s.getAge()).append(<span class="string">","</span>).append(s.getAddress());</span><br><span class="line"></span><br><span class="line">bw.write(sb.toString());</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"><span class="comment">//从文件中把数据读取到集合中</span></span><br><span class="line">readData(fileName, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学生的思路：键盘录入一个学号，到集合中去查找，看是否有学生使用的是该学号，如果有就修改该学生</span></span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入你要修改的学生的学号："</span>);</span><br><span class="line">String id = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个索引</span></span><br><span class="line"><span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line"><span class="comment">//获取每一个学生对象</span></span><br><span class="line">Student s = array.get(x);</span><br><span class="line"><span class="comment">//拿学生对象的学号和键盘录入的学号进行比较</span></span><br><span class="line"><span class="keyword">if</span>(s.getId().equals(id)) &#123;</span><br><span class="line">index = x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"不好意思,你要修改的学号对应的学生信息不存在,请回去重新你的选择"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入学生新姓名："</span>);</span><br><span class="line">String name = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生新年龄："</span>);</span><br><span class="line">String age = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生新居住地："</span>);</span><br><span class="line">String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改集合中的学生对象</span></span><br><span class="line">array.set(index, s);</span><br><span class="line"><span class="comment">//把集合中的数据重新写回到文件</span></span><br><span class="line">writeData(fileName, array);</span><br><span class="line"><span class="comment">//给出提示</span></span><br><span class="line">System.out.println(<span class="string">"修改学生成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"><span class="comment">//从文件中把数据读取到集合中</span></span><br><span class="line">readData(fileName, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除学生的思路：键盘录入一个学号，到集合中去查找，看是否有学生使用的是该学号，如果有就删除该学生</span></span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入你要删除的学生的学号："</span>);</span><br><span class="line">String id = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们必须给出学号不存在的时候的提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个索引</span></span><br><span class="line"><span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line"><span class="comment">//获取到每一个学生对象</span></span><br><span class="line">Student s = array.get(x);</span><br><span class="line"><span class="comment">//拿这个学生对象的学号和键盘录入的学号进行比较</span></span><br><span class="line"><span class="keyword">if</span>(s.getId().equals(id)) &#123;</span><br><span class="line">index = x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"不好意思,你要删除的学号对应的学生信息不存在,请回去重新你的选择"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">array.remove(index);</span><br><span class="line"><span class="comment">//把集合中的数据重新写回到文件</span></span><br><span class="line">writeData(fileName, array);</span><br><span class="line">System.out.println(<span class="string">"删除学生成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"><span class="comment">//从文件中把数据读取到集合中</span></span><br><span class="line">readData(fileName, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了让id能够被访问到，我们就把id定义在了循环的外面</span></span><br><span class="line">String id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了让代码能够回到这里，用循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入学生学号："</span>);</span><br><span class="line"><span class="comment">//String id = sc.nextLine();</span></span><br><span class="line">id = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断学号有没有被人占用</span></span><br><span class="line"><span class="comment">//定义标记</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//遍历集合，得到每一个学生</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line"><span class="comment">//获取该学生的学号，和键盘录入的学号进行比较</span></span><br><span class="line"><span class="keyword">if</span>(s.getId().equals(id)) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>; <span class="comment">//说明学号被占用了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"你输入的学号已经被占用,请重新输入"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//结束循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">String name = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">String age = sc.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入学生居住地："</span>);</span><br><span class="line">String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把学生对象作为元素添加到集合</span></span><br><span class="line">array.add(s);</span><br><span class="line"><span class="comment">//把集合中的数据重新写回到文件</span></span><br><span class="line">writeData(fileName, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给出提示</span></span><br><span class="line">System.out.println(<span class="string">"添加学生成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findAllStudent</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"><span class="comment">//从文件中把数据读取到集合中</span></span><br><span class="line">readData(fileName, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先来判断集合中是否有数据，如果没有数据，就给出提示，并让该方法不继续往下执行</span></span><br><span class="line"><span class="keyword">if</span>(array.size() == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"不好意思,目前没有学生信息可供查询,请回去重新选择你的操作"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//\t 其实就是一个tab键的位置</span></span><br><span class="line">System.out.println(<span class="string">"学号\t\t姓名\t年龄\t居住地"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s = array.get(x);</span><br><span class="line">System.out.println(s.getId()+<span class="string">"\t"</span>+s.getName()+<span class="string">"\t"</span>+s.getAge()+<span class="string">"\t"</span>+s.getAddress());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day-7-静态——与类相关"><a href="#day-7-静态——与类相关" class="headerlink" title="day 7 静态——与类相关"></a>day 7 静态——与类相关</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima_04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   Coder静态代码块执行 --- Coder构造代码块执行 --- Coder无参空构造执行</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   BlockTest静态代码块执行 --- BlockTest的主函数执行了 --- Coder静态代码块执行 --- Coder构造代码块执行 --- Coder无参空构造执行</span></span><br><span class="line"><span class="comment"> *   Coder构造代码块执行 --- Coder无参空构造执行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"BlockTest静态代码块执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"BlockTest构造代码块执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BlockTest无参构造执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BlockTest的主函数执行了"</span>);</span><br><span class="line">Coder c = <span class="keyword">new</span> Coder();</span><br><span class="line">Coder c2 = <span class="keyword">new</span> Coder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Coder静态代码块执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"Coder构造代码块执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Coder无参空构造执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态代码块在类创建的时候执行；构造代码块在 new 的时候执行，且先于构造方法执行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;day-1&quot;&gt;&lt;a href=&quot;#day-1&quot; class=&quot;headerlink&quot; title=&quot;day 1&quot;&gt;&lt;/a&gt;day 1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eclipse快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main – Alt + / – 回车&lt;/li&gt;
&lt;li&gt;syso – Alt + / – 回车&lt;/li&gt;
&lt;li&gt;单行注释 ctrl + /，取消  ctrl + /&lt;/li&gt;
&lt;li&gt;多行注释 ctrl + shift + /  取消 ctrl + shift + \&lt;/li&gt;
&lt;li&gt;格式化，ctrl shift f  或者 右键–Source–Format&lt;/li&gt;
&lt;li&gt;导包，方式1：自己打，方式2：点击左边错误标记，&lt;strong&gt;方式3&lt;/strong&gt;：ctrl + shift + o&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>开学一个多月以来的感想</title>
    <link href="//georgeju95.github.io/2019/10/14/2019-10-14-October-14-review/"/>
    <id>//georgeju95.github.io/2019/10/14/2019-10-14-October-14-review/</id>
    <published>2019-10-14T11:40:36.000Z</published>
    <updated>2023-08-29T18:58:12.341Z</updated>
    
    <content type="html"><![CDATA[<p>开学是9月1日，虽然我在8月1日左右就到了学校，因为我想赶快跟老师学点东西。第二次来到广州，广州来迎接我的是倾盆大雨，骑单车还摔了一跤（话说在学校没待满一个月，双膝盖挂彩233）。</p><a id="more"></a><p>每天看点看不懂的多视几何和SLAM，很快就迎来了正式开学 9月1号。</p><p>因为之前找过几个师兄了解过，知道算法的形势不好，于是我<mark>从8月中旬开始就每天看点 Java，现在想来一个多月也看了蛮多内容，还做了博客笔记</mark>（现在估计断了都有一个月了，要坚持啊）。</p><p>开学到现在，各种各样的杂事情做了一堆，参加了学生会，其实我现在感觉和我的性格格格不入。我属于有方向能沉下心做事情和学习的人，但同时我又是个方向感十分薄弱的人。</p><p>从10月11日开始了党课学习，前几天刚和老师说明自己不想做视觉三维方向，目前还不知道后续会怎样发展。</p><p>告诉我不要做算法的师兄自己一直坚持着算法，而我从考中山时的想做算法到开学后的想转开发，以及到现在想做公务员，我其实内心真的没有真心喜欢的事物。唯一喜欢的事情是跟别人探讨，祈祷别人能给我什么帮助，完全走错了方向嘛……（你的内心只有你了解，多关注自己，同时也要关注外部世界）</p><p>期间和 YX 探讨了 Clannad ，请他帮忙翻译了 <a href="https://music.163.com/#/song?id=29295284" target="_blank" rel="noopener">しあわせまだかい</a> 和 <a href="https://music.163.com/#/song?id=4898990" target="_blank" rel="noopener">ほっとけないよ</a> 。第二首我刚开始看到他的直译时确实感觉需要润色，缺了点什么东西，我知道这首歌需要点什么东西。于是寻求 WY  大佬帮忙润色，最后结果就是这个翻译，怎么说呢？<mark>我觉得做事情真的要深入下去，你也才能体会到些许乐趣。</mark></p><p>10月15日，政治课下课跟 LP 去西园吃饭，果然<mark>坚定努力才是一个男人最吸引人的特质</mark>，我记得那场<strong>考研经验分享会</strong>讲完后有位学弟跟我说，看到我的努力觉得他自己真的矫情。我很惭愧啊哈哈，我考研中山也没有坚持到最后，最近也逐渐要迷失自己。其实看看身边的人吧，LP、室友LC，都是极度自律的人，也让人看到自信和目标，多向他们学习！先把手头的事情做好，努力充实自己，相信未来的自己一定会感激自己！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开学是9月1日，虽然我在8月1日左右就到了学校，因为我想赶快跟老师学点东西。第二次来到广州，广州来迎接我的是倾盆大雨，骑单车还摔了一跤（话说在学校没待满一个月，双膝盖挂彩233）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感想" scheme="//georgeju95.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>学习过程中的一些感想</title>
    <link href="//georgeju95.github.io/2019/09/08/2019-09-08-some-of-my-experience/"/>
    <id>//georgeju95.github.io/2019/09/08/2019-09-08-some-of-my-experience/</id>
    <published>2019-09-08T11:40:36.000Z</published>
    <updated>2023-08-29T18:58:12.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用MarkDown记笔记要注意以下几点："><a href="#用MarkDown记笔记要注意以下几点：" class="headerlink" title="用MarkDown记笔记要注意以下几点："></a>用MarkDown记笔记要注意以下几点：</h1><ul><li>由于记笔记一般要求温故知新，所以<strong>不要记得太冗长</strong>。</li><li>为了通过目录快速定位，最好不要把标题目录取的很大；<strong>标题取得更细节一点</strong>，这样子更能快速地找到自己想要复习的知识点</li></ul><a id="more"></a><h1 id="思绪很乱，光是一昧地添加收藏是不行的"><a href="#思绪很乱，光是一昧地添加收藏是不行的" class="headerlink" title="思绪很乱，光是一昧地添加收藏是不行的"></a>思绪很乱，光是一昧地添加收藏是不行的</h1><ul><li>网络时代知识纷繁复杂，不需要看到啥都想去学，这样子反而会不知所措，最终什么也学不会。要<strong>根据长期或短期目标</strong>来学。</li><li>手机APP基本用不到的就删除，浏览器书签除了常用或备忘的，看完了删除即可。不要怕以后找不到某篇优秀的文章，百度(谷歌)是很强大的</li><li>沉下心来，拿起手头的作业开啃就是。</li><li>学技术一定要会编码实现，不要Copy别人的代码，<strong>一定要自己实现</strong></li><li><strong>让自己忙起来，坚持锻炼身体</strong>！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用MarkDown记笔记要注意以下几点：&quot;&gt;&lt;a href=&quot;#用MarkDown记笔记要注意以下几点：&quot; class=&quot;headerlink&quot; title=&quot;用MarkDown记笔记要注意以下几点：&quot;&gt;&lt;/a&gt;用MarkDown记笔记要注意以下几点：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;由于记笔记一般要求温故知新，所以&lt;strong&gt;不要记得太冗长&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为了通过目录快速定位，最好不要把标题目录取的很大；&lt;strong&gt;标题取得更细节一点&lt;/strong&gt;，这样子更能快速地找到自己想要复习的知识点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="感想" scheme="//georgeju95.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu折腾日记</title>
    <link href="//georgeju95.github.io/2019/09/04/2019-09-04-Ubuntu-used-dairymd/"/>
    <id>//georgeju95.github.io/2019/09/04/2019-09-04-Ubuntu-used-dairymd/</id>
    <published>2019-09-04T02:40:36.000Z</published>
    <updated>2023-08-29T18:58:12.340Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目前尽量选择 Ubuntu 16.04 而不是 Ubuntu 18.04, 安装18.04对于安装OpenCV等库非常容易出问题</strong><br><strong>如果是 AMD驱动 并且为了使用kinect做开发，最好使用 Ubuntu 14</strong>，原因后面会提到</p><h1 id="锐捷便捷启动"><a href="#锐捷便捷启动" class="headerlink" title="锐捷便捷启动"></a>锐捷便捷启动</h1><ul><li>准备好锐捷的Linux客户端，并确认自己的系统网卡型号，我的是eth0（如果<strong>ifconfig</strong>用不了，使用<strong>ip a</strong>或者<strong>sudo lshw -C network</strong>命令）</li><li>新建一个rj_login.sh脚本文件到客户端文件夹所在位置，开机执行脚本<strong>sudo sh rj_login.sh</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> rjsupplicant</span><br><span class="line">./rjsupplicant.sh -u 账号 -p 密码 -d 1 -n eth0 &amp;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="新系统首先要做的事情"><a href="#新系统首先要做的事情" class="headerlink" title="新系统首先要做的事情"></a>新系统首先要做的事情</h1><ul><li><p>Ubuntu16 自带的python 2.7和3.5没有pyvenv等包，最好是安装稳定的python最新版，并且设置python3指向python 3.7 参考<a href="https://www.cnblogs.com/yjlch1016/p/8641910.html" target="_blank" rel="noopener">包管理Python3.6</a>或者<a href="https://segmentfault.com/a/1190000018264955?utm_source=tag-newest" target="_blank" rel="noopener">源码Python3.7.5</a>。升级3.6后可能出现用图像化界面打不开终端的问题，参见<a href="https://www.cnblogs.com/anno-ymy/p/11362040.html" target="_blank" rel="noopener">终端问题</a></p></li><li><p>安装jdk11.0.5稳定版，见<a href="https://blog.csdn.net/weixin_37619439/article/details/88092089" target="_blank" rel="noopener">JDK 11.0.5</a></p></li><li><p>安装 Skype ： wget <a href="https://repo.skype.com/latest/skypeforlinux-64.deb" target="_blank" rel="noopener">https://repo.skype.com/latest/skypeforlinux-64.deb</a> &amp;&amp; sudo dpkg -i skypeforlinux-64.deb</p></li><li><p>如果有发现自己的<strong>屏幕分辨率</strong>不对劲（有黑边），一般不是驱动出了问题。在设置里面找找分辨率换一下，如果可选择的分辨率很少，可以参考 <a href="https://blog.csdn.net/ignoreyou/article/details/79488442" target="_blank" rel="noopener">这篇文章</a> 设置好自己电脑最适合的分别率。</p></li><li><p>安装好<strong>Chrome</strong>、<strong>搜狗输入法</strong>和<strong>Vim</strong>，我主要是参考这篇 <a href="https://blog.csdn.net/haeasringnar/article/details/81809040" target="_blank" rel="noopener">18.04</a>也可以参考这篇 <a href="https://blog.csdn.net/skange/article/details/81127575" target="_blank" rel="noopener">16.04</a>，关于<strong>vim</strong>的配置主要参考第二篇。<strong>护眼产品</strong>（包括f.lux、redshift和okular）参考 <a href="https://blog.csdn.net/u011092188/article/details/59169205" target="_blank" rel="noopener">redshift和okular</a> 和 <a href="https://blog.csdn.net/gatieme/article/details/62922164" target="_blank" rel="noopener">f.lux</a>。<strong>微信</strong>安装了<a href="http://www.ubuntukylin.com/applications/24-cn.html" target="_blank" rel="noopener">优麒麟</a>上的客户端，但和网页版一样显示此号不能登录网页版。<strong>QQ</strong>参考<a href="https://sourceforge.net/projects/wine-qq-tim/" target="_blank" rel="noopener">Appimage</a>，然后分别执行 chmod a+x <em>.AppImage ; ./</em>.AppImage (出现双击无反应情况。。)或者安装 <a href="https://blog.csdn.net/lzp_k2/article/details/94333704" target="_blank" rel="noopener">wineQQ2012</a>，需要安装<a href="https://blog.csdn.net/u013350783/article/details/90742468" target="_blank" rel="noopener">wine</a>。</p></li><li><p>Chrome需要同步，需要科学上网，请参考<a href="https://github.com/Turing2333/Detailed-tutorial-on-the-building-and-usage-of-SSR/blob/master/Instructions/Clients%20manual%20for%20each%20platform/Linux%20SSR%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E.txt" target="_blank" rel="noopener">方法2</a>。如果执行sudo npm install -g ssr-helper时报GERT_UNTRUSTED错误，这是因为ssl出了问题，执行<strong>npm config set strict-ssl false</strong>。此时的node版本可能较低，安装 <strong>n</strong> 升级node，分别执行 <strong>sudo npm install n -g</strong> 和 <strong>sudo n stable</strong>。关于账号获取，在github搜索<strong>new pac</strong>也许你会有新发现…</p></li><li><p>上述一切办妥，也开启了ssr服务，可能还是上不了Google。此时需要在Chrome里设置 &gt; 高级设置 &gt; 系统 &gt; 打开代理设置（Ubuntu会自动打开系统的 NetworkManager ），手动设置Chrome走ssr全局流量。这个时候有可能你会发现系统的NetworkManager失效。此时按一下步骤处理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先看networkmanager有没有安装</span></span><br><span class="line">dpkg -l | grep networkmanager </span><br><span class="line"><span class="comment"># 如果没有输出，就说明没有装。安装networkmanager</span></span><br><span class="line">sudo apt install networkmanager </span><br><span class="line"><span class="comment"># 如果有输出，则已安装，有可能是服务没启动， 启动服务 </span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetowrkManager </span><br><span class="line">sudo systemctl start NetowrkManager </span><br><span class="line"><span class="comment"># 还不行的话，还有可能是网卡关闭了。打开就是了</span></span><br><span class="line"><span class="comment"># 用以下命令临时打开NetworkManager</span></span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure><p>  解决了上述问题，进入NetworkManager。选择手动(Manual)，在 Socks Host 输入 127.0.0.1  1080，之后便可以同步Chrome账户。之后为了在Chrome中进入国内网站使用直连，进入国外网站使用代理。在NetworkManager中选择自动模式，地址填入 <a href="https://raw.githubusercontent.com/petronny/gfwlist2pac/master/gfwlist.pac" target="_blank" rel="noopener">https://raw.githubusercontent.com/petronny/gfwlist2pac/master/gfwlist.pac</a> 并且在Chrome中使用 SwitchOmega 插件使用系统代理模式。</p></li><li><p>使用 <strong>zsh</strong> 和 <strong>oh my zsh</strong> 使得自己的终端好看又方便，参考<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">Oh-My-Zsh</a> 和 <a href="https://segmentfault.com/a/1190000018093021" target="_blank" rel="noopener">插件</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh 和 oh my zsh(通过curl)</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用户主题和插件选项</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 更改主题。ZSH_THEME="robbyrussell" 改为 ZSH_THEME="ys"</span></span><br><span class="line"><span class="comment"># 更改插件设置,x命令解压一切文件，z命令快速跳转目录，google直接搜索内容。</span></span><br><span class="line"><span class="comment"># plugins=(git) 改为 plugins=(git z extract web-search zsh-syntax-highlighting zsh-autosuggestions)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新设置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把bash默认设置为zsh</span></span><br><span class="line">chsh -s /bin/zsh （重启生效）</span><br></pre></td></tr></table></figure></li><li><p>博客搬到新电脑</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库到本地</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GeorgeJu95/georgeju95.github.io</span><br><span class="line"><span class="comment"># 安装 hexo 并初始化</span></span><br><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">sudo npm install –no-bin-links  (这一步一定要在项目目录下)</span><br><span class="line">sudo npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>LeetCode项目搬运到新电脑</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装chrome 和 chromedriver</span></span><br><span class="line"><span class="comment"># https://chromedriver.storage.googleapis.com/index.html 下载对应chrome版本的chromedriver，之后依次执行</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GeorgeJu95/LeetCode_algorithm</span><br><span class="line"><span class="comment"># 在项目文件夹下创建config.cfg并粘贴以下内容</span></span><br><span class="line">[leetcode]</span><br><span class="line"></span><br><span class="line">username = LeviLiu</span><br><span class="line">password = xxxxxxx</span><br><span class="line">language = cpp,python,python3,java,javascript</span><br><span class="line">repo = https://github.com/GeorgeJu95/LeetCode_algorithm</span><br><span class="line">driverpath = /usr/<span class="built_in">local</span>/bin/chromedriver</span><br><span class="line">sudo apt-get install xvfb</span><br><span class="line"><span class="comment"># 到 chromedriver 所在文件夹</span></span><br><span class="line">sudo chmod +x chromedriver</span><br><span class="line">sudo mv -f chromedriver /usr/<span class="built_in">local</span>/share/chromedriver</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/<span class="built_in">local</span>/bin/chromedriver</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/bin/chromedriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后 参考 https://github.com/bonfy/leetcode 说明文档里的步骤</span></span><br><span class="line">sudo apt-get install python3-pip   (如果pip3没有安装的话)</span><br><span class="line"><span class="comment"># 最好不要升级 pip3 install --upgrade pip，有可能升级 pip 后出现问题，参考下面文章 </span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/zong596568821xp/article/details/80410416</span></span><br><span class="line"><span class="comment"># 使用 python 虚拟环境 </span></span><br><span class="line">sudo apt-get install python3.6-venv</span><br><span class="line"><span class="comment"># 在当前目录生成venv文件夹</span></span><br><span class="line">python3 -m venv venv</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line">pip3 install -r req.txt</span><br><span class="line">python leetcode_generate.py   (此时python已经按前面设置默认指向python3.6了)</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure></li></ul><h1 id="开始干活"><a href="#开始干活" class="headerlink" title="开始干活"></a>开始干活</h1><h2 id="安装Ubuntu-16-04-kinect-v2"><a href="#安装Ubuntu-16-04-kinect-v2" class="headerlink" title="安装Ubuntu 16.04 + kinect v2"></a>安装Ubuntu 16.04 + kinect v2</h2><ul><li><p>首先安装 <a href="https://github.com/OpenKinect/libfreenect2#debianubuntu-1404" target="_blank" rel="noopener">libfreenect2</a></p><ul><li>Install OpenCL (optional) 这里要注意，虽然是可选的，但是<strong>建议安装上</strong>，不然后面用 ./bin/Protonet/cl 模式跑示例程序会出问题，而且 iai_kinect2 也是默认用的 opencl 做 registration。因为要更新到最新的驱动，稍微有点麻烦（对于AMD显卡）【已经放弃，转投Windows】<ul><li>首先查看自己的显卡驱动  lspci |grep VGA </li><li>如果是AMD显卡，需要安装最新的驱动，可以去<a href="https://www.amd.com/en/support/kb/release-notes/rn-prorad-lin-amdgpupro-17-40" target="_blank" rel="noopener">官网</a>下载 <strong>AMDGPU-pro</strong>（我安装了重启总是有问题，按<strong>Ctrl+Alt+F1</strong>进入命令行模式，cd进入驱动所在文件夹，<strong>./amdgpu-pro-install —px</strong>可破，然后卸载驱动…）；也可以在ubuntu系统更新驱动（我总是显示我的驱动已经最新…）。</li><li>最后发现 Ubuntu 对 AMD驱动的支持问题由来已久，请参考 <a href="https://ubuntuqa.com/article/1602.html" target="_blank" rel="noopener">AMD显卡</a>。因此选择折腾14系列。。。</li></ul></li><li><code>Ubuntu14.04.6</code> 14.04.5带来了Xorg 1.18，因此我们需要先降级，再安装 <strong>fglrx</strong>。过程中主要参考了这几篇文章，<a href="https://blog.csdn.net/qq_35843543/article/details/82048193" target="_blank" rel="noopener">1</a>、<a href="https://www.cnblogs.com/qiaoyanlin/p/6901177.html" target="_blank" rel="noopener">2</a>、<a href="https://blog.csdn.net/u010467276/article/details/84867836" target="_blank" rel="noopener">3</a>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep <span class="string">"ii  xserver-xorg-core"</span>    <span class="comment"># 查看xorg版本，1.18是不能安装fglrx的</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install xserver-xorg-lts-utopic libqt5gui5 libgles1-mesa-lts-utopic libgles2-mesa-lts-utopic libgl1-mesa-glx-lts-utopic libgl1-mesa-glx-lts-utopic:i386 libglapi-mesa-lts-utopic:i386 libegl1-mesa-drivers-lts-utopic    <span class="comment"># 降级到1.16</span></span><br><span class="line"></span><br><span class="line">sudo lsb_release -a.   <span class="comment"># 查看发行版本</span></span><br><span class="line">sudo uname -m       <span class="comment"># 查看架构</span></span><br><span class="line">lspci |grep VGA     <span class="comment"># 查看显卡驱动</span></span><br><span class="line"></span><br><span class="line">* 去这里找到并下载对应的AMD显卡驱动</span><br><span class="line">http://support.amd.com/en-us/download</span><br><span class="line"></span><br><span class="line">* 导出 fglrx 四个安装包</span><br><span class="line">x 你下的版本.zip    <span class="comment"># 注意 x 命令是只有安装了上文提到的 zsh 和 oh my zsh才有的解压命令</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> 到.run文件所在的文件夹</span><br><span class="line"></span><br><span class="line">sudo aptitude install build-essential cdbs dh-make dkms execstack dh-modaliases  libqtgui4 debhelper debconf libstdc++6 dkms libqtgui4 libelfg0 linux-headers-generic   <span class="comment"># 安装依赖</span></span><br><span class="line">sudo aptitude install lib32gcc1     <span class="comment"># 64位版本还需要这个命令</span></span><br><span class="line"></span><br><span class="line">sudo sh ./xxx.run    <span class="comment">#  这个命令后面会生成四个 fglrx deb包，提示是否安装，选择否，我们手动安装（自动安装没有测试）</span></span><br><span class="line">再就是参考上面提到的文章，进行四个包的手动安装</span><br><span class="line">然而然并卵，照样安装后无限登陆。于是真心放弃Ubuntu了。。。没办法。AMD 显卡傻逼</span><br></pre></td></tr></table></figure><ul><li>最后的 cmake 可以添加参数 -DENABLE_CXX11=ON 这样子会<strong>支持C++11</strong>，默认是关闭的，即输入<strong>cmake .. -DENABLE_CXX11=ON -DCMAKE_INSTALL_PREFIX=$HOME/freenect2</strong></li></ul></li><li><p>再安装 <a href="http://wiki.ros.org/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">ROS</a> 注意最后建立环境如果你用的是 <strong>zsh</strong> 而不是 bash 有区别对待，这也是<strong>官方文档的好处</strong>，CSDN上一票教程都没有提到这点。可以跑一个测试程序——小海龟，分别在三个终端中输入后三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinectic-turtlesim   <span class="comment"># 安装事例，一般已经安装</span></span><br><span class="line">roscore   <span class="comment"># 如果报not configured properly错误，在~/.zshrc中添加两行 1、export ROS_HOSTNAME=localhost 2、export ROS_MASTER_URI=http://localhost:11311</span></span><br><span class="line">rosrun turtlesim turtlesim_node</span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure></li><li><p>安装OpenCV 2.XX <a href="https://blog.csdn.net/qq_18649781/article/details/85927212" target="_blank" rel="noopener">参考opencv3.x安装</a> 和 <a href="https://blog.csdn.net/Bluenapa/article/details/84026874" target="_blank" rel="noopener">PCL</a>、eigen等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev  <span class="comment"># 安装eigen</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install libpcl-dev pcl-tools  <span class="comment"># 安装pcl，还需要一点其他的工作，参考上面文章</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install build-essential libgtk2.0-dev libvtk5-dev libjpeg-dev libtiff5-dev libjasper-dev libopenexr-dev libtbb-dev  <span class="comment"># opencv的一些依赖项</span></span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build   <span class="comment"># 在opencv文件夹下</span></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo /bin/bash -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span>   <span class="comment"># 配置环境</span></span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo vim /etc/profile     <span class="comment"># 指定头文件位置</span></span><br><span class="line"><span class="comment">#添加export  PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig</span></span><br></pre></td></tr></table></figure></li><li><p>安装 <a href="https://github.com/code-iai/iai_kinect2" target="_blank" rel="noopener">iai_kinect2</a> </p></li><li><p>最后写<del>(抄)</del>一个获取数据的小程序啰，参考 <a href="https://blog.csdn.net/xiaocainiaodeboke/article/details/52353191" target="_blank" rel="noopener">1</a>、<a href="https://blog.csdn.net/u012424737/article/details/80609451" target="_blank" rel="noopener">2</a>、<a href="https://blog.csdn.net/weixin_34375233/article/details/89663653" target="_blank" rel="noopener">3</a>。</p></li><li><p><mark>在尝试了安装amdgpu-pro-18.40版本后，出现了转机，系统不用重装，小程序也跑的动，但是问题还是出在openCL模式，出现整个屏幕变黑的状况。。。。于是正式放弃Ubuntu，以后买显卡注意不买 AMD</mark></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;目前尽量选择 Ubuntu 16.04 而不是 Ubuntu 18.04, 安装18.04对于安装OpenCV等库非常容易出问题&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;如果是 AMD驱动 并且为了使用kinect做开发，最好使用 Ubuntu 14&lt;/strong&gt;，原因后面会提到&lt;/p&gt;
&lt;h1 id=&quot;锐捷便捷启动&quot;&gt;&lt;a href=&quot;#锐捷便捷启动&quot; class=&quot;headerlink&quot; title=&quot;锐捷便捷启动&quot;&gt;&lt;/a&gt;锐捷便捷启动&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;准备好锐捷的Linux客户端，并确认自己的系统网卡型号，我的是eth0（如果&lt;strong&gt;ifconfig&lt;/strong&gt;用不了，使用&lt;strong&gt;ip a&lt;/strong&gt;或者&lt;strong&gt;sudo lshw -C network&lt;/strong&gt;命令）&lt;/li&gt;
&lt;li&gt;新建一个rj_login.sh脚本文件到客户端文件夹所在位置，开机执行脚本&lt;strong&gt;sudo sh rj_login.sh&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; rjsupplicant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./rjsupplicant.sh -u 账号 -p 密码 -d 1 -n eth0 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="//georgeju95.github.io/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="//georgeju95.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>3D重建的一些学习记录</title>
    <link href="//georgeju95.github.io/2019/08/31/2019-08-31-3D-Reconsruction/"/>
    <id>//georgeju95.github.io/2019/08/31/2019-08-31-3D-Reconsruction/</id>
    <published>2019-08-31T08:56:36.000Z</published>
    <updated>2023-08-29T18:58:12.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="insight-3D使用"><a href="#insight-3D使用" class="headerlink" title="insight 3D使用"></a>insight 3D使用</h2><p><a href="http://insight3d.sourceforge.net" target="_blank" rel="noopener">insight3D软件地址</a></p><a id="more"></a><ol><li>输入的照片不需要经过测量标定，但要满足以下条件<ul><li>照片应该<strong>对焦</strong>，不能模糊</li><li>相邻的照片间应该有很多的<strong>重叠部分</strong></li><li>照片序列的<strong>角度差异</strong>不宜太大</li><li>应该使用具有<strong>丰富细节和纹理</strong>的场景的照片</li><li><strong>避免只有一整块平面</strong>的照片，这样子的照片软件无法确定焦距</li><li><strong>不要裁剪</strong>照片</li><li><strong>3的规则</strong>：重建场景的每一个部分都必须出现在至少3张照片中</li></ul></li><li>加载照片（使用ifl文件一次性加载）到软件中</li><li>自动匹配以及相机标定：该软件可以不需要任何额外信息就能获得所以的相机参数（比如相机的<strong>位姿</strong>以及<strong>焦距</strong>），需要两个步骤来完成<ul><li>首先找到照片中的特征点(importan points)，然后试图在其他照片中去<strong>匹配</strong>这些特征点。</li><li>之后<strong>标定</strong>相机，获得相机相关的参数（位姿：位置+朝向，以及内部参数）</li></ul></li><li><strong>匹配(start matching)</strong>完成后照片上会出现很多小方格，代表已经匹配的点，悬浮在其上会显示所有匹配点的缩略图。自动匹配也会出现误匹配，由于标定算法的鲁棒性，这些outliers不影响结果</li><li>如果出现只有小部分匹配点，除了检查输入的照片是否满足上面的那些条件外，通过调整matching选项，也有一定作用。比如提高照片分辨率；如果你有9张或以上图片，可以选择 Just neighbours(linear sequence) 进行<strong>线性序列匹配</strong>。</li><li>之后进行<strong>标定(automatic calibration)</strong>，完成后可能没有什么变化，依次点击Edit &gt; Mode… &gt; Overview mode，之后可以旋转的3D视角。当前照片的三角锥体（即相机的朝向）被高亮</li><li>依次点击Modelling &gt; Triangulate all vertices，会计算所有的匹配点的位置。之后会出现3D点云，通过点云重建场景。有时候点云看起来不成型或者有很多噪声，这可能是由于存在许多误匹配，依次点击Modelling &gt; Triangulate, only trusted 选择只计算那些大概率被正确匹配的点</li><li>Edit &gt; Mode… 里面有三个模式，overview mode可以看场景的三维旋转，inspection mode可以通过上下左右键在场景中移动，Shot mode就是输入的照片序列。</li><li>左边栏的points creator可以手动在所有照片中选择匹配点，之后Modelling &gt; Triangulate user vertices，点变绿说明正确匹配并计算。可以在照片中自己选择点之后，使用polygons creator选项构造多边体（比如选择polygons creator后选择一面墙的四个角落点，会出现紫色边界线，之后Enter确定，边界线变白）。注意，一定要在两张图像中构造匹配点并把多边体构造出来，才能通过Image &gt; Generate textures产生有纹理的模型。</li><li>保存project为.i3d文件，导出模型为.vrml文件（可用于其他3D重建软件）</li></ol><h2 id="商业以及不开源软件"><a href="#商业以及不开源软件" class="headerlink" title="商业以及不开源软件"></a>商业以及不开源软件</h2><p>Pix4Dmapper, Autodesk 123D Catch, PhotoModeler, VisualSFM</p><h2 id="Open-Source-for-Research"><a href="#Open-Source-for-Research" class="headerlink" title="Open Source for Research"></a>Open Source for Research</h2><h3 id="COLMAP"><a href="#COLMAP" class="headerlink" title="COLMAP"></a>COLMAP</h3><h3 id="Open-MVG"><a href="#Open-MVG" class="headerlink" title="Open MVG"></a>Open MVG</h3><h3 id="Bundler"><a href="#Bundler" class="headerlink" title="Bundler"></a>Bundler</h3><h3 id="VisualSFM-CMVS-MeshLab"><a href="#VisualSFM-CMVS-MeshLab" class="headerlink" title="VisualSFM+CMVS+MeshLab"></a>VisualSFM+CMVS+MeshLab</h3><p>详见<a href="https://github.com/DongfeiJi/3DReconstruction-with-SFM" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;insight-3D使用&quot;&gt;&lt;a href=&quot;#insight-3D使用&quot; class=&quot;headerlink&quot; title=&quot;insight 3D使用&quot;&gt;&lt;/a&gt;insight 3D使用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://insight3d.sourceforge.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;insight3D软件地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="3D重建" scheme="//georgeju95.github.io/tags/3D%E9%87%8D%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Java讲义（5th）阅读总结（一）：Unit1 - Unit6</title>
    <link href="//georgeju95.github.io/2019/08/17/2019-08-17-Crazy-Java-5th-1/"/>
    <id>//georgeju95.github.io/2019/08/17/2019-08-17-Crazy-Java-5th-1/</id>
    <published>2019-08-17T08:17:36.000Z</published>
    <updated>2023-08-29T18:58:12.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unit-1-Java语言概述与开发环境"><a href="#Unit-1-Java语言概述与开发环境" class="headerlink" title="Unit 1 Java语言概述与开发环境"></a>Unit 1 Java语言概述与开发环境</h3><ul><li>高级语言的运行机制：<ul><li>编译型语言：一次性编译成机器码，可以脱离开发环境独立运行，而且通常运行效率较高。如C、C++、Objective-C、Swift、Kotlin等等。</li><li>解释型语言：使用专门的解释器对源程序逐行解释成特定平台的的机器码并立即执行的语言。如JavaScript、Ruby、Python等等。</li><li>半编译型语言（伪编译型）：如Visual Basic</li><li>Java既不是纯粹的编译型语言，也不是纯粹的解释型语言。编译并不会生成特定平台的机器码，而是生成一种与平台无关的<strong>字节码</strong>。通过JVM(Java虚拟机)来解释字节码，它是Java程序跨平台的关键部分。JRE(Java运行环境)包括JVM，以及运行Java程序的其他环境支持。</li></ul></li></ul><a id="more"></a><ul><li>javac -d destdir srcFile。编译语句，-d destdir指定生成的字节码文件的存放路径，不加就放在当前路径下。</li><li>一个Java源文件最多只能定义一个public类，<strong>源程序的主文件名必须和该public类的类名相同</strong>。如果没有pubic类，源文件的主文件名可以任意。</li><li>一个Java源文件通常只定义一个类，不同的类使用不同的源文件定义。</li><li>交互式工具<strong>jshell</strong>，它是一个REPL(Read-Eval-Print Loop)工具，该工具是一个交互式的命令行界面，可用于执行Java语言的变量声明、语句和表达式，而且可以立即看到结果。因此可以用该工具快速学习Java或测试Java的新API。命令行输入jshell进入交互模式，/help来查看帮助信息。</li><li><strong>垃圾收回器</strong>，传统C/C++语言需要显示进行垃圾回收，对程序员来说是比较麻烦的事情。如果一些分配出去的内存得不到及时回收，就会引起系统运行速度的下降，甚至导致程序瘫痪，这种现象称为<strong>内存泄露</strong>。Java程序的内存分配和回收都是由JRE在后台自动进行的，垃圾回收(GC)是一种<strong>动态存储管理技术</strong>，它自动释放不再被程序引用的对象，按照特定的垃圾回收算法来实现内存资源的自动回收功能。<ul><li>垃圾回收器的工作目标是回收无用对象的内存空间，这些内存空间都是JVM堆内存里的内存空间，垃圾回收器只能回收内存资源，对其他物理资源，如数据库连接、磁盘I/O等资源则无能为力。</li><li>将对象的引用变量置为null，暗示可以回收该对象</li><li>不同JVM采用了不同的垃圾回收机制和不同的垃圾回收算法，垃圾回收发生的<strong>不可预知性</strong>。</li><li>CMS —&gt; G1（Java7） —&gt; ZGC（Java11）; 永生代内存(PermGen) —&gt; 元空间(Metaspace)。P20</li></ul></li></ul><h3 id="Unit-2-理解面向对象"><a href="#Unit-2-理解面向对象" class="headerlink" title="Unit 2 理解面向对象"></a>Unit 2 理解面向对象</h3><ul><li>面向对象实际上由：OOA(分析)、OOD(设计)和OOP(编程)组成，其中OOA和OOD的结构需要使用一种方式来描述并记录，目前业界统一采用UML(统一建模语言)。</li><li>成员变量(状态数据) + 方法(行为) = 类定义。面向对象比面向过程的编程粒度要大，因此面向对象比面向过程更简单、易用。</li><li>面向对象的三个基本特征：<strong>封装、继承和多态</strong>。除此之外，抽象也是面向对象的重要部分。</li><li>注意区分<strong>基于对象</strong>的概念。基于对象无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是它没有继承的特定，而多态更需要继承，因此也没有多态的特点。例如JavaScript就是基于对象的语言，开发者只能使用现有对象的方法和属性。</li><li><strong>UML</strong>是一种用于描述、记录软件分析设计的工具，最常用的UML图包括：用例图、类图、组件图、部署图、顺序图、活动图和状态机图。</li><li>Java语言中，除了8个基本数据类型值之外，一切都是对象。对象是Java程序的核心，所以Java里的对象具有唯一性，每个对象都有一个标识来引用它，如果失去了标识，这个对象将变成垃圾。Java语言不允许直接访问对象，而是通过对对象的引用来操作对象。</li><li>class关键字定义类，定义类时可使用成员变量来描述该类对象的数据，可使用方法来描述该类对象的行为特征。若干类直接有一定的结构关系：<ul><li>一般 → 特殊的关系：典型的继承关系，extends关键字来表示这种<strong>继承关系</strong>。</li><li>整体 → 部分的关系：通过在一个类里保存另一个对象的引用来实现这种<strong>组合关系</strong>。</li></ul></li></ul><h3 id="Unit-3-数据类型和运算符"><a href="#Unit-3-数据类型和运算符" class="headerlink" title="Unit 3 数据类型和运算符"></a>Unit 3 数据类型和运算符</h3><ul><li><p>文档注释javadoc，以（/**）开始，以（*/）结束。再通过javadoc命令可以对源文件、包生成API文档。</p></li><li><p>标识符只能包含美元符$，不能包含@、#等特殊字符。</p></li><li><p>51个关键字，两个保留字goto、const，三个特殊的直接量 (literal) true、false、null。</p></li><li><p>Java语言支持的类型：<strong>基本类型</strong>：boolean类型和数值类型（注意byte占一个字节，char占两个，因为Java采用16位的Unicode字符集），<strong>引用类型</strong>（包括类，接口和数组，还有null）</p></li><li><p>整数值的4种表示方式，十进制，二进制（0b或0B开头），八进制（0开头）和十六进制（0x或0X）</p></li><li><p>Java的浮点类型默认是double类型，所以在末尾加上f或F表示float。一个整数如果很小并且前面有byte或short，则它是对应的byte或short类型；如果数字很大，并且前面是long，但是Java不会把该数字当成long型，所以要在数字后面加上字母l或L，不然就把数字默认为int造成溢出错误。单单一个整数是默认为整型的。</p></li><li><p>三个特殊的浮点数值，POSITIVE_INFINITY（正浮点数/0），NEGATIVE_INFINITY（负浮点数/0）和NaN（0.0/0.0或对一个负数开方）。所有的正无穷相等，所有的负无穷相等，但是NaN不与任何一个数值相等，包括自己。整数除以0会抛出一个异常。</p></li><li><p>数值中可以使用下划线分隔，包括整数和浮点数，便于分清楚有多少位。</p></li><li><p>boolean类型的数值只能是true或false，不能用0或非0来表示。其他基本类型的值也不能转成boolean类型。</p></li><li><p>Java10开始支持使用<strong>var</strong>定义局部变量；var相当于一个动态类型，类型由编译器自动推断，所以必须在定义局部变量的同时指定初始值。使用var定义的变量也可以是字符串等引用类型。</p></li><li><p>自动类型转换</p></li></ul><p><img src="/assets/blogImg/CrazyJava1.png" alt="image-1"></p><ul><li>（+）号不仅可以作为加法运算符，还可以作为字符串连接运算符。（-）号除了可以作为减法运算符外，还可以作为求负数的运算符。</li><li>Java为8种基本类型都提供了对应的<strong>包装类</strong>：boolean对应Boolean、byte对应Byte、short对应Short、int对应Integer、long对应Long、char对应Character、float对应Float、double对应Double，8个包装类都提供了一个<strong>parseXxx(String str)</strong>静态方法用于<strong>将字符串转换成基本类型</strong></li><li>关于字符串直接量有一点需要指出，当程序第一次使用某个字符串直接量时，Java会使用<strong>常量池</strong>来缓存该字符串直接量，如果程序后面的部分需要用到该字符串直接量时，Java会直接使用常量池中的字符串直接量。Java会确保每个字符串常量只有一个，不会产生多个副本。</li><li><strong>常量池</strong>是在编译期间被确定，并被保存在已编译的.class文件中的一些数据。它包括关于类、方法、接口中的常量，也包括字符串直接量。</li><li>取余运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3.1</span>;</span><br><span class="line"><span class="keyword">var</span> mod = a % b;</span><br><span class="line"></span><br><span class="line">System.out.println(mod); <span class="comment">// mod的值为2.1</span></span><br><span class="line">System.out.println(<span class="string">"5对0.0求余的结果是:"</span> + <span class="number">5</span> % <span class="number">0.0</span>); <span class="comment">// 输出非数:NaN</span></span><br><span class="line">System.out.println(<span class="string">"-5.0对0求余的结果是:"</span> + -<span class="number">5.0</span> % <span class="number">0</span>); <span class="comment">// 输出非数:NaN</span></span><br><span class="line">System.out.println(<span class="string">"0对5.0求余的结果是:"</span> + <span class="number">0</span> % <span class="number">5.0</span>); <span class="comment">// 输出0.0</span></span><br><span class="line">System.out.println(<span class="string">"0对0.0求余的结果是:"</span> + <span class="number">0</span> % <span class="number">0.0</span>); <span class="comment">// 输出非数:NaN</span></span><br><span class="line"><span class="comment">// 下面代码将出现异常：java.lang.ArithmeticException: / by zero</span></span><br><span class="line">System.out.println(<span class="string">"-5对0求余的结果是:"</span> + -<span class="number">5</span> % <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>位运算符，&lt;&lt;：左移运算符，&gt;&gt;：右移运算符，&gt;&gt;&gt;：无符号右移运算符。</p><ul><li>对于低于int类型的操作数总是先自动转换为int类型后再移位</li><li>对于int类型的整数移位，a&gt;&gt;b，如果b&gt;32，系统先用b对32求余，得到的结果才是真正移位的位数。a&gt;&gt;32的结果和a相同。</li></ul></li><li><p>逻辑运算符：&amp;&amp;：与，&amp;：不短路与。||：或，|：不短路或。</p></li><li><p>扩展后的赋值运算符，如果可以使用这种扩展后的运算符，则推荐使用它们。简洁不易出错。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhanceAssignTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个byte类型的变量</span></span><br><span class="line"><span class="keyword">byte</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 下面语句出错，因为5默认是int类型，a + 5就是int类型。</span></span><br><span class="line"><span class="comment">// 把int类型赋给byte类型的变量，所以出错</span></span><br><span class="line">a = a + <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 定义一个byte类型的变量</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 下面语句不会出现错误</span></span><br><span class="line">b += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unit-4-流程控制与数组"><a href="#Unit-4-流程控制与数组" class="headerlink" title="Unit 4 流程控制与数组"></a>Unit 4 流程控制与数组</h3><ul><li>与while循环不同的是，do while循环的循环条件后必须有一个分号。</li><li>break语句不仅可以结束其所在的循环，还可以<strong>直接结束其外层循环</strong>。此时需要在break后紧跟一个标签，这个标签用于标识一个外层循环。continue同理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakLabel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 外层循环，outer作为标识符</span></span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 内层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"i的值为:"</span> + i + <span class="string">"  j的值为:"</span> + j);</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 跳出outer标签所标识的循环。</span></span><br><span class="line"><span class="keyword">break</span> outer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义数组以及数组初始化：定义数组只是定义了一个引用变量，并未指向任何有效的内存空间，所以还没有内存空间来存储数组元素，因此这个数组也不能使用，只有对数组进行初始化后才可以使用。<ul><li><strong>静态初始化</strong>：初始化时由程序员显示指定每个数组元素的初始值，由系统决定数组长度。静态初始化时，显示指定的数组元素值的类型必须与new关键字后的<strong>type类型相同</strong>，或者是<strong>其子类的实例</strong>。</li><li><strong>动态初始化</strong>：初始化时程序员只指定数组长度，由系统为数组元素分配初始值。new后type的特性与静态初始化类似。</li><li>不要同时使用静态初始化和动态初始化。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个int数组类型的变量，变量名为intArr.</span></span><br><span class="line"><span class="keyword">int</span>[] intArr;</span><br><span class="line"><span class="comment">// 使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度。</span></span><br><span class="line">intArr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">20</span>&#125;;</span><br><span class="line"><span class="comment">// 定义一个Object数组类型的变量，变量名为objArr.</span></span><br><span class="line">Object[] objArr;</span><br><span class="line"><span class="comment">// 使用静态初始化，初始化数组时数组元素的类型是</span></span><br><span class="line"><span class="comment">// 定义数组时所指定的数组元素类型的子类</span></span><br><span class="line">objArr = <span class="keyword">new</span> String[] &#123;<span class="string">"Java"</span>, <span class="string">"李刚"</span>&#125;;</span><br><span class="line">Object[] objArr2;</span><br><span class="line"><span class="comment">// 使用静态初始化</span></span><br><span class="line">objArr2 = <span class="keyword">new</span> Object[] &#123;<span class="string">"Java"</span>, <span class="string">"李刚"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的定义和初始化同时完成，使用简化的静态初始化写法</span></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的定义和初始化同时完成，使用动态初始化语法</span></span><br><span class="line"><span class="keyword">int</span>[] prices = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 数组的定义和初始化同时完成，初始化数组时元素的类型是定义数组时元素类型的子类</span></span><br><span class="line">Object[] books = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器推断names变量的类型是String[]，静态初始化</span></span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> String[] &#123;<span class="string">"yeeku"</span>, <span class="string">"nono"</span>&#125;;  <span class="comment">//不能省略new String[]</span></span><br><span class="line"><span class="comment">// 编译器推断weightArr变量的类型是double[]，动态初始化</span></span><br><span class="line"><span class="keyword">var</span> weightArr = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出objArr数组的第二个元素，将输出字符串"李刚"</span></span><br><span class="line">System.out.println(objArr[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 为objArr2的第一个数组元素赋值</span></span><br><span class="line">objArr2[<span class="number">0</span>] = <span class="string">"Spring"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组元素指定的索引等于数组长度，所以下面代码将在运行时出现异常</span></span><br><span class="line"><span class="comment">// System.out.println(objArr2[2]);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用循环输出prices数组的每个数组元素的值，输出都是0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prices.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对动态初始化后的数组元素进行赋值</span></span><br><span class="line">books[<span class="number">0</span>] = <span class="string">"疯狂Java讲义"</span>;</span><br><span class="line">books[<span class="number">1</span>] = <span class="string">"轻量级Java EE企业应用实战"</span>;</span><br><span class="line"><span class="comment">// 使用循环输出books数组的每个数组元素的值，最后两个输出null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; books.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(books[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实际的数组对象被存储在堆（heap）内存中；如果引用该数组对象的数组引用变量是一个局部变量，那么它被存储在栈（stack）内存中。所有在方法中定义的局部变量都是放在栈内存的；创建一个对象，对象将被保存到运行时数据区，即堆内存。堆内存中的对象不会因为方法结束而销毁，因为可能还有另一个引用变量指向它。只有当一个对象没有任何引用变量引用它时，系统的垃圾回收器才会在合适的时候回收它。</p></li><li><p>二维数组（实质上还是一维数组，只是数组元素也是引用类型，指向一维数组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDimensionTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] a;</span><br><span class="line"><span class="comment">// 把a当成一维数组进行初始化，初始化a是一个长度为4的数组</span></span><br><span class="line"><span class="comment">// a数组的数组元素又是引用类型</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="comment">// 把a数组当成一维数组，遍历a数组的每个数组元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = a.length; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(a[i]); <span class="comment">// null null null null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化a数组的第一个元素</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 访问a数组的第一个元素所指数组的第二个元素</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// a数组的第一个元素是一个一维数组，遍历这个一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = a[<span class="number">0</span>].length; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(a[<span class="number">0</span>][i]); <span class="comment">// 0  6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时初始化二维数组的2个维数，动态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用静态初始化的语法来初始化一个二维数组</span></span><br><span class="line">String[][] str1 = <span class="keyword">new</span> String[][] &#123;<span class="keyword">new</span> String[<span class="number">3</span>],</span><br><span class="line"><span class="keyword">new</span> String[] &#123;<span class="string">"hello"</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> test : str1[<span class="number">0</span>]) </span><br><span class="line">System.out.println(test);   <span class="comment">// null null null</span></span><br><span class="line"><span class="comment">// 使用简化的静态初始化语法来初始化二维数组</span></span><br><span class="line">String[][] str2 = &#123;<span class="keyword">new</span> String[<span class="number">3</span>],</span><br><span class="line"><span class="keyword">new</span> String[] &#123;<span class="string">"hello"</span>&#125;&#125;;</span><br><span class="line">System.out.println(str1[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">// hello</span></span><br><span class="line">System.out.println(str2[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">// hello</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想在Java语言中实现无限扩展的数组，则可以定义一个Object[]类型的数组，这个数组的元素是Object类型，因此可以再一次指向Object[]类型…..。</p></li><li><p>操作数组的工具类：<strong>Arrays</strong>（处于java.util包下），包含的一些static修饰的方法可以直接操作数组（static修饰的方法可以直接通过类名调用）。具体可以参考API文档。Java 8增强了Arrays类的功能，增加了一些工具方法，这些工具方法可以充分利用多CPU并行的能力来提高设值、排序的性能（p105）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个a数组</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">// 定义一个a2数组</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">// a数组和a2数组的长度相等，每个元素依次相等，将输出true</span></span><br><span class="line">System.out.println(<span class="string">"a数组和a2数组是否相等："</span></span><br><span class="line">+ Arrays.equals(a, a2));</span><br><span class="line"><span class="comment">// 通过复制a数组，生成一个新的b数组</span></span><br><span class="line"><span class="keyword">var</span> b = Arrays.copyOf(a, <span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">"a数组和b数组是否相等："</span></span><br><span class="line">+ Arrays.equals(a, b)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 输出b数组的元素，将输出[3, 4, 5, 6, 0, 0]</span></span><br><span class="line">System.out.println(<span class="string">"b数组的元素为："</span></span><br><span class="line">+ Arrays.toString(b));</span><br><span class="line"><span class="comment">// 将b数组的第3个元素（包括）到第5个元素（不包括）赋为1</span></span><br><span class="line">Arrays.fill(b, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 输出b数组的元素，将输出[3, 4, 1, 1, 0, 0]</span></span><br><span class="line">System.out.println(<span class="string">"b数组的元素为："</span></span><br><span class="line">+ Arrays.toString(b));</span><br><span class="line"><span class="comment">// 对b数组进行排序</span></span><br><span class="line">Arrays.sort(b);</span><br><span class="line"><span class="comment">// 输出b数组的元素，将输出[0, 0, 1, 1, 3, 4]</span></span><br><span class="line">System.out.println(<span class="string">"b数组的元素为："</span></span><br><span class="line">+ Arrays.toString(b));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除此之外，在System类里也包含了一个static void <strong>arraycopy</strong>(Object src, int srcPos, Object dest, int destPos, int length)，该方法可以将src数组里的元素值赋给dest数组的元素，其中srcPos指定从src数组的第几个元素开始赋值，length指定复制多少个元素。</p></li></ul><h3 id="Unit-5-面向对象（上-）"><a href="#Unit-5-面向对象（上-）" class="headerlink" title="Unit 5 面向对象（上 ）"></a>Unit 5 面向对象（上 ）</h3><ul><li><p>定义类的修饰符有public、final、abstract，或者完全省略修饰符。对于一个类定义而言，可以包含三种最常见的成员：<strong>构造器、成员变量和方法</strong>。构造器用于构造该类的实例，通过new关键字来调用构造器。如果没有显式给出构造器，则系统默认生成一个无参构造器。<strong>构造器名必须和类名相同。构造器既不能定义返回值类型，也不能使用void声明构造器没有返回值</strong>（否则会被当成方法）。</p></li><li><p>定义成员变量的修饰符（可以省略）有：public、protected、private三个最多只能出现其中一个，可以与static、final组合起来修饰成员变量。定义成员变量还可以指定一个可选的默认值。</p></li><li><p>定义方法的修饰符（可以省略）：public、protected、private三个最多只能出现其中一个；abstract和final最多只能出现其中之一，它们可以和static组合起来修饰方法。</p></li><li><p>通常把<strong>static</strong>修饰的成员变量和方法称为<strong>类变量、类方法</strong>，不使用static修饰的成员变量和方法也成为<strong>实例变量、实例方法</strong>。<strong>静态成员不能直接访问非静态成员。</strong>staic真正的作用就是区分成员变量、方法、内部类、初始化块这四种成员到底属于类本身还是属于实例。有static修饰的成员属于类本身，没有static修饰的成员属于该类的实例。</p></li><li><p>static修饰的方法和成员变量，既可以通过类来调用，也可以通过实例来调用（一般通过类来调用，不易造成混淆）。没有使用static修饰的成员只能通过实例来调用。</p></li><li><p><strong>this</strong>关键字总是指向调用该方法的对象。根据this出现位置的不同，this作为对象的默认引用有两种情形：</p><ul><li>构造器中引用该构造器正在初始化的对象</li><li>在方法中引用调用该方法的对象</li></ul></li><li><p>this最大的作用就是<strong>让类中的一个方法，访问该类里的另一个方法或实例变量</strong>。this可以代表任何对象，当它出现在某个方法体中时，它所代表的对象是不确定的，但它的<strong>类型是确定的——当前类的实例</strong>：只有当这个方法被调用时，它所代表的对象才被确定下来。谁在调用这个方法，this就代表谁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个jump()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正在执行jump方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个run()方法，run()方法需要借助jump()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// var d = new Dog();</span></span><br><span class="line"><span class="comment">// d.jump();</span></span><br><span class="line"><span class="comment">// 不需要上面那么麻烦。使用this引用调用run()方法的对象</span></span><br><span class="line"><span class="keyword">this</span>.jump();</span><br><span class="line">System.out.println(<span class="string">"正在执行run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于同一个对象两个方法之间的依赖很常见，因此Java运行对象的一个成员直接调用另一个成员，可以省略this前缀。上面的this.jump();等价于jump();</p></li><li><p><strong>static修饰的方法中不能使用this引用</strong>，由于static修饰的方法不能使用this引用，所以static修饰的方法不能访问不使用static修饰的普通成员，因此Java语法规定：静态成员不能直接访问非静态成员。</p></li><li><p>调用成员变量、方法时，主调是必不可少的，即使省略了主调，实际的主调依然存在。<strong>调用静态成员省略主调，默认使用该类作为主调</strong>；<strong>调用非静态成员省略主调，默认使用this作为主调</strong>。</p></li><li><p>this在构造器中引用该构造器正在初始化的对象。大部分时候，在构造器中访问其他成员变量和方法时都可以省略this前缀，但如果构造器中有一个和成员变量同名的局部变量，又必须在构造器中访问这个被覆盖的成员变量，则必须使用this前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisInConstructor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个名为foo的成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThisInConstructor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 在构造器里定义一个foo变量</span></span><br><span class="line"><span class="keyword">int</span> foo = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 使用this代表该构造器正在初始化的对象</span></span><br><span class="line"><span class="comment">// 下面的代码将会把该构造器正在初始化的对象的foo成员变量设为6。</span></span><br><span class="line"><span class="keyword">this</span>.foo = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 所有使用ThisInConstructor创建的对象的foo成员变量</span></span><br><span class="line"><span class="comment">// 都将被设为6，所以下面代码将输出6。</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> ThisInConstructor().foo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在某个方法中可以把this作为返回值，则可以多次连续调用同一个方法，从而使得代码更加简洁。但是使用这种把this作为返回值的方法可能造成实际意义的模糊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnThis</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ReturnThis <span class="title">grow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age++;</span><br><span class="line"><span class="comment">// return this返回调用该方法的对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> rt = <span class="keyword">new</span> ReturnThis();</span><br><span class="line"><span class="comment">// 可以连续调用同一个方法</span></span><br><span class="line">rt.grow()</span><br><span class="line">.grow()</span><br><span class="line">.grow();</span><br><span class="line">System.out.println(<span class="string">"rt的age成员变量值是:"</span> + rt.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java里方法的参数传递方式只有一种：<strong>值传递</strong>，即使是引用类型的参数，也是复制一个引用类型过去，只是这两个引用都指向同一个对象而已。</p></li><li><p>形参个数可变的方法，在最后一个形参的类型后增加三点（…），则表明该形参可以接受多个参数值，多个参数值被当成数组传入（所以可以用数组形式的参数代替）。数组形式的参数可以处于形参列表的任意位置，但个数可变的形参只能处于形参列表的最后，也就是一个方法中最多只能有一个个数可变的形参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义了形参个数可变的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, String... books)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// books被当成数组处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> tmp : books)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出整数变量a的值</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 调用test方法</span></span><br><span class="line">test(<span class="number">5</span>, <span class="string">"疯狂Java讲义"</span>, <span class="string">"轻量级Java EE企业应用实战"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归一定要向已知方向递归（即朝着边界值的方法递归）</p></li><li><p>方法重载（方法名相同，但形参列表不同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadVarargs</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"只有一个字符串参数的test方法 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为前面已经有了一个test()方法，test()方法里有一个字符串参数。</span></span><br><span class="line"><span class="comment">// 此处的个数可变形参里不包含一个字符串参数的形式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... books)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"****形参个数可变的test方法****"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> olv = <span class="keyword">new</span> OverloadVarargs();</span><br><span class="line"><span class="comment">// 下面两次调用将执行第二个test()方法</span></span><br><span class="line">olv.test();</span><br><span class="line">olv.test(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line"><span class="comment">// 下面将执行第一个test()方法</span></span><br><span class="line">olv.test(<span class="string">"aa"</span>);</span><br><span class="line"><span class="comment">// 下面调用将执行第二个test()方法（只有一个形参，为了调用第二个必须搞成数组形式）</span></span><br><span class="line">olv.test(<span class="keyword">new</span> String[] &#123;<span class="string">"aa"</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>与成员变量不同的是，局部变量除形参外，都必须显示初始化。也就是说，必须先给方法局部变量和代码块局部变量指定初始值，否则不可以访问它们。</p></li></ul><p><img src="/assets/blogImg/CrazyJava2.png" alt="image-2"></p><ul><li><p>一个类里不能定义两个同名的成员变量，即使一个是类变量，一个是实例变量也不行；一个方法里不能定义两个同名的方法局部变量，方法局部变量与形参也不能同名；<strong>如果方法里的局部变量和成员变量同名，局部变量会覆盖成员变量，如果需要在这个方法里引用被覆盖的成员变量，则可以使用this（对于实例变量）或类名（对于类变量）作为调用者来限定访问成员变量</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableOverrideTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个name实例变量</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"李刚"</span>;</span><br><span class="line"><span class="comment">// 定义一个price类变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> price = <span class="number">78.0</span>;</span><br><span class="line"><span class="comment">// 主方法，程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 方法里的局部变量，局部变量覆盖成员变量</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">65</span>;</span><br><span class="line"><span class="comment">// 直接访问price变量，将输出price局部变量的值：65</span></span><br><span class="line">System.out.println(price);</span><br><span class="line"><span class="comment">// 使用类名作为price变量的限定，</span></span><br><span class="line"><span class="comment">// 将输出price类变量的值：78.0</span></span><br><span class="line">System.out.println(VariableOverrideTest.price);</span><br><span class="line"><span class="comment">// 运行info方法</span></span><br><span class="line"><span class="keyword">new</span> VariableOverrideTest().info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 方法里的局部变量，局部变量覆盖成员变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"孙悟空"</span>;</span><br><span class="line"><span class="comment">// 直接访问name变量，将输出name局部变量的值："孙悟空"</span></span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="comment">// 使用this来作为name变量的限定，</span></span><br><span class="line"><span class="comment">// 将输出name实例变量的值："李刚"</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部变量不属于任何类或实例，因此它总是保存在其所在方法的栈内存中。栈内存中的变量无需系统垃圾回收，往往随方法或代码块的运行结束而结束，局部变量只保存基本类型的值或者对象的引用，因此局部变量所占的内存区通常比较小。在程序中使用局部变量，也应该尽可能地缩小局部变量的作用范围。</p></li><li><p><strong>访问控制符</strong>实现<strong>封装</strong></p><ul><li>private（<strong>当前类</strong>访问权限）：如果类里的一个成员使用private修饰，则它只能在当前类的内部被访问。</li><li>default（<strong>包</strong>访问权限）：不使用任何访问控制符修饰，成员或外部类可以被相同包下的其他类访问。</li><li>protected（<strong>子类</strong>访问权限）：如果一个成员使用protected修饰，可以被不同包中的子类访问。使用它通常是希望其子类来重写这个方法。</li><li>public（<strong>公共</strong>访问权限）：成员或外部类可以被所有类访问。</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="center">private</th><th align="center">default</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="left">同一个类中</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">同一个包中</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">子类中</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">全局范围</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">√</td></tr></tbody></table><ul><li>外部类只能有两种访问控制级别：public和默认（default）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 使用private修饰成员变量，将这些成员变量隐藏起来</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// 提供方法来操作name成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 执行合理性校验，要求用户名必须在2～6位之间</span></span><br><span class="line"><span class="keyword">if</span> (name.length() &gt; <span class="number">6</span> || name.length() &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"您设置的人名不符合要求"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提供方法来操作age成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 执行合理性校验，要求用户年龄必须在0～100之间</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">100</span> || age &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"您设置的年龄不合法"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件PersonTest.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 因为age成员变量已被隐藏，所以下面语句将出现编译错误。</span></span><br><span class="line"><span class="comment">// p.age = 1000;</span></span><br><span class="line"><span class="comment">// 下面语句编译不会出现错误，但运行时将提示"您设置的年龄不合法"</span></span><br><span class="line"><span class="comment">// 程序不会修改p的age成员变量</span></span><br><span class="line">p.setAge(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 访问p的age成员变量也必须通过其对应的getter方法</span></span><br><span class="line"><span class="comment">// 因为上面从未成功设置p的age成员变量，故此处输出0</span></span><br><span class="line">System.out.println(<span class="string">"未能设置age成员变量时："</span></span><br><span class="line">+ p.getAge());</span><br><span class="line"><span class="comment">// 成功修改p的age成员变量</span></span><br><span class="line">p.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="comment">// 因为上面成功设置了p的age成员变量，故此处输出30</span></span><br><span class="line">System.out.println(<span class="string">"成功设置age成员变量后："</span></span><br><span class="line">+ p.getAge());</span><br><span class="line"><span class="comment">// 不能直接操作p的name成员变量，只能通过其对应的setter方法</span></span><br><span class="line"><span class="comment">// 因为"李刚"字符串长度满足2~6,所以可以成功设置</span></span><br><span class="line">p.setName(<span class="string">"李刚"</span>);</span><br><span class="line">System.out.println(<span class="string">"成功设置name成员变量后："</span></span><br><span class="line">+ p.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>package、import、import static</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lee; <span class="comment">// package语句必须作为源文件的第一条非注释性语句，一个源文件只能指定一个包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 javac -d . Hello.java 编译，会生成lee文件夹。使用 java lee.Hello运行</span></span><br></pre></td></tr></table></figure></li><li><p>import语句应该出现在package语句（如果有）之后、类定义之前。一个源文件只能包含一个package语句，但可以包含多个import语句，import语句中的*号只能代表类（所有类），不能代表包</p></li><li><p>Java默认为所有源文件导入java.lang包下的所有类，因此使用String、System类时都无需使用import语句。</p></li><li><p>静态导入（import static），用于导入指定类的某个静态成员变量、方法或全部的静态成员变量、方法。使用<strong>import可以省略写包名，而使用import static则可以连类名都省略</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// out是java.lang.System类的静态成员变量，代表标准输出</span></span><br><span class="line"><span class="comment">// PI是java.lang.Math类的静态成员变量，表示π常量</span></span><br><span class="line">out.println(PI);</span><br><span class="line"><span class="comment">// 直接调用Math类的sqrt静态方法</span></span><br><span class="line">out.println(sqrt(<span class="number">256</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法B完全包含方法A，则可以在方法B中调用方法A。同样的情况构造器则不能直接被调用，构造器必须使用new关键字来调用。但一旦使用new，将会导致系统重新创建一个对象。为了在构造器B中调用构造器A中的初始化代码，又不会重新创建一个对象，可以使用this关键字来调用相应的构造器。<strong>使用this调用另一个重载的构造器只能在构造器中使用，而且必须作为构造器执行体的第一条语句。系统会根据this后括号里的实参来调用形参列表与之对应的构造器</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String color;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> weight;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 两个参数的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name, String color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三个参数的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name, String color, <span class="keyword">double</span> weight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 通过this调用另一个重载的构造器的初始化代码</span></span><br><span class="line"><span class="keyword">this</span>(name, color);</span><br><span class="line"><span class="comment">// 下面this引用该构造器正在初始化的Java对象</span></span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类的继承：extends关键字，Java的继承是<strong>单继承，每个子类只有一个直接父类（间接父类可以有多个）</strong></p></li><li><p>子类只能从被继承的父类获得成员变量、方法和内部类（包括内部接口、枚举），不能获得构造器和初始化块</p></li><li><p>如果定义了一个Java类时并未显式指定这个类的直接父类，则这个类默认扩展java.lang.Object类。因此，<strong>java.lang.Object类是所有类的父类，要么是其直接父类，要么是其间接父类</strong>。因此所有的对象都可调用java.lang.Object类所定义的实例方法。</p></li><li><p>方法<strong>重写</strong>（Override），也被称为方法覆盖。子类重写（覆盖）了父类的方法。</p><ul><li><strong>两同</strong>：方法名相同、形参列表相同。</li><li><strong>两小</strong>：子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等。</li><li><strong>一大</strong>：子类方法的访问权限应比父类方法的访问权限更大或相等。</li><li>覆盖方法和被覆盖方法要么都是类方法，要么都是实例方法。</li></ul></li><li><p>如果需要在子类方法中调用父类被覆盖的方法，则可以使用<strong>super</strong>（被覆盖的是实例方法）或<strong>父类类名</strong>（被覆盖的是类方法）作为调用者来调用父类中被覆盖的方法。<strong>正如this不能出现在static修饰的方法中一样，super也不能出现在static修饰的方法中</strong>。</p></li><li><p>如果在某个方法中访问名为a的成员变量，但没有显式指定调用者，则系统查找a的顺序为：</p><ol><li><p>查找该方法中是否有名为a的局部变量。</p></li><li><p>查找当前类中是否包含名为a的成员变量。</p></li><li><p>查找a的直接父类中是否包含名为a的成员变量，依次上溯a的所有父类，直到java.lang.Object类，如果最终不能找到名为a的成员变量，则系统出现编译错误。</p></li></ol></li><li><p>在一个构造器中调用另一个重载的构造器使用this调用来完成，在子类构造器中调用父类构造器使用super调用来完成。使用super调用父类构造器也必须出现在子类构造器执行体的第一行，所以<strong>this调用和super调用不会同时出现</strong>。</p></li><li><p><strong>子类构造器总会调用父类构造器一次</strong>（即没有显示super调用父类构造器，也没有this调用本类重载的构造器，系统会在执行子类构造器之前，隐式调用父类无参数的构造器）。因为当调用子类构造器来初始化子类对象时，父类构造器总会在子类构造器之前执行；不仅如此，执行父类构造器时，系统会再次上溯执行其父类构造器…..依此类推，创建任何对象，最先执行的总是java.lang.Object类的构造器。</p></li><li><p>引用变量有两个类型：一个是编译时类型，一个是运行时类型。<strong>如果编译时类型和运行时类型不一致</strong>，就可能出现所谓的<strong>多态</strong>（Polymorphism）。相同类型的变量、调用同一个方法时呈现出多种不同的行为特征，这就时多态。与方法不同的是，对象的实例变量则不具备多态性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> book = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类的普通方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类的被覆盖的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//重新定义一个book实例变量隐藏父类的book实例变量</span></span><br><span class="line"><span class="keyword">public</span> String book = <span class="string">"轻量级Java EE企业应用实战"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类的覆盖父类的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类的普通方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 下面编译时类型和运行时类型完全一样，因此不存在多态</span></span><br><span class="line">BaseClass bc = <span class="keyword">new</span> BaseClass();</span><br><span class="line"><span class="comment">// 输出 6</span></span><br><span class="line">System.out.println(bc.book);</span><br><span class="line"><span class="comment">// 下面两次调用将执行BaseClass的方法</span></span><br><span class="line">bc.base();</span><br><span class="line">bc.test();</span><br><span class="line"><span class="comment">// 下面编译时类型和运行时类型完全一样，因此不存在多态</span></span><br><span class="line">SubClass sc = <span class="keyword">new</span> SubClass();</span><br><span class="line"><span class="comment">// 输出"轻量级Java EE企业应用实战"</span></span><br><span class="line">System.out.println(sc.book);</span><br><span class="line"><span class="comment">// 下面调用将执行从父类继承到的base()方法</span></span><br><span class="line">sc.base();</span><br><span class="line"><span class="comment">// 下面调用将执行从当前类的test()方法</span></span><br><span class="line">sc.test();</span><br><span class="line"><span class="comment">// 下面编译时类型和运行时类型不一样，多态发生</span></span><br><span class="line">BaseClass ploymophicBc = <span class="keyword">new</span> SubClass();</span><br><span class="line"><span class="comment">// 输出6 ―― 表明访问的是父类对象的实例变量</span></span><br><span class="line">System.out.println(ploymophicBc.book);  <span class="comment">// 实例变量不具有多态性</span></span><br><span class="line"><span class="comment">// 下面调用将执行从父类继承到的base()方法</span></span><br><span class="line">ploymophicBc.base();</span><br><span class="line"><span class="comment">// 下面调用将执行从当前类的test()方法（多态：明明是BaseClass，却执行的是SubClass的test方法）</span></span><br><span class="line">ploymophicBc.test();</span><br><span class="line"><span class="comment">// 因为ploymophicBc的编译类型是BaseClass，</span></span><br><span class="line"><span class="comment">// BaseClass类没有提供sub方法,所以下面代码编译时会出现错误。</span></span><br><span class="line"><span class="comment">// ploymophicBc.sub();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器推断v1是SubClass类型</span></span><br><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> SubClass();</span><br><span class="line"><span class="comment">// 由于ploymophicBc的编译时类型是BaseClass</span></span><br><span class="line"><span class="comment">// 因此编译器推断v2是BaseClass类型</span></span><br><span class="line"><span class="keyword">var</span> v2 = ploymophicBc;</span><br><span class="line"><span class="comment">// 由于BaseClass类没有提供sub方法,所以下面代码编译时会出现错误。</span></span><br><span class="line">v2.sub();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类其实是一种特殊的父类，因此Java允许把子类对象直接赋给一个父类引用变量，无须任何类型转换，或者被称为<strong>向上转换</strong>（upcasting），向上转换由系统自动完成。</p></li><li><p><strong>引用变量在编译阶段只能调用其编译时类型所具有的方法，但运行时则执行它运行时类型所具有的的方法</strong>。因此，编写Java代码时，引用变量只能调用声明该变量时所用类型里包含的方法。</p></li><li><p>通过引用变量来访问其包含的<strong>实例变量</strong>时，系统总是试图访问它<strong>编译时类型所定义的成员变量</strong>，而不是它运行时类型所定义的成员变量。（实例变量不具有多态）</p></li><li><p>基本类型之间的转换只能在数值类型之间进行。引用类型之间的转换只能在具有继承关系的两个类型之间进行，在进行强制类型转换之前，先用<strong>instanceof</strong>运算符判断是否可以成功转换，从而避免出现ClassCastException异常，这样可以保证程序更加健壮。</p></li><li><p>instanceof运算符用于<strong>判断前面的对象是否是后面的类，或者其子类、实现类的实例</strong>，如果是返回true，不是返回false。instanceof前面操作数的编译时类型要么与后面的类型相同，要么与后面的类具有父子继承关系，否则会引起编译错误。通常先用instanceof判断一个对象是否可以强制类型转换，然后再使用（type）运算符进行强制类型转换，从而保证程序不会出现错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceofTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 声明hello时使用Object类，则hello的编译类型是Object，</span></span><br><span class="line"><span class="comment">// Object是所有类的父类, 但hello变量的实际类型是String</span></span><br><span class="line">Object hello = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">// String与Object类存在继承关系，可以进行instanceof运算。返回true。</span></span><br><span class="line">System.out.println(<span class="string">"字符串是否是Object类的实例："</span></span><br><span class="line">+ (hello <span class="keyword">instanceof</span> Object));</span><br><span class="line">System.out.println(<span class="string">"字符串是否是String类的实例："</span></span><br><span class="line">+ (hello <span class="keyword">instanceof</span> String)); <span class="comment">// 返回true。</span></span><br><span class="line"><span class="comment">// Math与Object类存在继承关系，可以进行instanceof运算。返回false。</span></span><br><span class="line">System.out.println(<span class="string">"字符串是否是Math类的实例："</span></span><br><span class="line">+ (hello <span class="keyword">instanceof</span> Math));</span><br><span class="line"><span class="comment">// String实现了Comparable接口，所以返回true。</span></span><br><span class="line">System.out.println(<span class="string">"字符串是否是Comparable接口的实例："</span></span><br><span class="line">+ (hello <span class="keyword">instanceof</span> Comparable));</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">// String类与Math类没有继承关系，所以下面代码编译无法通过</span></span><br><span class="line"><span class="comment">// System.out.println("字符串是否是Math类的实例："</span></span><br><span class="line"><span class="comment">//+ (a instanceof Math));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承严重地破坏了父类的封装性，造成子类与父类的严重耦合。为了保证父类有良好的封装性，不会被子类随意改变，设计父类通常应该遵循如下规则：</p><ul><li>尽量隐藏父类的内部数据，即设置成private访问类型。</li><li>不要让子类可以随意访问、修改父类的方法。父类中那些仅为辅助其他的工具方法，应该使用private访问控制符修饰，让子类无法访问该方法；如果父类中的方法需要被外部类调用，则必须以public修饰，但又不希望子类重写该方法，可以使用<strong>final</strong>修饰（把类设置成最终类，即不能被当成父类，例如JDK提供的java.lang.String类和java.lang.System类）；如果希望父类的某个方法被子类重写，但不希望被其他类自由访问，则可以使用protected来修饰。</li><li>尽量不要在父类构造器中调用将要被子类重写的方法。</li></ul></li><li><p>只是为了实现类复用，并不一定需要采用继承。可以考虑采用<strong>组合</strong>方式，能提供更好的封装性。一般在子类需要额外增加成员变量或增加自己独有的行为方式（包括增加新的方法或重写父类的方法）时采用继承。继承设计与组合设计的系统开销不会有本质的差别。</p></li><li><p>组合是把旧类对象作为新类的成员变量组合进来，用以实现新类的功能，用户看到的是新类的方法，而不能看到被组合对象的方法。因此通常需要在新类使用private修饰被组合的旧类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"心脏跳动..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">beat();</span><br><span class="line">System.out.println(<span class="string">"吸一口气，吐一口气，呼吸中..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 将原来的父类组合到原来的子类，作为子类的一个组合成分</span></span><br><span class="line"><span class="keyword">private</span> Animal a;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(Animal a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重新定义一个自己的breathe()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 直接复用Animal提供的breathe()方法来实现Bird的breathe()方法。</span></span><br><span class="line">a.breathe();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我在天空自在的飞翔..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wolf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 将原来的父类组合到原来的子类，作为子类的一个组合成分</span></span><br><span class="line"><span class="keyword">private</span> Animal a;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wolf</span><span class="params">(Animal a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重新定义一个自己的breathe()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 直接复用Animal提供的breathe()方法来实现Wolf的breathe()方法。</span></span><br><span class="line">a.breathe();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我在陆地上的快速奔跑..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 此时需要显式创建被组合的对象</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bird(a1);</span><br><span class="line">b.breathe();</span><br><span class="line">b.fly();</span><br><span class="line"><span class="comment">// 此时需要显式创建被组合的对象</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Wolf(a2);</span><br><span class="line">w.breathe();</span><br><span class="line">w.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化块</strong>是Java类里可出现的第4种成员，一个类里可以有多个初始化块，相同类型的初始化块之间有顺序：前面定义的初始化块先执行。<strong>初始化块的修饰符只能出现static</strong>。初始化块没有名字，也就没有标识，因此无法通过类、对象来调用初始化块。<strong>实例初始化块只在创建Java对象时隐式执行，而且在构造器执行之前自动执行。类初始化块则在类初始化阶段自动执行</strong>。</p></li><li><p>实际上<strong>实例初始化块是一个假象</strong>，使用javac命令编译Java类后，该类中的实例初始化块会消失——实例初始化块中代码<strong>会被“还原“到每个构造器中，且位于构造器所有代码的前面</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Root的类初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"Root的实例初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Root</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Root的无参数的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mid</span> <span class="keyword">extends</span> <span class="title">Root</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Mid的类初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"Mid的实例初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Mid的无参数的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 通过this调用同一类中重载的构造器</span></span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line">System.out.println(<span class="string">"Mid的带参数构造器，其参数值："</span></span><br><span class="line">+ msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Mid</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Leaf的类初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"Leaf的实例初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 通过super调用父类中有一个字符串参数的构造器</span></span><br><span class="line"><span class="keyword">super</span>(<span class="string">"疯狂Java讲义"</span>);</span><br><span class="line">System.out.println(<span class="string">"执行Leaf的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span> Leaf();</span><br><span class="line"><span class="keyword">new</span> Leaf();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Compiling Test.java......</span><br><span class="line">------Output------</span><br><span class="line">Root的类初始化块</span><br><span class="line">Mid的类初始化块</span><br><span class="line">Leaf的类初始化块   <span class="comment">// 类初始化阶段，先执行最顶层父类的类初始化块，然后依次向下。</span></span><br><span class="line">Root的实例初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的实例初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：疯狂Java讲义</span><br><span class="line">Leaf的实例初始化块</span><br><span class="line">执行Leaf的构造器   <span class="comment">// 对象初始化前，先执行最顶层父类的实例初始化块、最顶层父类的构造器，然后依次向下。</span></span><br><span class="line">Root的实例初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的实例初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：疯狂Java讲义</span><br><span class="line">Leaf的实例初始化块</span><br><span class="line">执行Leaf的构造器<span class="comment">//一旦Leaf类初始化成功后，Leaf类一直在虚拟机中存在，第二次创建Leaf实例无须再次类初始化</span></span><br></pre></td></tr></table></figure><h3 id="Unit-6-面向对象（下）"><a href="#Unit-6-面向对象（下）" class="headerlink" title="Unit 6  面向对象（下）"></a>Unit 6  面向对象（下）</h3><ul><li><p><strong>final</strong>关键字修饰变量、方法和类，系统不允许为final变量重新赋值，子类不允许覆盖父类的final方法，final类不能派生子类。</p></li><li><p>JDK1.5提供<strong>自动装箱</strong>（可以把一个基本类型变量直接赋值给对应的包装类变量，或者赋值给Object变量）和<strong>自动拆箱</strong>（允许直接把包装类对象直接赋给一个对应的基本类型变量）</p></li><li><p>借助于包装类的帮助，再加上自动装箱、自动拆箱功能，开发者可以把基本类型的变量“近似”地当成对象的使用（所有装箱、拆箱过程由系统自动完成，无需程序员理会）；反过来也可以把包装类的实例近似地当成基本类型的变量使用。包装类还可以实现基本类型变量和字符串之间的转换：<strong>parseXxx(String s)</strong>静态方法、<strong>valueOf(String s)</strong>静态方法，两者都用于将字符串类型转换为基本类型。String类提供了多个重载valueOf()方法，用于将基本类型变量转换成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Primitive2String</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> intStr = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">// 把一个特定字符串转换成int变量</span></span><br><span class="line"><span class="keyword">var</span> it1 = Integer.parseInt(intStr);</span><br><span class="line"><span class="keyword">var</span> it2 = Integer.valueOf(intStr);</span><br><span class="line">System.out.println(it2);</span><br><span class="line"><span class="keyword">var</span> floatStr = <span class="string">"4.56"</span>;</span><br><span class="line"><span class="comment">// 把一个特定字符串转换成float变量</span></span><br><span class="line"><span class="keyword">var</span> ft1 = Float.parseFloat(floatStr);</span><br><span class="line"><span class="keyword">var</span> ft2 = Float.valueOf(floatStr);</span><br><span class="line">System.out.println(ft2);</span><br><span class="line"><span class="comment">// 把一个float变量转换成String变量</span></span><br><span class="line"><span class="keyword">var</span> ftStr = String.valueOf(<span class="number">2.345f</span>);</span><br><span class="line">System.out.println(ftStr);</span><br><span class="line"><span class="comment">// 把一个double变量转换成String变量</span></span><br><span class="line"><span class="keyword">var</span> dbStr = String.valueOf(<span class="number">3.344</span>);</span><br><span class="line">System.out.println(dbStr);</span><br><span class="line"><span class="comment">// 把一个boolean变量转换成String变量</span></span><br><span class="line"><span class="keyword">var</span> boolStr = String.valueOf(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(boolStr.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java的Integer类的设计，系统把一个-128~127之间的整数自动装箱成Integer实例，并放入了一个名为cache的数组中缓存起来。如果以后把一个-128~127之间的整数自动装箱成一个Integer实例时，实际上是直接指向对应的数组元素；但每次把一个不在-128~127范围内的整数自动装箱成Integer实例时，系统总是重新创建一个Integer实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClassCompare</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = Integer.valueOf(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 输出true</span></span><br><span class="line">System.out.println(<span class="string">"6的包装类实例是否大于5.0"</span> + (a &gt; <span class="number">5.0</span>));</span><br><span class="line">System.out.println(<span class="string">"比较2个包装类的实例是否相等："</span></span><br><span class="line">+ (Integer.valueOf(<span class="number">2</span>) == Integer.valueOf(<span class="number">2</span>))); <span class="comment">// 输出true</span></span><br><span class="line">System.out.println(<span class="string">"比较128个包装类的实例是否相等："</span></span><br><span class="line">+ (Integer.valueOf(<span class="number">128</span>) == Integer.valueOf(<span class="number">128</span>))); <span class="comment">// 输出false</span></span><br><span class="line"><span class="comment">// 通过自动装箱，允许把基本类型值赋值给包装类的实例</span></span><br><span class="line">Integer ina = <span class="number">2</span>;</span><br><span class="line">Integer inb = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">"两个2自动装箱后是否相等："</span></span><br><span class="line">+ (ina == inb)); <span class="comment">// 输出true</span></span><br><span class="line">Integer biga = <span class="number">128</span>;</span><br><span class="line">Integer bigb = <span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">"两个128自动装箱后是否相等："</span></span><br><span class="line">+ (biga == bigb)); <span class="comment">// 输出false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类都提供了一个静态的<strong>compare(xxx val1, xxx val2)</strong>方法，可以用其比较两个基本类型值的大小。Java7还为Character包装类增加了大量的工具方法来对一个字符串进行判断，详细请参考API文档。Java8为整型包装类增加了<strong>支持无符号运算</strong>的方法，还为Byte、Short增加了<strong>toUnsignedInt(xxx x)、toUnsignedLong(yyy x)</strong>两个方法，用于将指定byte或short类型的变量或值转化成无符号的int或long值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsignedTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> b = -<span class="number">3</span>;</span><br><span class="line"><span class="comment">// 将byte类型的-3转换为无符号整数。</span></span><br><span class="line">System.out.println(<span class="string">"byte类型的-3对应的无符号整数："</span></span><br><span class="line">+ Byte.toUnsignedInt(b)); <span class="comment">// 输出253</span></span><br><span class="line"><span class="comment">// 指定使用16进制解析无符号整数</span></span><br><span class="line"><span class="keyword">var</span> val = Integer.parseUnsignedInt(<span class="string">"ab"</span>, <span class="number">16</span>);</span><br><span class="line">System.out.println(val); <span class="comment">// 输出171</span></span><br><span class="line"><span class="comment">// 将-12转换为无符号int型，然后转换为16进制的字符串</span></span><br><span class="line">System.out.println(Integer.toUnsignedString(-<span class="number">12</span>, <span class="number">16</span>)); <span class="comment">// 输出fffffff4</span></span><br><span class="line"><span class="comment">// 将两个数转换为无符号整数后相除</span></span><br><span class="line">System.out.println(Integer.divideUnsigned(-<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// 将两个数转换为无符号整数相除后求余</span></span><br><span class="line">System.out.println(Integer.remainderUnsigned(-<span class="number">2</span>, <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印对象和toString方法。System.out的println()方法只能在控制台输出字符串，而Person实例是一个内存中的对象，当使用该方法输出Person对象时，实际上输出的是Person对象的toString方法的返回值。<strong>Object类提供的toString方法总是返回该对象实现类的“类名+@+hashCode”值</strong>，我们可以<strong>重写Object类的toString方法来输出一些我们感兴趣的东西</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个Person对象，将之赋给p变量</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>);</span><br><span class="line"><span class="comment">// 打印p所引用的Person对象,输出Person@512ddf17</span></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//提供有参数的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color, <span class="keyword">double</span> weight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// color的setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weight的setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写toString方法，用于实现Apple对象的"自我描述"</span></span><br><span class="line"><span class="comment">// public String toString()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// return "一个苹果，颜色是：" + color</span></span><br><span class="line"><span class="comment">// + "，重量是：" + weight;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Apple[color="</span> + color + <span class="string">",weight="</span> + weight + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Apple(<span class="string">"红色"</span>, <span class="number">5.68</span>);</span><br><span class="line"><span class="comment">// 打印Apple对象，输出Apple[color=红色,weight=5.68]</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>==和equals</strong>方法。使用==来判断两个变量是否相等时，如果两个变量是基本类型且都是数值类型(不一定要求数据类型严格相同)，则只要两个变量的值相等，就将返回true。但对于引用类型变量，只有它们指向同一个对象时，==判断才会返回true。==不可用于比较类型上没有父子关系的两个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> it = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">var</span> fl = <span class="number">65.0f</span>;</span><br><span class="line"><span class="comment">// 将输出true</span></span><br><span class="line">System.out.println(<span class="string">"65和65.0f是否相等？"</span> + (it == fl));</span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">'A'</span>;</span><br><span class="line"><span class="comment">// 将输出true</span></span><br><span class="line">System.out.println(<span class="string">"65和'A'是否相等？"</span> + (it == ch));</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line"><span class="comment">// 将输出false</span></span><br><span class="line">System.out.println(<span class="string">"str1和str2是否相等？"</span></span><br><span class="line">+ (str1 == str2));</span><br><span class="line"><span class="comment">// 将输出true</span></span><br><span class="line">System.out.println(<span class="string">"str1是否equals str2？"</span></span><br><span class="line">+ (str1.equals(str2)));</span><br><span class="line"><span class="comment">// 由于java.lang.String与EqualTest类没有继承关系，</span></span><br><span class="line"><span class="comment">// 所以下面语句导致编译错误</span></span><br><span class="line"><span class="comment">// System.out.println("hello" == new EqualTest());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>“hello”直接量</strong>和<strong>new String(“hello”)</strong>的区别。使用字符串常量值，JVM将会使用常量池来管理这些字符串；当使用new String(“hello”)时，JVM先使用常量池（专门用于管理在编译时被确定并被保存在已编译的.class文件中的一些数据。它包括了关于类、方法、接口中的常量，还包括字符串常量）来管理”hello”直接量，再调用String类的构造器来创建一个新的String对象，新创建的String对象被保存在堆内存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCompareTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// s1直接引用常量池中的"疯狂Java"</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"疯狂Java"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"疯狂"</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">"Java"</span>;</span><br><span class="line"><span class="comment">// s4后面的字符串值可以在编译时就确定下来</span></span><br><span class="line"><span class="comment">// s4直接引用常量池中的"疯狂Java"</span></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">"疯狂"</span> + <span class="string">"Java"</span>;</span><br><span class="line"><span class="comment">// s5后面的字符串值可以在编译时就确定下来</span></span><br><span class="line"><span class="comment">// s5直接引用常量池中的"疯狂Java"</span></span><br><span class="line"><span class="keyword">var</span> s5 = <span class="string">"疯"</span> + <span class="string">"狂"</span> + <span class="string">"Java"</span>;</span><br><span class="line"><span class="comment">// s6后面的字符串值不能在编译时就确定下来，</span></span><br><span class="line"><span class="comment">// 不能引用常量池中的字符串</span></span><br><span class="line"><span class="keyword">var</span> s6 = s2 + s3;</span><br><span class="line"><span class="comment">// 使用new调用构造器将会创建一个新的String对象，</span></span><br><span class="line"><span class="comment">// s7引用堆内存中新创建的String对象</span></span><br><span class="line"><span class="keyword">var</span> s7 = <span class="keyword">new</span> String(<span class="string">"疯狂Java"</span>);</span><br><span class="line">System.out.println(s1 == s4); <span class="comment">// 输出true</span></span><br><span class="line">System.out.println(s1 == s5); <span class="comment">// 输出true</span></span><br><span class="line">System.out.println(s1 == s6); <span class="comment">// 输出false</span></span><br><span class="line">System.out.println(s1 == s7); <span class="comment">// 输出false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>String对象的equals()方法重写了Object的equals()</strong>，只要它们引用字符串对象里包含的字符序列相同即可认为相等。<strong>Object的equals()和使用==运算符没有区别，同样要求两个引用变量指向同一个对象才会返回ture</strong>。因此如果希望采用自定义的相等标准，可以<strong>重写equals方法</strong>。正确的重写equals应满足以下条件：</p><ul><li>自反性：x.equals(x)一定返回true</li><li>对称性：任意x，y，如果y.equals(x)返回true，则x.equals(y)也返回true</li><li>传递性：x.equals(y)返回true，y.equals(z)返回true，则x.equals(z)一定返回true</li><li>一致性：只要对象中用于等价比较的信息没有改变，那么无论调用多少次x.equals(y)，返回结果一致。</li><li>对于任何不是null的x，x.equals(null)一定返回false</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String idStr;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String idStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.idStr = idStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name的setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// idStr的setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdStr</span><span class="params">(String idStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.idStr = idStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIdStr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.idStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写equals()方法，提供自定义的相等标准</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果两个对象为同一个对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 只有当obj是Person对象</span></span><br><span class="line"><span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj.getClass() == Person.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> personObj = (Person) obj;</span><br><span class="line"><span class="comment">// 并且当前对象的idStr与obj对象的idStr相等才可判断两个对象相等</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getIdStr().equals(personObj.getIdStr()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideEqualsRight</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="string">"12343433433"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"孙行者"</span>, <span class="string">"12343433433"</span>);</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Person(<span class="string">"孙悟饭"</span>, <span class="string">"99933433"</span>);</span><br><span class="line"><span class="comment">// p1和p2的idStr相等，所以输出true</span></span><br><span class="line">System.out.println(<span class="string">"p1和p2是否相等？"</span></span><br><span class="line">+ p1.equals(p2));</span><br><span class="line"><span class="comment">// p2和p3的idStr不相等，所以输出false</span></span><br><span class="line">System.out.println(<span class="string">"p2和p3是否相等？"</span></span><br><span class="line">+ p2.equals(p3));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>即使某个实例为null，它也可以访问它所属类的类成员。但是如果一个null对象访问实例成员，将会引发NullPointerException异常，因为null表明该实例根本不存在。</p></li><li><p>如果一个类始终只能创建一个实例，则这个类被称为<strong>单例类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 使用一个类变量来缓存曾经创建的实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="comment">// 将构造器使用private修饰，隐藏该构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 提供一个静态方法，用于返回Singleton实例</span></span><br><span class="line"><span class="comment">// 该方法可以加入自定义的控制，保证只产生一个Singleton对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果instance为null，表明还不曾创建Singleton对象</span></span><br><span class="line"><span class="comment">// 如果instance不为null，则表明已经创建了Singleton对象，</span></span><br><span class="line"><span class="comment">// 将不会重新创建新的实例</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建一个Singleton对象，并将其缓存起来</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建Singleton对象不能通过构造器，</span></span><br><span class="line"><span class="comment">// 只能通过getInstance方法来得到实例</span></span><br><span class="line">Singleton s1 = Singleton.getInstance();</span><br><span class="line">Singleton s2 = Singleton.getInstance();</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// 将输出true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>final</strong>关键字可以修饰类、变量和方法。final修饰变量时，表示该变量一旦获得了初始值就不可以被改变，final修饰的成员变量必须由程序员显示地指定初始值：</p><ul><li>类变量：必须在<strong>静态初始化块</strong>或<strong>声明该类变量时</strong>指定初始值</li><li>实例变量：必须在<strong>非静态初始化块</strong>、<strong>声明该实例变量</strong>或<strong>构造器</strong>中指定初始值</li></ul></li><li><p>系统不会对局部变量进行初始化，局部变量必须由程序员显示初始化。<strong>如果final修饰的局部变量在定义时没有指定默认值，则可以在后面代码中对该变量赋初始值，但只能一次</strong>；如果定义时已经指定默认值，则后面代码不能再对该变量赋值。因为形参在调用方法时，由系统根据传入的参数来完成初始化，因此使用final修饰的形参不能被赋值。</p></li><li><p>final修饰引用类型变量，只保证引用类型变量所引用的地址不会改变，即一直引用同一个对象，但这个对象完全可以发生改变。</p></li><li><p>可执行<strong>“宏替换”</strong>的final变量，满足三个条件，这个<strong>final变量就不再是一个变量，而是相当于一个直接量</strong>：</p><ul><li>使用final修饰符修饰</li><li>在定义该final变量时指定了初始值</li><li>该初始值可以在编译时就被确定下来</li></ul></li><li><p>除了上面那种为final变量赋值时赋直接量的情况外，如果被赋的表达式只是基本的算术表达式或字符串连接运算，<strong>没有访问普通变量，调用方法</strong>，Java编译器同样会将这种final变量当成“宏变量”处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalReplaceTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 下面定义了4个final“宏变量”</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">var</span> a = <span class="number">5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">var</span> b = <span class="number">1.2</span> / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">var</span> str = <span class="string">"疯狂"</span> + <span class="string">"Java"</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">var</span> book = <span class="string">"疯狂Java讲义："</span> + <span class="number">99.0</span>;</span><br><span class="line"><span class="comment">// 下面的book2变量的值因为调用了方法，所以无法在编译时被确定下来</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">var</span> book2 = <span class="string">"疯狂Java讲义："</span> + String.valueOf(<span class="number">99.0</span>); </span><br><span class="line">System.out.println(book == <span class="string">"疯狂Java讲义：99.0"</span>);  <span class="comment">// true</span></span><br><span class="line">System.out.println(book2 == <span class="string">"疯狂Java讲义：99.0"</span>); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringJoinTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"疯狂Java"</span>;</span><br><span class="line"><span class="comment">// s2变量引用的字符串可以编译时就确定出来，</span></span><br><span class="line"><span class="comment">// 因此s2直接引用常量池中已有的"疯狂Java"字符串</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"疯狂"</span> + <span class="string">"Java"</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// 输出true</span></span><br><span class="line"><span class="comment">// 定义2个字符串直接量</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"疯狂"</span>;     <span class="comment">// 由于str1、str2只是两个普通变量，编译器不会执行“宏替换”</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Java"</span>;    <span class="comment">// 让s1==s3很简单，用final修饰str1和str2</span></span><br><span class="line"><span class="comment">// 将str1和str2进行连接运算</span></span><br><span class="line"><span class="keyword">var</span> s3 = str1 + str2;</span><br><span class="line">System.out.println(s1 == s3); <span class="comment">// 输出false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>final修饰的方法不可被重写，仅仅是不能被重写，并不是不能被重载。对于一个private修饰的方法，由于其子类无法访问该方法，所以子类定义一个与其有相同方法名、形参列表、返回值类型的方法是可以的，不过这不是方法重写，而是在子类中重新定义了一个方法。</p></li><li><p>final修饰的类不可以有子类</p></li><li><p><strong>不可变类的意思是创建该类的实例后，该实例的实例变量是不可改变的</strong>。与不可变类对应的是可变类，可变类的含义是该类的实例变量的值是可变的。当使用<strong>final修饰引用类型变量时，仅表示这个引用类型变量不可被重新赋值，但引用类型变量所指的对象依然可以改变</strong>。这就产生了一个问题：当创建不可变类时，如果它包含的成员变量的类型是可变的，那么其对象的成员变量的值依然是可改变的——这个不可变类是失败的。<strong>如果需要设计一个不可变类，尤其要注意其引用类型的成员变量，如果引用类型的成员变量的类是可变的，就必须采取必要的措施来保护该成员变量所引用的对象不会被修改，这样才能创建真正的不可变类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String firstName, String lastName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.firstName = firstName;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// firstName、lastName的setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Name name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Name name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//this.name = name; 如果用这个，将导致Person实例变量name可变（引用对象），最后输出“八戒”</span></span><br><span class="line"><span class="comment">// 设置name实例变量为临时创建的Name对象，该对象的firstName和lastName</span></span><br><span class="line"><span class="comment">// 与传入的name参数的firstName和lastName相同</span></span><br><span class="line"><span class="keyword">this</span>.name = <span class="keyword">new</span> Name(name.getFirstName(), name.getLastName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Name <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//return name; 其实这里可以用这个（上面的必须新创建），因为此处的name已经是一个新的Name对象了</span></span><br><span class="line"><span class="comment">// 返回一个匿名对象，该对象的firstName和lastName</span></span><br><span class="line"><span class="comment">// 与该对象里的name的firstName和lastName相同</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Name(name.getFirstName(), name.getLastName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> Name(<span class="string">"悟空"</span>, <span class="string">"孙"</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(n);</span><br><span class="line"><span class="comment">// Person对象的name的firstName值为"悟空"</span></span><br><span class="line">System.out.println(p.getName().getFirstName());</span><br><span class="line"><span class="comment">// 改变Person对象name的firstName值</span></span><br><span class="line">n.setFirstName(<span class="string">"八戒"</span>);</span><br><span class="line">System.out.println(n.getFirstName()); <span class="comment">// “八戒”</span></span><br><span class="line"><span class="comment">// p = new Person(n);</span></span><br><span class="line"><span class="comment">// 只有再次构造，p才会输出“八戒”。不然始终是一开始的“悟空”</span></span><br><span class="line">System.out.println(p.getName().getFirstName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">当程序向Person构造器里传入一个Name对象时，该构造器创建Person对象不是直接利用已有的Name对象（利用已有的Name对象有风险，因为其是可变的，如果程序改变了这个Name对象，将会导致Person对象也发生变化），而是重新创建了一个Name对象来赋值给Person对象的name实例变量。</span><br></pre></td></tr></table></figure></li><li><p>缓存实例的不可变类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheImmutale</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 使用数组来缓存已有的实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CacheImmutale[] cache</span><br><span class="line">= <span class="keyword">new</span> CacheImmutale[MAX_SIZE];</span><br><span class="line"><span class="comment">// 记录缓存实例在缓存中的位置,cache[pos-1]是最新缓存的实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CacheImmutale</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CacheImmutale <span class="title">valueOf</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 遍历已缓存的对象，</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; MAX_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果已有相同实例，直接返回该缓存的实例</span></span><br><span class="line"><span class="keyword">if</span> (cache[i] != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; cache[i].getName().equals(name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cache[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果缓存池已满</span></span><br><span class="line"><span class="keyword">if</span> (pos == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把缓存的第一个对象覆盖，即把刚刚生成的对象放在缓存池的最开始位置。</span></span><br><span class="line">cache[<span class="number">0</span>] = <span class="keyword">new</span> CacheImmutale(name);</span><br><span class="line"><span class="comment">// 把pos设为1</span></span><br><span class="line">pos = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把新创建的对象缓存起来，pos加1</span></span><br><span class="line">cache[pos++] = <span class="keyword">new</span> CacheImmutale(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cache[pos - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj.getClass() == CacheImmutale.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> ci = (CacheImmutale) obj;</span><br><span class="line"><span class="keyword">return</span> name.equals(ci.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name.hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheImmutaleTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> c1 = CacheImmutale.valueOf(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">var</span> c2 = CacheImmutale.valueOf(<span class="string">"hello"</span>);</span><br><span class="line"><span class="comment">// 下面代码将输出true</span></span><br><span class="line">System.out.println(c1 == c2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java提供的java.lang.Integer类，就采用了与CacheImmutale类相同的处理策略，如果<strong>采用new构造器来创建Integer对象，则每次返回全新的Integer对象</strong>（因为性能较差，Java9已标记为过时）；如果<strong>采用valueOf()方法创建Integer对象，则会缓存该方法创建的对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCacheTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 生成新的Integer对象</span></span><br><span class="line"><span class="keyword">var</span> in1 = <span class="keyword">new</span> Integer(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 生成新的Integer对象，并缓存该对象</span></span><br><span class="line"><span class="keyword">var</span> in2 = Integer.valueOf(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 直接从缓存中取出Ineger对象</span></span><br><span class="line"><span class="keyword">var</span> in3 = Integer.valueOf(<span class="number">6</span>);</span><br><span class="line">System.out.println(in1 == in2); <span class="comment">// 输出false</span></span><br><span class="line">System.out.println(in2 == in3); <span class="comment">// 输出true</span></span><br><span class="line"><span class="comment">// 由于Integer只缓存-128~127之间的值，</span></span><br><span class="line"><span class="comment">// 因此200对应的Integer对象没有被缓存。</span></span><br><span class="line"><span class="keyword">var</span> in4 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">var</span> in5 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">System.out.println(in4 == in5); <span class="comment">//输出false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>抽象类</strong>：抽象方法是只有方法签名，没有方法实现的方法。抽象方法和抽象类的规则如下：</p><ul><li>抽象类、方法必须使用abstract修饰，抽象方法<strong>不能有方法体</strong></li><li>抽象类<strong>不能被实例化</strong>，无法使用new来创造实例。抽象类的构造器主要是用于被其子类调用</li><li><strong>含有抽象方法的类只能被定义成抽象类</strong></li></ul></li><li><p>利用抽象类和抽象方法的优势，可以更好地发挥多态的优势，使得程序更加灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">文件Shape.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"执行Shape的初始化块..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="comment">// 定义一个计算周长的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 定义一个返回形状的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 定义Shape的构造器，该构造器并不是用于创建Shape对象，</span></span><br><span class="line"><span class="comment">// 而是用于被子类调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">(String color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行Shape的构造器..."</span>);</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件Triangle.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义三角形的三边</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> a;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> b;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> c;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">(String color, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(color);</span><br><span class="line"><span class="keyword">this</span>.setSides(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSides</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= b + c || b &gt;= a + c || c &gt;= a + b)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"三角形两边之和必须大于第三边"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写Shape类的的计算周长的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写Shape类的的返回形状的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getColor() + <span class="string">"三角形"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件Circle.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(String color, <span class="keyword">double</span> radius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(color);</span><br><span class="line"><span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写Shape类的的计算周长的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写Shape类的的返回形状的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getColor() + <span class="string">"圆形"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Shape s1 = <span class="keyword">new</span> Triangle(<span class="string">"黑色"</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Shape s2 = <span class="keyword">new</span> Circle(<span class="string">"黄色"</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(s1.getType());</span><br><span class="line">System.out.println(s1.calPerimeter());</span><br><span class="line">System.out.println(s2.getType());</span><br><span class="line">System.out.println(s2.calPerimeter());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当使用abstract修饰类时，表明这个类只能被继承；当使用abstract修饰方法时，表明这个方法必须由子类提供实现（即重写）。而final修饰的类不能被继承，final修饰的方法不能被重写。因此两者永远不能同时使用</p></li><li><p>抽象类体现的就是一种<strong>模板模式</strong>（设计模式之一）的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会大致保留抽象类的行为方法。</p></li><li><p>使用模板模式的一些简单规则：</p><ul><li>抽象父类可以只定义需要使用的某些方法，把不能实现的部分抽象成抽象方法，留给其子类去实现。</li><li>父类中可能包含需要调用其他系列方法的方法，这些被调用方法既可以由父类实现，也可以由其子类实现。父类里提供的方法只是定义了一个通用算法，其实现也许并不完全由自身实现，而必须依赖于其子类的辅助。</li></ul></li><li><p><strong>接口</strong>定义了一种规范，<strong>接口定义了某一批类所需要遵守的规范。接口是从多个相似类中抽象出来的规范</strong>，接口不提供任何实现。接口体现的是规范和实例分离的设计哲学。</p><ul><li>修饰符可以使public或者省略（包权限访问）</li><li>一个接口可以有多个直接父接口，但接口只能继承接口，不能继承类</li></ul></li><li><p>接口里不能包含构造器和初始化块定义，接口里可以包含成员变量（只能是静态常量）、方法（只能是抽象实例方法、类方法、默认方法和私有方法）、内部类（包括内部接口、枚举）定义。</p><ul><li>Java9新增的私有方法，主要作用就是作为工具方法，为接口中的默认方法或类方法提供支持。私有方法可以拥有方法体，但私有方法不能使用default修饰。私有方法可以使用static修饰，即私有方法既可以是类方法，也可是实例方法。</li><li>对静态常量而言，系统自动为这些成员变量增加static和final两个修饰，即默认使用public static final</li><li>如果不是定义默认方法、类方法或私有方法，系统将自动为普通方法增加abstract修饰符。接口里的普通方法不能有方法实现（方法体）；但类方法、默认方法、私有方法必须有方法实现（方法体）</li><li>接口里定义的内部类、内部接口、内部枚举默认都采用public static两个修饰符</li><li>默认方法必须使用default修饰，该方法不能使用static修饰，即默认使用public修饰。因此必须使用接口的实现类的实例来调用这些默认方法。(<strong>其实默认方法就是有方法体的实例方法，普通方法是无方法体的实例方法</strong>)</li></ul></li><li><p>接口的继承支持多继承，即<strong>一个接口可以有多个直接父接口</strong>。接口的<strong>实现</strong>用<strong>implements</strong>关键字。<strong>一个类可以实现多个接口</strong>（这又是java为单继承灵活性不足的所做的补充，<strong>类实现接口，模拟多继承</strong>）。<strong>一个类可以继承一个父类，并同时实现多个接口</strong>，implements部分必须放在extends部分之后。实现接口可以获得所实现接口里定义的常量（成员变量）、方法（包括抽象方法和默认方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Output</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 接口里定义的成员变量只能是常量</span></span><br><span class="line"><span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 接口里定义的普通方法只能是public的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(String msg)</span></span>;</span><br><span class="line"><span class="comment">// 在接口中定义默认方法，需要使用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String... msgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> msg : msgs)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在接口中定义默认方法，需要使用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"默认的test()方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在接口中定义类方法，需要使用static修饰</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">staticTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"接口里的类方法"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"foo私有方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义私有静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"bar私有静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getProduceTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让Printer类实现Output和Product接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Output</span>, <span class="title">Product</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String[] printData</span><br><span class="line">= <span class="keyword">new</span> String[MAX_CACHE_LINE];</span><br><span class="line"><span class="comment">// 用以记录当前需打印的作业数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 只要还有作业，继续打印</span></span><br><span class="line"><span class="keyword">while</span> (dataNum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"打印机打印："</span> + printData[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 把作业队列整体前移一位，并将剩下的作业数减1，见P104</span></span><br><span class="line">System.arraycopy(printData, <span class="number">1</span>,</span><br><span class="line">printData, <span class="number">0</span>, --dataNum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dataNum &gt;= MAX_CACHE_LINE)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"输出队列已满，添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把打印数据添加到队列里，已保存数据的数量加1。</span></span><br><span class="line">printData[dataNum++] = msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProduceTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">45</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个Printer对象，当成Output使用</span></span><br><span class="line">Output o = <span class="keyword">new</span> Printer();</span><br><span class="line">o.getData(<span class="string">"轻量级Java EE企业应用实战"</span>);</span><br><span class="line">o.getData(<span class="string">"疯狂Java讲义"</span>);</span><br><span class="line">o.out();</span><br><span class="line">o.getData(<span class="string">"疯狂Android讲义"</span>);</span><br><span class="line">o.getData(<span class="string">"疯狂Ajax讲义"</span>);</span><br><span class="line">o.out();</span><br><span class="line"><span class="comment">// 调用Output接口中定义的默认方法</span></span><br><span class="line">o.print(<span class="string">"孙悟空"</span>, <span class="string">"猪八戒"</span>, <span class="string">"白骨精"</span>);</span><br><span class="line">o.test();</span><br><span class="line"><span class="comment">// 创建一个Printer对象，当成Product使用</span></span><br><span class="line">Product p = <span class="keyword">new</span> Printer();</span><br><span class="line">System.out.println(p.getProduceTime());</span><br><span class="line"><span class="comment">// 所有接口类型的引用变量都可直接赋给Object类型的变量</span></span><br><span class="line">Object obj = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口不能显示继承任何类，但所有接口类型的引用变量都可以直接赋给Object类型的引用变量。因为任何对象都必须是Object或其子类的实例，Product类型的对象也不例外（它必须是Product接口实现类的对象，该实现类肯定是Object的显式或隐式子类）</p></li><li><p>接口和抽象类之间的差别：</p><ul><li>接口作为系统与外界交互的窗口，体现的是一种规范，类似于整个系统的“总纲”；抽象类作为系统中多个子类的共同父类，它所体现的是一种模板式设计，可以被当成是系统实现过程中的中间产品。</li><li>接口里不能为普通方法提供方法实现，抽象类则完全可以包含有方法体的普通方法</li><li>接口里只能定义静态常量，不能定义普通成员变量；抽象类则两者都可以定义</li><li>接口里不包含构造器，而抽象类可以包含。抽象类里的构造器不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作</li><li>接口里不包含初始化块；但抽象类则完全可以包含初始化块</li><li>一个类最多只有一个直接父类，包括抽象类；但一个类可以直接实现多个接口，弥补了java单继承的不足</li></ul></li><li><p><strong>两种常用场景示范面向接口编程的优势</strong>：</p><ul><li><strong>简单工厂模式</strong>：假设一个Computer类需要组合一个输出设备，组合一个Output要好于直接组合Printer，将Computer类与Printer类完全分离，则Computer对象实际组合的是Printer还是BetterPrinter对象就是完全透明。当Printer对象切换到BetterPrinter对象时，系统完全不受影响<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">文件 Output.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Output</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 接口里定义的成员变量只能是常量</span></span><br><span class="line"><span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 接口里定义的普通方法只能是public的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(String msg)</span></span>;</span><br><span class="line"><span class="comment">// 在接口中定义默认方法，需要使用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String... msgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> msg : msgs)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在接口中定义默认方法，需要使用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"默认的test()方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在接口中定义类方法，需要使用static修饰</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">staticTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"接口里的类方法"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"foo私有方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义私有静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"bar私有静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 Computer.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Output out;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Output out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.out = out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个模拟获取字符串输入的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyIn</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">out.getData(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个模拟打印的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">out.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 OutputFactory.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Output <span class="title">getOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//return new Printer();</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BetterPrinter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> of = <span class="keyword">new</span> OutputFactory();</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Computer(of.getOutput());</span><br><span class="line">c.keyIn(<span class="string">"轻量级Java EE企业应用实战"</span>);</span><br><span class="line">c.keyIn(<span class="string">"疯狂Java讲义"</span>);</span><br><span class="line">c.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 Pinter.java</span><br><span class="line"><span class="comment">// 让Printer类实现Output和Product接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Output</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String[] printData</span><br><span class="line">= <span class="keyword">new</span> String[MAX_CACHE_LINE];</span><br><span class="line"><span class="comment">// 用以记录当前需打印的作业数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 只要还有作业，继续打印</span></span><br><span class="line"><span class="keyword">while</span> (dataNum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"打印机打印："</span> + printData[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 把作业队列整体前移一位，并将剩下的作业数减1</span></span><br><span class="line">System.arraycopy(printData, <span class="number">1</span>,</span><br><span class="line">printData, <span class="number">0</span>, --dataNum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dataNum &gt;= MAX_CACHE_LINE)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"输出队列已满，添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把打印数据添加到队列里，已保存数据的数量加1。</span></span><br><span class="line">printData[dataNum++] = msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 BetterPrinter.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterPrinter</span> <span class="keyword">implements</span> <span class="title">Output</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String[] printData</span><br><span class="line">= <span class="keyword">new</span> String[MAX_CACHE_LINE * <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 用以记录当前需打印的作业数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 只要还有作业，继续打印</span></span><br><span class="line"><span class="keyword">while</span> (dataNum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"高速打印机正在打印："</span> + printData[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 把作业队列整体前移一位，并将剩下的作业数减1</span></span><br><span class="line">System.arraycopy(printData, <span class="number">1</span>, printData, <span class="number">0</span>, --dataNum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dataNum &gt;= MAX_CACHE_LINE * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"输出队列已满，添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把打印数据添加到队列里，已保存数据的数量加1。</span></span><br><span class="line">printData[dataNum++] = msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果系统需要将Printer改为BetterPrinter实现类，只需让BetterPrinter实现Output接口，并改变OutputFactory类中的getOutput即可。通过这种方式，即可把所有生成Output对象的逻辑集中在OutputFactory工厂类中管理，而所有需要使用Output对象的类只需与Output接口耦合，而不是与具体的实现类耦合</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><strong>命令模式</strong>：某个方法需要完成某一个行为，但这个行为的具体实现无法确定，必须等到执行该方法时才可以确定，可以考虑使用一个Command接口来定义一个方法，用这个方法来封装“处理行为”。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">文件Command.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 接口里定义的process()方法用于封装“处理行为”</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> element)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">文件ProcessArray.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessArray</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] target, Command cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> t : target)</span><br><span class="line">&#123;</span><br><span class="line">cmd.process(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件CommandTest.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pa = <span class="keyword">new</span> ProcessArray();</span><br><span class="line"><span class="keyword">int</span>[] target = &#123;<span class="number">3</span>, -<span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 第一次处理数组，具体处理行为取决于PrintCommand</span></span><br><span class="line">pa.process(target, <span class="keyword">new</span> PrintCommand());</span><br><span class="line">System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"><span class="comment">// 第二次处理数组，具体处理行为取决于SquareCommand</span></span><br><span class="line">pa.process(target, <span class="keyword">new</span> SquareCommand());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件PrintCommand.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"迭代输出目标数组的元素:"</span> + element);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件SquareCommand.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"数组元素的平方是:"</span> + element * element);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>定义在其他类内部的类被称为<strong>内部类（嵌套类）</strong>，包含内部类的也被称为<strong>外部类（宿主类）</strong></p><ul><li>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</li><li>内部类成员可以直接访问外部类的私有数据，但外部类不能访问内部类的实现细节</li><li><strong>匿名内部类适用于创建那些仅需要一次使用的类</strong>。前面介绍的命令模式，定义PrintCommand和SquareCommand两个实现类可能没有太大的意义，因为这两个实现类可能仅需要适用一次。在这种情况下，适用匿名内部类将更方便</li><li>内部类比外部类可以多使用三个修饰符：private、protected、static，非静态内部类不能拥有静态成员</li></ul></li><li><p>定义在方法里的内部类被称为<strong>局部内部类</strong>。大部分时候，内部类都被作为成员内部类定义，而不是作为局部内部类。<strong>成员内部类</strong>是一种与成员变量、方法、构造器和初始化块相似的类成员；<strong>局部内部类和匿名内部类则不是类成员</strong>。</p></li><li><p>如果内部类成员变量、外部类成员变量与内部类里方法的局部变量同名，则可以通过使用this、外部类类名.this作为限定来区分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscernVariable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String prop = <span class="string">"外部类的实例变量"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String prop = <span class="string">"内部类的实例变量"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> prop = <span class="string">"局部变量"</span>;</span><br><span class="line"><span class="comment">// 通过 外部类类名.this.varName 访问外部类实例变量</span></span><br><span class="line">System.out.println(<span class="string">"外部类的实例变量值："</span></span><br><span class="line">+ DiscernVariable.<span class="keyword">this</span>.prop);</span><br><span class="line"><span class="comment">// 通过 this.varName 访问内部类实例的变量</span></span><br><span class="line">System.out.println(<span class="string">"内部类的实例变量值："</span> + <span class="keyword">this</span>.prop);</span><br><span class="line"><span class="comment">// 直接访问局部变量</span></span><br><span class="line">System.out.println(<span class="string">"局部变量的值："</span> + prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> in = <span class="keyword">new</span> InClass();</span><br><span class="line">in.info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span> DiscernVariable().test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果外部类需要<strong>访问非静态内部类的实例成员</strong>，则必须<strong>显示创建非静态内部类对象来调用访问其实例成员</strong></p></li><li><p>不允许外部类的静态成员直接使用非静态内部类，不允许在非静态内部类里定义静态成员</p></li><li><p>静态内部类。使用static修饰一个内部类，则这个内部类就属于外部类本身，而不属于外部类的某个对象。外部类依然不能直接访问静态内部类的成员，但可以<strong>使用静态内部类的类名作为调用者来访问静态内部类的类成员</strong>，也可以<strong>使用静态内部类对象作为调用者来访问静态内部类的实例成员</strong>。</p></li><li><p>允许在接口定义内部类，默认使用public static修饰，也就是说，<strong>接口内部类只能是静态内部类</strong></p></li><li><p>在外部类以外的地方使用内部类（没有private修饰），内部类完整的类名应该是<strong>OuterClass.InnerClass</strong>。如果外部类有包名，则还应该增加包名前缀。</p></li><li><p>在外部类以外的地方创建非静态内部类实例必须使用<strong>外部类实例</strong>和<strong>new</strong>来调用非静态内部类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 定义一个内部类，不使用访问控制符，</span></span><br><span class="line"><span class="comment">// 即只有同一个包中其他类可访问该内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">In</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">In</span><span class="params">(String msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateInnerInstance</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Out.In in = <span class="keyword">new</span> Out().new In(<span class="string">"测试信息"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代码可改为如下三行代码：</span></span><br><span class="line"><span class="comment">使用OuterClass.InnerClass的形式定义内部类变量</span></span><br><span class="line"><span class="comment">Out.In in;</span></span><br><span class="line"><span class="comment">创建外部类实例，非静态内部类实例将寄存在该实例中</span></span><br><span class="line"><span class="comment">Out out = new Out();</span></span><br><span class="line"><span class="comment">通过外部类实例和new来调用内部类构造器创建非静态内部类实例</span></span><br><span class="line"><span class="comment">in = out.new In("测试信息");</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">当创建一个子类时，子类构造器总会调用父类的构造器，因此在创建非静态内部类的子类时，必须保证让子类构造器可以调用非静态内部类的构造器，【调用非静态内部类的构造器时，必须存在一个外部类对象】</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Out</span>.<span class="title">In</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//显示定义SubClass的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(Out out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过传入的Out外部类对象显式调用In的构造器</span></span><br><span class="line">out.<span class="keyword">super</span>(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在外部类以外创建静态内部类实例<strong>new <u>OuterClass.InnerConstructor()</u></strong>。不管是静态内部类还是非静态内部类，它们声明变量的语法完全一样。区别只是在创建内部类对象时，<strong>静态内部类只需使用外部类即可调用构造器</strong>，而<strong>非静态内部类必须使用外部类对象来调用构造器</strong>。相比之下，使用静态内部类比使用非静态内部类要简单很多，只要把外部类当成静态内部类的包空间即可。因此<strong>当需要使用内部类时，优先考虑静态内部类</strong></p></li><li><p>内部类放在方法里定义，即局部内部类。不能使用访问控制符和static修饰符修饰。</p></li><li><p>编译后，Java为局部内部类的class文件名增加了一个数字用于区分 (因为所在方法不同，同一个类中可能有两个以上同名局部内部类)</p></li><li><p><strong>匿名内部类</strong>适合创建那种只需要一次使用的类，<strong>创建匿名内部类时会立即创建一个该类的实例，这个类定义立即消失，匿名内部类不能重复使用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 实现接口 | 父类构造器(实参列表) &#123;</span><br><span class="line"><span class="comment">// 匿名内部类的类体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类必须继承一个父类，或实现一个接口（最多只能继承一个父类，或实现一个接口）</p><ul><li>匿名内部类不能是抽象类（因为创建匿名内部类时会立即创建匿名内部类的对象）</li><li>因为没有类名，所以不能定义构造器，但可以定义初始化块</li><li><strong>最常用的创建匿名内部类的方式是需要创建某个接口类型的对象</strong> (只需要使用一次)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Product p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"购买了一个"</span> + p.getName()</span><br><span class="line">+ <span class="string">"，花掉了"</span> + p.getPrice());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> ta = <span class="keyword">new</span> AnonymousTest();</span><br><span class="line"><span class="comment">// 调用test()方法时，需要传入一个Product参数，</span></span><br><span class="line"><span class="comment">// 此处传入其匿名实现类的实例</span></span><br><span class="line">ta.test(<span class="keyword">new</span> Product()</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">567.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"AGP显卡"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">如果这个Product接口实现类需要重复使用，则将该实现类定义成一个独立类；如果只需要使用一次，则采用上面形式</span><br></pre></td></tr></table></figure></li></ul></li><li><p>由于匿名内部类不能是抽象类，所以<strong>匿名内部类必须实现它的抽象父类或者接口里包含的所有抽象方法</strong>。通过接口来创建匿名内部类时，其内部不能显式地定义构造器，因此只有一个隐式的无参数构造器，故new接口名后的括号里不能传入参数值。但如果通过继承父类来创建匿名内部类时，其内部将拥有和父类相似的构造器，此处的相似指的是拥有相同的形参列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Device</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Device</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousInner</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Device d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"购买了一个"</span> + d.getName()</span><br><span class="line">+ <span class="string">"，花掉了"</span> + d.getPrice());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> ai = <span class="keyword">new</span> AnonymousInner();</span><br><span class="line"><span class="comment">// 调用有参数的构造器创建Device匿名实现类的对象</span></span><br><span class="line">ai.test(<span class="keyword">new</span> Device(<span class="string">"电子示波器"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">67.8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用无参数的构造器创建Device匿名实现类的对象</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Device()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 初始化块</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"匿名内部类的初始化块..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">56.2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写父类的实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"键盘"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ai.test(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java8之前要求被局部内部类、匿名内部类访问的局部变量必须使用final修饰，Java8开始这个限制被取消了：如果局部变量被匿名内部类访问，那么该局部变量相当于自动使用了final修饰。将这个功能称之为<strong>“effective final”</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">8</span>;    </span><br><span class="line"><span class="comment">// 下面代码将会导致编译错误</span></span><br><span class="line"><span class="comment">// 由于age局部变量被匿名内部类访问了，因此age相当于被final修饰了</span></span><br><span class="line"><span class="comment">// age = 2;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A()  <span class="comment">// 匿名内部类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 在Java 8以前下面语句将提示错误：age必须使用final修饰</span></span><br><span class="line"><span class="comment">// 从Java 8开始，匿名内部类、局部内部类允许访问“非final”的局部变量</span></span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Lambda表达式是Java8的重要更新。其支持将代码块作为方法参数，允许使用更简洁的代码来创建<strong>只有一个抽象方法的接口</strong>（函数式接口）的实例。<strong>Lambda表达式完全可用于简化创建匿名内部类对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pa = <span class="keyword">new</span> ProcessArray();</span><br><span class="line"><span class="keyword">int</span>[] target = &#123;<span class="number">3</span>, -<span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 处理数组，具体处理行为取决于匿名内部类</span></span><br><span class="line">pa.process(target, <span class="keyword">new</span> Command()</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"数组元素的平方是:"</span> + element * element);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">用Lambda表达式改为如下形式</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pa = <span class="keyword">new</span> ProcessArray();</span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">3</span>, -<span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 处理数组，具体处理行为取决于匿名内部类</span></span><br><span class="line">pa.process(array, (<span class="keyword">int</span> element)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">"数组元素的平方是:"</span> + element * element);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Lambda表达式由三部分组成：</p><ul><li>形参列表。允许省略形参类型，如果形参列表中只有一个参数，甚至连形参列表的圆括号可以省略</li><li>箭头（-&gt;）</li><li>代码块。如果只包含一条语句，则允许省略代码块的花括号。只有一条return语句，可以省略return关键字。Lambda表达式需要返回值，代码块中仅有一条省略了return的语句，则会直动返回这条语句的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taste</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String weather)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Addable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaQs</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// 调用该方法需要Eatable对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Eatable e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">e.taste();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用该方法需要Flyable对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(Flyable f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我正在驾驶："</span> + f);</span><br><span class="line">f.fly(<span class="string">"【碧空如洗的晴日】"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用该方法需要Addable对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Addable add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"5与3的和为："</span> + add.add(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> lq = <span class="keyword">new</span> LambdaQs();</span><br><span class="line"><span class="comment">// Lambda表达式的代码块只有一条语句，可以省略花括号。</span></span><br><span class="line">lq.eat(() -&gt; System.out.println(<span class="string">"苹果的味道不错！"</span>)); <span class="comment">//相当于new Eatable() &#123;...&#125;</span></span><br><span class="line"><span class="comment">// Lambda表达式的形参列表只有一个形参，省略圆括号</span></span><br><span class="line">lq.drive(weather -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"今天天气是："</span> + weather);</span><br><span class="line">System.out.println(<span class="string">"直升机飞行平稳"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Lambda表达式的代码块只有一条语句，省略花括号</span></span><br><span class="line"><span class="comment">// 代码块中只有一条语句，即使该表达式需要返回值，也可以省略return关键字。</span></span><br><span class="line">lq.test((a, b) -&gt; a + b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LambdaQs$$Lambda$<span class="number">1</span>/<span class="number">0x0000000100061040</span>@<span class="number">2</span>a098129</span><br><span class="line">苹果的味道不错！</span><br><span class="line">我正在驾驶：LambdaQs$$Lambda$<span class="number">2</span>/<span class="number">0x0000000100067840</span>@<span class="number">6956</span>de9</span><br><span class="line">今天天气是：【碧空如洗的晴日】</span><br><span class="line">直升机飞行平稳</span><br><span class="line"><span class="number">5</span>与<span class="number">3</span>的和为：<span class="number">8</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Lambda表达式会被当做<strong>一个“任意类型”的对象</strong>，到底需要当成何种类型的对象，这取决于运行环境的需要</p></li><li><p>Lambda表达式的<strong>目标类型必须是“函数式接口“</strong>，函数式接口可以包含多个默认方法、类方法，但只能<strong>声明一个抽象方法</strong>。Runnable、ActionListener等接口都是函数式接口</p></li><li><p>为了保证Lambda表达式的目标类型是一个明确的函数式接口，可以有如下三种常见方式：</p><ul><li>将Lambda表达式赋值给函数式接口类型的变量</li><li>将Lambda表达式作为函数式接口类型的参数传给某个方法</li><li>使用函数式接口对Lambda表达式进行强制类型转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj1 = (Runnable)() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Lambda表达式的目标类型完全可能是变化的——唯一的要求是，<strong>Lambda表达式实现的匿名方法与目标类型（函数式接口）中唯一的抽象方法有相同的形参列表</strong></p></li><li><p>Java8在java.util.function包下定义了大量函数式接口（见书本P221页）</p></li><li><p>如果Lambda表达式的代码块只有一条代码，程序就可以省略代码块的花括号。不仅如此，还可以在代码块中使用<strong>方法引用</strong>和<strong>构造器引用</strong></p><ul><li>引用类方法：类名::类方法    等价于   (a,b,….) -&gt; 类名.类方法(a,b,….)</li><li>引用特定对象的实例方法：特定对象::实例方法    等价于   (a,b,….) -&gt; 特定对象.实例方法(a,b,….)</li><li>引用某类对象的实例方法：类名::实例方法    等价于   (a,b,….) -&gt; a.实例方法(b,….)[第一个参数作为调用者]</li><li>引用构造器： 类名::new     等价于     (a,b,….) -&gt; new  类名(a,b,….)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">引用类方法</span><br><span class="line"><span class="meta">@FunctionalInterface</span>  <span class="comment">// 注解，本书第14章的内容</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span></span>&#123;</span><br><span class="line"><span class="function">Integer <span class="title">convert</span><span class="params">(String from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function">String <span class="title">test</span><span class="params">(String a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">YourTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function">JFrame <span class="title">win</span><span class="params">(String title)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRefer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 下面代码使用Lambda表达式创建Converter对象</span></span><br><span class="line">Converter converter1 = from -&gt; Integer.valueOf(from);</span><br><span class="line"><span class="comment">// 方法引用代替Lambda表达式：引用类方法。</span></span><br><span class="line"><span class="comment">// 函数式接口中被实现方法的全部参数传给该类方法作为参数。</span></span><br><span class="line"><span class="comment">//Converter converter1 = Integer::valueOf;</span></span><br><span class="line">Integer val = converter1.convert(<span class="string">"99"</span>);</span><br><span class="line">System.out.println(val); <span class="comment">// 输出整数99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码使用Lambda表达式创建Converter对象</span></span><br><span class="line">Converter converter2 = from -&gt; <span class="string">"fkit.org"</span>.indexOf(from);</span><br><span class="line"><span class="comment">// 方法引用代替Lambda表达式：引用特定对象的实例方法。</span></span><br><span class="line"><span class="comment">// 函数式接口中被实现方法的全部参数传给该方法作为参数。</span></span><br><span class="line"><span class="comment">//Converter converter2 = "fkit.org"::indexOf;</span></span><br><span class="line">Integer value = converter2.convert(<span class="string">"it"</span>);</span><br><span class="line">System.out.println(value); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码使用Lambda表达式创建MyTest对象</span></span><br><span class="line">MyTest mt = (a, b, c) -&gt; a.substring(b, c);</span><br><span class="line"><span class="comment">// 方法引用代替Lambda表达式：引用某类对象的实例方法。</span></span><br><span class="line"><span class="comment">// 函数式接口中被实现方法的第一个参数作为调用者，</span></span><br><span class="line"><span class="comment">// 后面的参数全部传给该方法作为参数。</span></span><br><span class="line"><span class="comment">//MyTest mt = String::substring;</span></span><br><span class="line">String str = mt.test(<span class="string">"Java I Love you"</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">System.out.println(str); <span class="comment">// 输出:va I Lo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码使用Lambda表达式创建YourTest对象</span></span><br><span class="line">YourTest yt = a -&gt; <span class="keyword">new</span> JFrame(a);</span><br><span class="line"><span class="comment">// 构造器引用代替Lambda表达式。</span></span><br><span class="line"><span class="comment">// 函数式接口中被实现方法的全部参数传给该构造器作为参数。</span></span><br><span class="line"><span class="comment">//YourTest yt = JFrame::new;</span></span><br><span class="line">JFrame jf = yt.win(<span class="string">"我的窗口"</span>);</span><br><span class="line">System.out.println(jf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Lambda表达式和匿名内部类的联系和区别</p><ul><li>两者都可以直接访问“effectively final”的局部变量，以及外部类的成员变量（包括实例变量和类变量）</li><li>两者<strong>生成的对象都可以直接调用从接口中继承的默认方法</strong></li><li>匿名内部类可以为任何接口创建实例；但<strong>Lambda表达式只能为函数式接口创建实例</strong></li><li>匿名内部类可以为抽象类甚至普通类创建实例；但<strong>Lambda表达式只能为函数式接口创建实例</strong></li><li>匿名内部类实现的抽象方法的方法体允许调用接口中定义的默认方法；但<strong>Lambda表达式的代码块不允许调用接口中定义的默认方法</strong></li></ul></li><li><p>使用Lambda表达式调用Arrays的类方法，Arrays类的有些方法需要Comparator、XxxOperator、XxxFunction等接口的实例，这些接口都是函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaArrays</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> String[] &#123;<span class="string">"java"</span>, <span class="string">"fkava"</span>, <span class="string">"fkit"</span>, <span class="string">"ios"</span>, <span class="string">"android"</span>&#125;;</span><br><span class="line">Arrays.parallelSort(arr1, (o1, o2) -&gt; o1.length() - o2.length());</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>, -<span class="number">4</span>, <span class="number">25</span>, <span class="number">16</span>, <span class="number">30</span>, <span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">// left代表数组中前一个所索引处的元素，计算第一个元素时，left为1</span></span><br><span class="line"><span class="comment">// right代表数组中当前索引处的元素</span></span><br><span class="line">Arrays.parallelPrefix(arr2, (left, right)-&gt; left * right);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// operand代表正在计算的元素索引</span></span><br><span class="line">Arrays.parallelSetAll(arr3, operand -&gt; operand * <span class="number">5</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr3));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[ios, java, fkit, fkava, android]</span><br><span class="line">[<span class="number">3</span>, -<span class="number">12</span>, -<span class="number">300</span>, -<span class="number">4800</span>, -<span class="number">144000</span>, -<span class="number">2592000</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>枚举类</strong>：实例有限而且固定的类，<strong>enum</strong>关键字（和class、interface地位相同）。一个Java源文件中最多只能定义一个public访问权限的枚举类，且该Java源文件也必须和该枚举类的类名相同。与普通类区别如下</p><ul><li>枚举类可以实现一个或多个接口，使用enum定义的枚举类默认继承了java.lang.Enum类，而不是Object类，因此枚举类不能显示继承其他父类。其中java.lang.Enum类实现了java.lang.Serializable和java.lang.Comparable两个接口</li><li>使用enum定义、<strong>非抽象</strong>的枚举类默认会使用final修饰</li><li>枚举类的<strong>构造器默认使用private修饰</strong>，也只能使用private修饰。因此<strong>枚举类不能派生子类</strong></li><li>枚举类的所有实例必须在枚举类的第一行显示列出，否则这个枚举类永远都不能产生实例。列出这些实例时，系统会自动添加public static final修饰，无须显示添加<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">文件SeasonEnum.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在第一行列出4个枚举实例</span></span><br><span class="line">SPRING, SUMMER, FALL, WINTER;</span><br><span class="line">&#125;</span><br><span class="line">文件EnumTest.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">judge</span><span class="params">(SeasonEnum s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// switch语句里的表达式可以是枚举值</span></span><br><span class="line"><span class="keyword">switch</span> (s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SPRING:</span><br><span class="line">System.out.println(<span class="string">"春暖花开，正好踏青"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SUMMER:</span><br><span class="line">System.out.println(<span class="string">"夏日炎炎，适合游泳"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FALL:</span><br><span class="line">System.out.println(<span class="string">"秋高气爽，进补及时"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WINTER:</span><br><span class="line">System.out.println(<span class="string">"冬日雪飘，围炉赏雪"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 枚举类默认有一个values方法，返回该枚举类的所有实例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> s : SeasonEnum.values())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(s.compareTo(SeasonEnum.SUMMER));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用枚举实例时，可通过EnumClass.variable形式来访问</span></span><br><span class="line"><span class="keyword">new</span> EnumTest().judge(SeasonEnum.SPRING);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">values()返回枚举类的所有实例。当<span class="keyword">switch</span>控制表达式使用枚举类型时，后面<span class="keyword">case</span>表达式中的值直接使用枚举值的名字，无须添加枚举类作为限定。java.lang.Enum类中提供了一些方法（见书本P228页）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>枚举类一样可以定义成员变量、方法和构造器，通常应该设计成不可变类，因此建议将枚举类的成员变量都使用private final修饰。如果将所有的成员变量都使用了final修饰符，则必须在构造器里为这些成员变量指定初始值（在定义成员变量时或者在初始化块中指定初始值也可以，但不常见）。<strong>一旦为枚举类显示定义了带参数的构造器，列出枚举值时就必须对应地传入参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 此处的枚举值(枚举实例)必须调用对应构造器来创建</span></span><br><span class="line">MALE(<span class="string">"男"</span>), FEMALE(<span class="string">"女"</span>); <span class="comment">//相当于public static final Gender MALE = new Gender("男")</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="comment">// 枚举类的构造器只能使用private修饰</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String name)</span>  <span class="comment">// 为枚举类显示定义了带参数的构造器</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果由枚举类来实现接口里的方法，则每个枚举值在调用该方法时都有相同的行为方式（因为方法体完全一样）。<strong>如果需要每个枚举值在调用该方法时呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法</strong>，每个枚举值提供不同的实现方法，从而让不同的枚举值调用该方法时具有不同的行为方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">文件GenderDesc.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenderDesc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">文件Gender.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender implements GenderDesc</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 此处的枚举值必须调用对应构造器来创建</span></span><br><span class="line">MALE(<span class="string">"男"</span>)</span><br><span class="line"><span class="comment">// 花括号部分实际上是一个类体部分，类似于匿名内部类语法。当创建MALE枚举值时，并不是直接创建Gender枚举类的实例，而是相当于创建Gender的匿名子类的实例（MALE和FEMALE此处实际上是Gender匿名子类的实例）。所以此处Gender其实是抽象枚举类，默认使用abstract修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这个枚举值代表男性"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">FEMALE(<span class="string">"女"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这个枚举值代表女性"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="comment">// 枚举类的构造器只能使用private修饰</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">下面是通用info()版本，枚举值在调用info时具有相同的行方式</span><br><span class="line"><span class="comment">//// 此处的枚举值必须调用对应构造器来创建</span></span><br><span class="line"><span class="comment">//MALE("男"), FEMALE("女");</span></span><br><span class="line"><span class="comment">//// 增加下面的info()方法，实现GenderDesc接口必须实现的方法</span></span><br><span class="line"><span class="comment">//public void info()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//System.out.println(</span></span><br><span class="line"><span class="comment">//"这是一个用于用于定义性别的枚举类");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译下面的程序生成5个class文件，其中Operation对应一个class文件，它的4个匿名内部子类分别对应一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Operation</span><br><span class="line">&#123;</span><br><span class="line">PLUS</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">MINUS</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">TIMES</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">DIVIDE</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为枚举类定义一个抽象方法</span></span><br><span class="line"><span class="comment">// 这个抽象方法由不同的枚举值提供不同的实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(Operation.PLUS.eval(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">System.out.println(Operation.MINUS.eval(<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">System.out.println(Operation.TIMES.eval(<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">System.out.println(Operation.DIVIDE.eval(<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举类里定义抽象方法时<strong>不能使用abstract关键字将枚举类定义成抽象类</strong>（系统自动添加），但因为枚举类需要显示创建枚举值，而不是作为父类，所以<strong>定义每个枚举值时必须为抽象方法提供实现，否则编译错误</strong></p></li><li><p>Java的垃圾回收机制具有如下特征：</p><ul><li>垃圾回收机制只负责回收堆内存的对象，不会回收任何物理资源</li><li>程序无法精确控制垃圾回收的运行，垃圾回收会在合适的时候进行</li><li>在垃圾回收机制回收任何对象之前，总会先调用它的finalize()方法，该方法可能使该对象重新复活</li></ul></li><li><p>对象在内存中的状态：</p><ul><li>可达状态：当一个对象被创建后，有一个以上的引用变量引用它，程序可通过引用变量来调用该对象</li><li>可恢复状态：某个对象不再有任何引用变量引用它。</li><li>不可达状态：当对象与所有引用变量的关联都被切断，且系统已经调用所有对象的finalize()方法后依然没有使该对象变成可达状态，那么这个对象将永久性地失去引用，最后变成不可达状态。只有当一个对象处于不可达状态时，系统才会真正回收该对象所占有的资源</li></ul></li><li><p>可以强制系统进行垃圾回收——这种强制只是通知系统进行垃圾回收，但系统是否进行依然不确定：</p><ul><li>调用System类的gc()静态方法：System.gc()</li><li>调用Runtime对象的gc()实例方法：Runtime.getRuntime().gc()</li></ul></li><li><p>在垃圾回收机制回收某个对象所占用的内存之前，通常要求程序调用适当的方法来清理资源，在没有明确指定清理资源的情况下，Java提供了默认机制来清理该对象的资源，这个机制就是<strong>finalize()</strong>方法。该方法是定义在Object类里的实例方法，方法原型为：protected void finalize() throws Throwable</p></li><li><p>任何Java类都可以重写Object类的finalize()方法，在该方法中清理该对象占用的资源。垃圾回收机制何时调用对象的finalize()方法是完全透明的，只有当程序认为需要更多的额外内存时，垃圾回收机制才会进行垃圾回收。finalize()方法具有如下几个特点：</p><ul><li>永远不要主动调用某个对象的finalize()方法，该方法应交给垃圾回收机制调用</li><li>finalize()方法何时被调用，是否被调用具有不确定性，不要把它当成一定会被执行的方法</li><li>当JVM执行可恢复对象的finalize()方法时，可能使该对象或系统中的其他对象重新变成可达状态</li><li>当JVM执行finalize()方法时出现异常，垃圾回收机制不会报告异常，程序继续执行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> FinalizeTest ft = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"测试资源清理的finalize方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建FinalizeTest对象（匿名对象）立即进入可恢复状态</span></span><br><span class="line"><span class="keyword">new</span> FinalizeTest();</span><br><span class="line"><span class="comment">// 通知系统进行资源回收</span></span><br><span class="line">System.gc();  <span class="comment">// ①</span></span><br><span class="line"><span class="comment">// 强制垃圾回收机制调用可恢复对象的finalize()方法</span></span><br><span class="line"><span class="comment">// Runtime.getRuntime().runFinalization();   // ②</span></span><br><span class="line">System.runFinalization();   <span class="comment">// ③</span></span><br><span class="line">ft.info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 让ft引用到试图回收的可恢复对象，即可恢复对象重新变成可达</span></span><br><span class="line">ft = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">如果取消①号代码，程序没有通知系统开始执行垃圾回收，系统通常不会立即进行垃圾回收，也就不会调用FinalizeTest对象的finalize()方法，这样FinalizeTest的ft类变量将依然保持为<span class="keyword">null</span>，这样就导致了空指针异常。</span><br><span class="line">如果仅执行①号代码，而不执行②号或③号代码，由于垃圾回收机制的不确定性，JVM往往并不立即调用可恢复对象的finalize方法，依然会导致空指针异常</span><br></pre></td></tr></table></figure></li></ul></li><li><p>java.lang.ref包下提供了三个类：SoftReference、WeakReference和PhantomReference，即对象的软、弱和虚引用</p><ul><li><strong>强引用</strong>：程序创建一个对象，并把这个对象赋给一个引用变量，程序通过该变量来操作实际的对象</li><li><strong>软引用</strong>：SoftReference类来实现。对一个对象只有软引用时，它有可能被垃圾回收机制回收。当系统内存足够，它不会被回收，程序也可使用该对象；当系统内存空间不足时，系统可能会回收它。</li><li><strong>弱引用</strong>：WeakReference来实现。对于只有弱引用的对象而言，当系统垃圾回收机制运行时，不管系统内存是否足够，总会回收该对象所占用的内存</li><li><strong>虚引用</strong>：PhantomReference类来实现，虚引用完全类似于没有引用。如果一个对象只有一个虚引用时，那么它和没有引用的效果大致相同。虚引用主要用于跟踪对象被垃圾回收的状态，<strong>虚引用不能单独使用，虚引用必须和引用队列（ReferenceQueue）联合使用</strong>。</li><li>三个引用类（不包括虚引用）都包含了一个get()方法，用于获取被它们所引用的对象</li><li>如果以软、弱和虚引用的方法引用对象，垃圾回收器就能够随意地释放对象。如果希望尽可能减小程序在其生命周期中所占用的内存大小时，这些引用类就很有用处。注意，要使用这些特殊引用类，就不能保留对对象的强引用；如果保留了对对象的强引用，就会浪费这些引用类所提供的任何好处</li></ul></li><li><p><strong>引用队列</strong>（ReferenceQueue）由java.lang.refReferenceQueue类表示，它用于保存被回收后对象的引用。软、弱引用和引用队列联合使用时，系统在回收被引用的对象之后，将把被回收对象对应的引用添加到关联的引用队列中。与软、弱引用不同的是，虚引用在对象被释放之前，将把它对应的虚引用添加到它关联的引用队列中，这使得可以在对象被回收之前采取行动。虚引用只能和引用队列联合使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">文件ReferenceTest.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个字符串对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> String(<span class="string">"疯狂Java讲义"</span>);</span><br><span class="line"><span class="comment">// 创建一个弱引用，让此弱引用引用到"疯狂Java讲义"字符串</span></span><br><span class="line"><span class="keyword">var</span> wr = <span class="keyword">new</span> WeakReference(str); </span><br><span class="line"><span class="comment">// 切断str引用和"疯狂Java讲义"字符串之间的引用</span></span><br><span class="line">str = <span class="keyword">null</span>;   </span><br><span class="line"><span class="comment">// 取出弱引用所引用的对象</span></span><br><span class="line">System.out.println(wr.get());  <span class="comment">// 输出“疯狂Java讲义”</span></span><br><span class="line"><span class="comment">// 强制垃圾回收</span></span><br><span class="line">System.gc();</span><br><span class="line">System.runFinalization();</span><br><span class="line"><span class="comment">// 再次取出弱引用所引用的对象</span></span><br><span class="line">System.out.println(wr.get());  <span class="comment">// 输出null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">文件PhantomReferenceTest.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhantomReferenceTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个字符串对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> String(<span class="string">"疯狂Java讲义"</span>);</span><br><span class="line"><span class="comment">// 创建一个引用队列</span></span><br><span class="line"><span class="keyword">var</span> rq = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line"><span class="comment">// 创建一个虚引用，让此虚引用引用到"疯狂Java讲义"字符串</span></span><br><span class="line"><span class="keyword">var</span> pr = <span class="keyword">new</span> PhantomReference(str, rq);</span><br><span class="line"><span class="comment">// 切断str引用和"疯狂Java讲义"字符串之间的引用</span></span><br><span class="line">str = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 取出虚引用所引用的对象，并不能通过虚引用获取被引用的对象，所以此处输出null</span></span><br><span class="line">System.out.println(pr.get()); </span><br><span class="line"><span class="comment">// 强制垃圾回收</span></span><br><span class="line">System.gc();</span><br><span class="line">System.runFinalization();</span><br><span class="line"><span class="comment">// 垃圾回收之后，虚引用将被放入引用队列中</span></span><br><span class="line"><span class="comment">// 取出引用队列中最先进入队列中的引用与pr进行比较</span></span><br><span class="line">System.out.println(rq.poll() == pr);   <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于垃圾回收的不确定性，当程序希望从软、弱引用中取出被引用对象时，可能这个被引用对象已经被释放了。如果程序需要使用那个被引用的对象，则必须重新创建该对象。有两种方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">注意，下面两段都是伪代码</span><br><span class="line">方式<span class="number">1</span>:</span><br><span class="line"><span class="comment">// 取出弱引用所引用的对象</span></span><br><span class="line">obj = wr.get();</span><br><span class="line"><span class="comment">// 如果取出的对象为null</span></span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 重新创建一个新的对象，再次让弱引用去引用该对象</span></span><br><span class="line">    wr = <span class="keyword">new</span> WeakReference(recreateIt());</span><br><span class="line">    obj = wr.get();</span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">// 操作obj对象   该方式较方式2有缺陷，因为if块即使被执行，由于垃圾回收的不确定，obj可能依然为null</span></span><br><span class="line"><span class="comment">// 再次切断obj与对象之间的关联</span></span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span></span><br><span class="line"><span class="comment">// 取出弱引用所引用的对象</span></span><br><span class="line">obj = wr.get();</span><br><span class="line"><span class="comment">// 如果取出的对象为null</span></span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 重新创建一个新的对象，并使用强引用来引用它</span></span><br><span class="line">    obj = recreateIt();</span><br><span class="line">    <span class="comment">// 创建弱引用</span></span><br><span class="line">    wr = <span class="keyword">new</span> WeakReference(obj);</span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">// 操作obj对象      方式2，当if块执行后，obj一定不为null</span></span><br><span class="line"><span class="comment">// 再次切断obj与对象之间的关联</span></span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>关于<strong>修饰符使用范围</strong>的一些总结，以及<strong>jar文件相关的一些命名</strong>，请见书本P240</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Unit-1-Java语言概述与开发环境&quot;&gt;&lt;a href=&quot;#Unit-1-Java语言概述与开发环境&quot; class=&quot;headerlink&quot; title=&quot;Unit 1 Java语言概述与开发环境&quot;&gt;&lt;/a&gt;Unit 1 Java语言概述与开发环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;高级语言的运行机制：&lt;ul&gt;
&lt;li&gt;编译型语言：一次性编译成机器码，可以脱离开发环境独立运行，而且通常运行效率较高。如C、C++、Objective-C、Swift、Kotlin等等。&lt;/li&gt;
&lt;li&gt;解释型语言：使用专门的解释器对源程序逐行解释成特定平台的的机器码并立即执行的语言。如JavaScript、Ruby、Python等等。&lt;/li&gt;
&lt;li&gt;半编译型语言（伪编译型）：如Visual Basic&lt;/li&gt;
&lt;li&gt;Java既不是纯粹的编译型语言，也不是纯粹的解释型语言。编译并不会生成特定平台的机器码，而是生成一种与平台无关的&lt;strong&gt;字节码&lt;/strong&gt;。通过JVM(Java虚拟机)来解释字节码，它是Java程序跨平台的关键部分。JRE(Java运行环境)包括JVM，以及运行Java程序的其他环境支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="//georgeju95.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer（5th）阅读总结</title>
    <link href="//georgeju95.github.io/2019/08/07/2019-08-07-Cpp-Primer-5th/"/>
    <id>//georgeju95.github.io/2019/08/07/2019-08-07-Cpp-Primer-5th/</id>
    <published>2019-08-06T23:47:36.000Z</published>
    <updated>2023-08-29T18:58:12.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unit-1-开始"><a href="#Unit-1-开始" class="headerlink" title="Unit 1 开始"></a>Unit 1 开始</h3><ul><li>标准库定义了四个IO对象：istream对象: cin；ostream对象: cout、cerr(输出警告和错误消息)、clog(输出程序运行时的一般性信息)。</li><li><strong>操纵符</strong> endl：结束单前行，并将与设备关联的缓冲区中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流，而不是仅停留在内存中等待写入流。程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则，如果程序崩溃，输出可能还留在缓冲区中，从而导致关于程序崩溃位置的错误推断。</li></ul><h1 id="Part-1-C-基础"><a href="#Part-1-C-基础" class="headerlink" title="Part 1. C++基础"></a>Part 1. C++基础</h1><a id="more"></a><h3 id="Unit-2-变量和基本类型"><a href="#Unit-2-变量和基本类型" class="headerlink" title="Unit 2 变量和基本类型"></a>Unit 2 变量和基本类型</h3><ul><li><p>初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，而以一个新值来代替。</p></li><li><p><code>C++11</code> 列表初始化(花括号)，初始值存在丢失精度风险的话，编译器将报错。</p></li><li><p>全局变量被初始化为0，定义于函数体内的内置类型的对象如果没有初始化，则其值未定义。类的对象如果没有显示地初始化，则其值由类确定。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;  <span class="comment">//声明i而非定义i</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">double</span> pi = <span class="number">3.1416</span>;   <span class="comment">//定义</span></span><br></pre></td></tr></table></figure><ul><li><p>变量能且只能被定义一次，但是可以被多次声明。</p></li><li><p><code>C++11</code> 中新增了一种引用：<strong>右值引用</strong>(rvalue reference)，将在13.6.1中详细介绍，这种引用主要用于内置类。严格来说，术语“引用”一般指<strong>左值引用</strong>(lvalue reference)。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refVal = ival;  <span class="comment">//refVal指向ival(是ival的另一个名字)</span></span><br><span class="line"><span class="keyword">int</span> &amp;refVal2;  <span class="comment">//报错，引用必须被初始化。</span></span><br></pre></td></tr></table></figure><ul><li><p>定义引用，程序把引用和它的初始值<strong>绑定</strong>在一起，无法令引用重新绑定另一个对象，因此<strong>引用必须初始化</strong>。</p></li><li><p><strong>引用并非对象</strong>，所以不能定义引用的引用。引用只能绑定在对象上，而不能与字面值或者某个表达式的计算结果绑定在一起(除了2.4.1和15.2.3将介绍的两种情况)</p></li><li><p><strong>指针本身就是一个对象</strong>，允许对指针赋值和拷贝，而且在其生命周期内可以先后指向几个不同的对象。<strong>指针无须在定义时赋初值</strong>。</p></li><li><p><code>C++11</code> 空指针nullptr，是一种特殊类型的字面值，它可以被转换成任意其他的指针类型。</p></li><li><p>指针和引用都能提供对其他对象的间接访问，但是注意其以上不同之处。</p></li><li><p>Void* 指针可以存放任意对象的地址，但不能直接操作其所指的对象，因为我们并不知道这个对象到底是什么类型，也就无法确定能在这个对象上做哪些操作。</p></li><li><p><strong>const对象</strong>一旦创建后其值就不能再改变，所以const对象必须初始化。 </p></li><li><p>程序员常把<strong>“对const的引用”</strong>简称为<strong>“常量引用”</strong>(一种习惯叫法)，与普通引用不同，对常量的引用不能被用作修改它所绑定的对象。</p></li><li><p>对const的引用可以引用一个并非const的对象</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r1 = i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;  <span class="comment">// r2也绑定i，但是不允许通过r2修改i的值</span></span><br><span class="line">r1 = <span class="number">0</span>;</span><br><span class="line">r2 = <span class="number">0</span>;  <span class="comment">// 错误，r2是一个常量引用</span></span><br></pre></td></tr></table></figure><ul><li>类似于常量引用，<strong>指向常量的指针</strong>(可以不初始化)不能用于改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针</li><li>允许令一个指向常量的指针指向一个非常量对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr = &amp;pi;  <span class="comment">// 错误，ptr只是一个普通指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;</span><br><span class="line">*cptr = <span class="number">42</span>;  <span class="comment">// 错误，不能给*cptr赋值</span></span><br><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line">cptr = &amp;dval;</span><br></pre></td></tr></table></figure><ul><li>所谓指向常量的指针或引用，仅仅要求不能通过它们改变对象的值，而没有规定那个对象的值不能通过其他途径改变。</li><li>因为指针本身即对象，允许把指针本身定位常量，即<strong>const指针</strong>，也就是<strong>常量指针</strong>(必须初始化)，一旦初始化完成，它的值(也就是存放在指针中的地址)就不能改变了。不变的是指针本身的值，而不是指向的那个值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;  <span class="comment">// curErr将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;  <span class="comment">// pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure><ul><li><strong>顶层const</strong>表示指针本身是个常量，<strong>底层const</strong>表示指针所指的对象是一个常量。可以扩展到一般，指针比较特殊，既可以是顶层const也可以是底层const。用于声明引用的const都是底层const。</li><li>当执行对象的拷贝操作时，常量是顶层const还是底层const影响明显。其中，顶层const不受什么影响；<strong>底层const的限制却不能忽视</strong>。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换。一般来说，非常量可以转换成常量，反之则不行。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;i;  <span class="comment">// 不能改变p1的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">42</span>;  <span class="comment">// 不能改变ci的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;ci;  <span class="comment">// 允许改p2的值(这是指向常量的指针)，底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2;  <span class="comment">// 靠右，顶层；靠左，底层</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = ci;  <span class="comment">// 用于声明引用的const都是底层const</span></span><br><span class="line">i = ci;  <span class="comment">// 正确，ci是一个顶层，无影响</span></span><br><span class="line">p2 = p3;  <span class="comment">// 正确，指向对象类型相同，p3顶层部分不影响</span></span><br><span class="line"><span class="keyword">int</span> *p = p3;  <span class="comment">// 错误，p3包含底层const，p没有</span></span><br><span class="line">p2 = p3;  <span class="comment">// 正确，都是底层</span></span><br><span class="line">p2 = &amp;i;  <span class="comment">// 正确，int* 可以转换成 const int*</span></span><br><span class="line"><span class="keyword">int</span> &amp;r = ci;  <span class="comment">// 错误，普通的int&amp; 不能绑定到int常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;  <span class="comment">// 正确，const int&amp; 可以绑定到一个普通int</span></span><br></pre></td></tr></table></figure><ul><li><code>C++11</code> 声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化。</li><li>算数类型、引用、指针属于字面值类型。自定义类、IO库、string类型不属于，也就不能被定义成constexpr。</li><li>必须明确一点，在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指对象无关。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">nullptr</span>;  <span class="comment">// p是一个指向整型常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *q = <span class="literal">nullptr</span>;  <span class="comment">// q是一个指向整数的常量指针</span></span><br></pre></td></tr></table></figure><ul><li><code>C++11</code> 别名声明 <strong>using</strong> SI = Sales_item;（类似于传统typedef）。<strong>auto</strong>类型说明符，让编译器通过初始值来推算变量的类型。显然，auto定义的变量必须有初始值。<strong>decltype</strong>类型说明符，选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(f()) sum = x;  <span class="comment">// sum的类型就是函数f的返回类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">0</span>, &amp;cj = ci;</span><br><span class="line"><span class="keyword">decltype</span>(ci) x = <span class="number">0</span>;  <span class="comment">// x的类型是const int</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) y = x;  <span class="comment">// y是const int&amp;，y绑定到x</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) z;  <span class="comment">// 错误，z是一个引用，必须初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式内容是解引用操作，得到的是引用类型</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>, *p = &amp;i;</span><br><span class="line"><span class="keyword">decltype</span>(*p) c;  <span class="comment">// 错误，c是int&amp;，必须初始化</span></span><br><span class="line"><span class="comment">// 表达式如果是加上了括号的变量，结果将是引用</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d;  <span class="comment">// 错误，d是int &amp;，必须初始化。双层括号结果永远是引用。</span></span><br><span class="line"><span class="keyword">decltype</span>(i) e;  <span class="comment">// 正确，e是一个(未初始化)的int</span></span><br></pre></td></tr></table></figure><ul><li>预处理功能： #include；头文件保护符，依赖于预处理变量，#ifndef   #define   #endif</li></ul><h3 id="Unit-3-字符串、向量和数组"><a href="#Unit-3-字符串、向量和数组" class="headerlink" title="Unit 3 字符串、向量和数组"></a>Unit 3 字符串、向量和数组</h3><ul><li><p>为了与C兼容，<strong>字符串常量与string类型不是同一种类型</strong></p></li><li><p>读取操作，string对象会自动忽略开头处的空白（即空格符、换行符、制表符等）并从第一个真正的字符开始读起，直到遇见下一处空白为止。</p></li><li><p>getline(cin, s); 不忽略开头的空白字符，遇见换行符为止（不把换行符存入s）。</p></li><li><p>字符串常量的加法是非法的，string变量与字符串常量的加法是合法的。</p></li><li><p>范围for语句，该语句体不应改变其所遍历序列的大小。for(auto c : str) cout &lt;&lt; c &lt;&lt; endl;</p></li><li><p>类模板vector初始化，成为类类型：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;  <span class="comment">// 默认初始化，类型为T的空vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2(v1);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v3(n, val); <span class="comment">// n个元素，每个都是val</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1(n);  <span class="comment">// n个重复执行了值初始化的对象</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1(a, b, c...);</span><br></pre></td></tr></table></figure><ul><li><p>迭代器：一种检查容器内元素并遍历元素的数据类型，标准库为每种标准容器定义了一种迭代器类型。若为::const_iterator iter;则该类型只能用于读取容器内元素，但不能改变其值。如果容器对象是一个常量，只能使用const_iterater，不是常量，两种类型的迭代器都可以。<code>C++11</code> 引入了两个新函数，<strong>cbegin和cend</strong>，也返回第一个和最后一个元素的下一个位置，但是无论容器对象本身是否是常量，返回值都是const_iterater。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt;::iterator iter;</span><br><span class="line">iter = v1.begin();</span><br><span class="line">iter = v1.end();  <span class="comment">//尾后迭代器，返回指向容器“尾元素的下一位置”</span></span><br></pre></td></tr></table></figure></li><li><p>任何改变vector长度的操作都会使已存在的迭代器失效。</p></li><li><p>C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。详细见该博客<a href="https://www.cnblogs.com/magisk/p/8809922.html" target="_blank" rel="noopener">C++ bitset 用法</a>，注意foo[2]，foo.flip(2)，这种下标是从右边数起 (也是从0开始)。</p></li><li><p>只有追求高性能时，才用数组。一般情况推荐用vector</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> b[<span class="number">2</span>] = &#123;<span class="string">"hi"</span>, <span class="string">"bye"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"c++"</span>;  <span class="comment">// c[3] = '\0';</span></span><br><span class="line"><span class="keyword">int</span> *prts[<span class="number">10</span>]; <span class="comment">// 指针数组，该数组含有10个整型指针</span></span><br><span class="line"><span class="keyword">int</span> &amp;refs[<span class="number">10</span>] = <span class="comment">/* ? */</span>     <span class="comment">//错误，不存在引用的数组</span></span><br><span class="line"><span class="keyword">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr;   <span class="comment">//数组指针，指向一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> (&amp;Parray)[<span class="number">10</span>] = arr;    <span class="comment">//数组引用，引用一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> *beg = begin(arr);  <span class="comment">// C++11引入，与容器的两个同名函数功能类似，但是数组不是类类型，因此这两个函数不是成员函数</span></span><br><span class="line"><span class="keyword">int</span> *last = end(arr);   <span class="comment">// 指向arr尾元素的下一位置的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>] = ia;  <span class="comment">// p指向含有4个整数的数组</span></span><br><span class="line">p = &amp;ia[<span class="number">2</span>];   <span class="comment">// p指向ia的尾元素，也就是最后一行</span></span><br><span class="line"><span class="comment">// &amp;*(ia+2)指向行元素，ia[2]、*(ia+2)、&amp;ia[2][0]，指向最后一行的首元素地址，即指向列元素。</span></span><br></pre></td></tr></table></figure><ul><li>C++允许计算数组或对象时超出末端的地址，但不允许对其解引用。</li><li>数组的名字其实是一个指向数组首元素的指针，对数组执行下标运算其实是对指向数组元素的指针执行下标运算。虽然标准库类型string和vector也能执行下标运算，但是数组与它们相比还是有所不同。标准库类型限定使用的下标必须是无符号类型，而内置的下标运算无此要求。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> rowCnt = <span class="number">3</span>, colCnt = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> ia[rowCnt][colCnt];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i!=rowCnt; ++i)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">size_t</span> j=<span class="number">0</span>; j!=colCnt; ++j) &#123;</span><br><span class="line">    ia[i][j] = i*colCnt + j;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 范围for处理ia这个二维数组，等价于上面的写法</span></span><br><span class="line"><span class="keyword">size_t</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;row : ia)     <span class="comment">// 范围for处理多维数组，除了最内层的循环变量外，其他所有的循环控制变量都应该是引用类型，这是为了避免数组被自动转成指针</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;col : row) &#123;</span><br><span class="line">    col = cnt;</span><br><span class="line">    ++cnt;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Unit-4-表达式"><a href="#Unit-4-表达式" class="headerlink" title="Unit 4 表达式"></a>Unit 4 表达式</h3><ul><li><p>&amp;&amp;的短路特性（前面的不满足后面的不用判断），||的并流特性（前面的一旦满足，后面的不用看）</p></li><li><p>当一个对象被用作<strong>右值</strong>时，用的是对象的值（内容）；当对象被用作<strong>左值</strong>的时候，用的是对象的身份（在内存的位置）。需要右值的地方，可以用左值来代替，但是不能把右值当成左值（也就是位置）使用。当一个左值被当成右值时，实际使用的是它的内容（值）。</p><ul><li><p>赋值运算符需要一个(非常量)左值作为其左侧运算对象，得到的结果也仍然是一个左值。</p></li><li><p>取地址符作用于一个左值运算对象，返回一个指针，这个指针是一个右值。</p></li><li><p>内置解引用运算符，下标运算符、迭代器解引用运算符、string和vector的下标运算符的求值结果都是左值。</p></li><li><p>内置类型和迭代器的递增递减作用于左值运算对象，其前置版本所得结果也是左值。</p></li><li><p>如果表达式的求值结果是左值，decltype作用于该表达式（不是变量）得到一个引用类型。假如p是int *，因为解引用生成左值，所以decltype(※p)是int &amp;；因为取地址符生成右值，所有decltype(&amp;p)的结果是int ※※，也就是一个指向整形指针的指针。</p></li></ul></li><li><p>递增和递减运算符：都必须作用于左值运算对象，<strong>前置版本</strong>将对象本身作为左值返回，<strong>后置版本</strong>则将对象原始值的副本作为右值返回。如无特殊必要(如果我们想要在一条复合表达式中既将变量加1或减1又能使用它原来的值，这时使用后置版本)，建议养成使用前置版本的习惯（开销更小，尤其是在复杂迭代器中）。</p></li><li><p>强制类型转换：（建议避免使用）</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：cast-name&lt;type&gt;(expression)</span><br><span class="line"><span class="keyword">static_cast</span>  <span class="comment">// 任何具有明确定义的类型转换，只要不包括底层const，都可以使用它。常用于替代由编译器隐式执行的类型转换。</span></span><br><span class="line"><span class="keyword">const_cast</span>   <span class="comment">// 只能改变运算对象的底层const</span></span><br><span class="line"><span class="keyword">reinterpret_cast</span> <span class="comment">// 通常为运算对象的位模式提供较低层次上的重新解释</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>  <span class="comment">// 支持运行时类型识别(19.2节 p730)</span></span><br></pre></td></tr></table></figure><h3 id="Unit-5-语句"><a href="#Unit-5-语句" class="headerlink" title="Unit 5 语句"></a>Unit 5 语句</h3><ul><li><p>Switch case，case标签必须是整型常量表达式</p></li><li><p>跳转语句：break、continue、goto(语法：goto <em>label</em>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin:</span><br><span class="line"><span class="keyword">int</span> sz = get_size();</span><br><span class="line"><span class="keyword">if</span>(sz &lt;= <span class="number">0</span>) <span class="keyword">goto</span> begin;</span><br></pre></td></tr></table></figure></li><li><p>异常处理</p><ul><li><strong>throw</strong>表达式，异常检测部分使用throw表达式来表示它遇到了无法处理的问题。我们说throw<strong>引发</strong>了异常。</li><li><strong>try</strong>语句块，异常处理部分使用try语句块处理异常。try语句块以关键字try开始，并以一个或多个<strong>catch子句</strong>结束。try语句块中代码抛出的异常通常会被某个catch子句处理。</li><li>一套<strong>异常类</strong>，用于在throw表达式和相关的catch子句之间传递异常的具体信息。</li><li>如果一段程序没有try语句块且发生了异常，系统会调用terminate函数并终止当前程序的进行。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(item1.isbn() != item2.isbn())</span><br><span class="line"><span class="keyword">throw</span> runtime_error(<span class="string">"Data must refer to same ISBN"</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; item1 + item2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行添加两个Sales_ittem对象的代码</span></span><br><span class="line"><span class="comment">// 如果添加失败，代码抛出一个runtime_error异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (runtime_error) &#123;</span><br><span class="line"><span class="comment">// 提醒用户两个ISBN必须一致，询问是否重新输入</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; err.what()</span><br><span class="line">       &lt;&lt; <span class="string">"\nTry Again？Enter y or n"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">cin</span> || c == <span class="string">'n'</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unit-6-函数"><a href="#Unit-6-函数" class="headerlink" title="Unit 6. 函数"></a>Unit 6. 函数</h3><ul><li><p><strong>传引用参数</strong>：使用引用避免拷贝、使用引用形参返回额外信息。当某种类型不支持拷贝操作时，函数只能通过引用形参访问该类型的对象。</p></li><li><p>尽量使用<strong>常量引用</strong>。这样这个参数不会改变；而且使用引用而非常量引用也会极大地限制函数所能接受的实参类型。</p></li><li><p>若形参是数组的引用，则编译器不会将数组参数化为指针，而是传递数组的引用本身。</p></li><li><p>确保不越界的方法：</p><ul><li>数组本身放置一个结束标记，如null</li><li>传递指向数组第一个和最后一个元素的下个位置的指针</li><li>将第二个形参定义为表示数组的大小</li></ul></li><li><p>函数重载。调用这些函数时，编译器根据传递的实参类型推断想要的是哪个函数。对于重载函数来说，应该在形参数量或类型上有所不同。不允许两个函数除了返回类型外其他所有的要素都相同。</p></li><li><p>顶层const不影响传入函数的对象，即一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来。如果形参是某种类型的指针或引用，则通过区分其指向的是常量对象还是非常量对象可以实现函数重载，此时的const是<strong>底层</strong>的。</p></li><li><p><strong>内联函数</strong>：将它在每个调用点上”内联地“展开。在函数的返回类型前面加上关键字<strong>inline</strong>。一般内联机制使用于小的只有几行且经常被调用的函数，不支持递归函数。</p></li><li><p>constexpr函数，指能用于常量表达式的函数：函数的返回值类型及所有形参的类型都是字面值类型，而且函数体中必须有且只有一条return语句。一个constexpr函数被隐式地声明成内联函数。</p></li><li><p>内联函数和constexpr函数通常定义在头文件中。不同于一般函数，因为编译器必须看到定义才能展开。</p></li><li><p>调试帮助：</p><ul><li><p>预处理宏assert(expr)：定义在cassert头文件中。对expr求值，表达式为0，assert输出信息并终止程序；为真，assert什么也不做。</p></li><li><p>NDEBUG预处理变量，如果定义了它，则assert什么也不做。可以用其编写自己的条件测试代码，如果NDEBUG未定义，将执行#ifndef和#endif之间的代码；如果定义了，这些代码将会被忽略掉。</p></li></ul></li><li><p>函数指针，指向函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> (*pf)lengthCompare(<span class="keyword">const</span> <span class="built_in">string</span> &amp;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;); <span class="comment">//未初始化的函数指针，括号不能少</span></span><br><span class="line">pf = lengthCompare; pf = &amp;lengthCompare; <span class="comment">// 等价的赋值语句</span></span><br><span class="line"><span class="keyword">bool</span> b1 = pf(<span class="string">"hello"</span>, <span class="string">"goodbye"</span>);</span><br><span class="line"><span class="keyword">bool</span> b2 = (*pf)(<span class="string">"hello"</span>, <span class="string">"goodbye"</span>); <span class="comment">// 等价的调用，无需提前解引用。</span></span><br></pre></td></tr></table></figure></li><li><p>重载函数的指针，编译器通过指针类型决定选用哪个函数。</p></li><li><p><code>C++11</code>含有可变形参的函数。了解一个<strong>initializer_list</strong>，标准类，表示的是一组花括号包围的类型相同的对象，对象之间以逗号隔开（某种特定类型的值的数组）。如果实参类型不同，可以编写一种特殊的函数，也就是所谓的<strong>可变参数模板</strong>。</p></li></ul><p>第7章进入类，由于暂时不想深究C++了(先学Java 233)，所以先告一段落。（暑假看过类这一章，但是忘的差不多，所以如果以后要学C++，就出此处出发~~）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Unit-1-开始&quot;&gt;&lt;a href=&quot;#Unit-1-开始&quot; class=&quot;headerlink&quot; title=&quot;Unit 1 开始&quot;&gt;&lt;/a&gt;Unit 1 开始&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;标准库定义了四个IO对象：istream对象: cin；ostream对象: cout、cerr(输出警告和错误消息)、clog(输出程序运行时的一般性信息)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操纵符&lt;/strong&gt; endl：结束单前行，并将与设备关联的缓冲区中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流，而不是仅停留在内存中等待写入流。程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则，如果程序崩溃，输出可能还留在缓冲区中，从而导致关于程序崩溃位置的错误推断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Part-1-C-基础&quot;&gt;&lt;a href=&quot;#Part-1-C-基础&quot; class=&quot;headerlink&quot; title=&quot;Part 1. C++基础&quot;&gt;&lt;/a&gt;Part 1. C++基础&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C++" scheme="//georgeju95.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>视觉SLAM第三讲——三维空间刚体运动</title>
    <link href="//georgeju95.github.io/2019/08/04/2019-08-04-Visual-SLAM-3-Motion-In-3D/"/>
    <id>//georgeju95.github.io/2019/08/04/2019-08-04-Visual-SLAM-3-Motion-In-3D/</id>
    <published>2019-08-04T06:30:00.000Z</published>
    <updated>2023-08-29T18:58:12.339Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讲述如何描述刚体在三维空间中的运动，有四种方式：旋转矩阵、旋转向量(角轴)、四元数、欧拉角，实践部分介绍线性代数库Eigen(一个纯粹用头文件搭建起来的库)</p><a id="more"></a><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><p>对于$\mathbb R^3$</p><ul><li>内积：$$\rm \mathbf a\cdot \mathbf b=\mathbf a^\intercal \mathbf b=\sum_{i=1}^3a_ib_i=\bf \left| a \right|\left| b \right| \cos\left &lt;a,b \right&gt;$$内积可以描述向量间的投影关系。</li><li>外积：$$\rm \mathbf a\times \mathbf b=\begin{Vmatrix} i&amp;j&amp;k \\ a_1&amp;a_2&amp;a_3 \\ b_1&amp;b_2&amp;b_3 \end{Vmatrix}=\begin{bmatrix} a_2b_3-a_3b_2 \\ a_3b_1-a_1b_3 \\ a_1b_2-a_2b_1 \end{bmatrix}=\begin{bmatrix} 0&amp;-a_3&amp;a_3 \\ a_3&amp;0&amp;-a_1 \\ -a_2&amp;a_1&amp;0 \end{bmatrix}\mathbf b=\mathbf a^\land \mathbf b$$ 外积只对三维向量存在定义，能用外积表示向量的旋转。<strong>$\land$可以记成一个反对称符号</strong>，对向量$\bf a$做$\land$运算，把它变成了一个反对称矩阵。</li><li><strong>旋转矩阵</strong>是一个行列式为1的正交矩阵，反之，行列式为1的正交矩阵也是一个旋转矩阵。所以可以把旋转矩阵的集合定义为<strong>特殊正交群</strong>$$\rm SO(n)=\{\, \mathbf R\in\mathbb R^{n\times n}|\mathbf R\mathbf R^\intercal=\mathbf I,\,det(\mathbf R)=1\,\}$$旋转矩阵可以描述相机的旋转，我们用一个旋转矩阵$\mathbf R$和一个平移向量$\bf t$完整的描述了一个欧式空间的坐标变换关系，即$\bf a’=Ra+t$。这样的形式在变换多次后会过于复杂，因此我们引入了<mark>齐次坐标</mark>(三维向量的末尾添加1，将其变为了四维向量)和<mark>变换矩阵</mark>$$\begin{bmatrix} \mathbf a’ \\ 1\end{bmatrix}=\begin{bmatrix} \mathbf R&amp;\mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \begin{bmatrix} \mathbf a\\ 1\end{bmatrix}=\mathbf T\begin{bmatrix} \mathbf a\\ 1\end{bmatrix}$$关于变换矩阵$\bf T$，左上角为旋转矩阵，右上角为平移向量，左下角为0向量，右下角为1，这种矩阵又被称为<strong>特殊欧式群</strong>：$$\rm SE(3)=\{\,\mathbf T=\begin{bmatrix} \mathbf R&amp;\mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \in\mathbb R^{4\times 4}|\mathbf R\in SO(3), \mathbf t \in \mathbb R^3\,\}$$</li></ul><h2 id="旋转向量"><a href="#旋转向量" class="headerlink" title="旋转向量"></a>旋转向量</h2><p>矩阵表示方式有如下缺点：</p><ul><li><p>SO(3)的旋转矩阵有9个量，但一次旋转只有3个自由度，因此这种表示方式是冗余的。同理，变换矩阵用16个量表达了6自由度的变换。</p></li><li><p>旋转矩阵自身带有约束：它必须是个正交矩阵，且行列式为1.</p></li></ul><p>我们知道，外积可以表示两个向量的旋转关系，任意旋转都可以用一个旋转轴和一个旋转角来刻画。于是引入<strong>旋转向量</strong>来描述旋转，其方向与旋转轴一致，而长度等于旋转角。这种表示只需要一个三维向量即可描述旋转。同样对于变换矩阵，使用一个旋转向量和一个平移向量即可表达一次变换。这时的维数正好是六维。事实上旋转向量就是<strong>李代数</strong>。</p><h4 id="罗德里格斯公式："><a href="#罗德里格斯公式：" class="headerlink" title="罗德里格斯公式："></a>罗德里格斯公式：</h4><p>从旋转向量到旋转矩阵的转换过程由该公式描述：假设有一个旋转轴为$\bf n$，角度为$\theta$的旋转，即它对应的旋转向量为$\theta \bf n$.</p><p>$$\bf R=\cos\theta I+(1-\cos\theta)nn^\intercal+\sin\theta n^\land$$反过来也可。对于$\theta$，对公式两边取迹，有：$$\theta=\arccos(\frac{tr(\mathbf R)-1}{2})$$关于转轴$\bf n$，由于旋转轴上的向量在旋转后不发生改变，说明$$\bf Rn=n$$因此，转轴$\bf n$是矩阵$\bf R$特征值为1对应的特征向量。求解此方程，再归一化，就得到了旋转轴。</p><h2 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h2><p>无论是旋转矩阵、旋转向量，它们虽然能描述旋转，但对我们人类是非常不直观的。而欧拉角则提供了一种非常直观的方式来描述旋转——它使用了<strong>3个分离的转角</strong>，把一个旋转分解成3次绕不同轴的旋转。常用的有<strong>ZYX(“偏航yaw-俯仰pitch-滚转roll”)</strong>。欧拉角有一个重大缺点是会碰到著名的<strong>万向锁问题</strong>(Gimbal Lock)：在俯仰角为±90°时，第一次和第三次旋转将使用同一个轴，使得系统丢失了一个自由度。这被称为<strong>奇异性问题</strong>，理论上可以证明，<u>只要想用3个实数来表达三维旋转时，都会不可避免地碰到奇异性问题</u>。</p><p>所以欧拉角不适于插值和迭代，往往只用于人机交互中。也很少在SLAM程序中直接使用欧拉角表达姿态，同样不会再滤波或优化中使用欧拉角表达旋转(因为奇异性)。不过，若想验证自己的算法是否有错，转换成欧拉角能够快速分辨结果是否正确。</p><h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><p><mark>旋转矩阵具有冗余性；欧拉角和旋转向量紧凑，但是具有奇异性。</mark>事实上，我们找不到<strong>不带奇异性的三维向量描述方式</strong>。类似于用复数集表示复平面上的向量，在表达三维空间旋转时，也有一种类似于复数的代数：<strong>四元数</strong>(Quaternion)。它<strong>既是紧凑的，也没有奇异性</strong>。缺点就是不够直观，运算稍微复杂。$$\mathbf q=q_0+q_1i+q_2j+q_3k$$</p><p>三个虚部i, j ,k满足：“自己和自己的运算类比复数，自己和别人的运算类比叉乘”</p><p>单位四元数能表达三维空间的旋转，角轴(旋转向量)和四元数可以互相转换。假设某个旋转是绕单位向量$\mathbf n=[n_x, n_y, n_z]^\intercal$进行了角度为$\theta$的旋转：$$\mathbf q=[\cos\frac{\theta}{2},n_x\sin\frac{\theta}{2},n_y\sin\frac{\theta}{2},n_z\sin\frac{\theta}{2}]$$反之：$$\begin{equation} \left\{ \begin{array}{lcl} \theta =2\arccos q_0 \\ [n_x,n_y,n_z]^\intercal =[q_1,q_2,q_3]^\intercal/\sin\frac{\theta}{2}\end{array} \right.\end{equation}$$四元数和旋转矩阵的转换以及四元数如何表示旋转见《视觉SLAM十四讲》P55，四元数的运算见P53。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要讲述如何描述刚体在三维空间中的运动，有四种方式：旋转矩阵、旋转向量(角轴)、四元数、欧拉角，实践部分介绍线性代数库Eigen(一个纯粹用头文件搭建起来的库)&lt;/p&gt;
    
    </summary>
    
    
      <category term="视觉SLAM十四讲" scheme="//georgeju95.github.io/tags/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>多视角几何总结</title>
    <link href="//georgeju95.github.io/2019/08/02/2019-08-02-A-Summary-Of-MVG/"/>
    <id>//georgeju95.github.io/2019/08/02/2019-08-02-A-Summary-Of-MVG/</id>
    <published>2019-08-02T12:40:36.000Z</published>
    <updated>2023-08-29T18:58:12.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-多视角几何纵览"><a href="#第一章-多视角几何纵览" class="headerlink" title="第一章 多视角几何纵览"></a>第一章 多视角几何纵览</h1><ul><li><p>平面的射影变换定义为平面上点的任意<strong>保直线映射</strong>。</p></li><li><p><strong>射影空间</strong>是欧几里德空间的延伸(通过齐次向量表示点)，两条线总是在一个点上相遇(有时这个点是无穷远点)。</p></li><li><p>二维射影空间中的无穷远点形成一条线，通常称为<strong>无穷远线</strong>。它们在三维空间中形成了<strong>无穷远平面</strong>。</p><a id="more"></a></li><li><p>空间自身变换和旋转到了不同位置——<strong>欧式变换</strong>；空间的移动、旋转，以及最后在不同方向可能按不同比例进行线性缩放——<strong>仿射变换</strong>。欧氏变换或仿射变换的结果是，无穷远点仍然在无穷远。</p></li><li><p>射影空间$\mathbb P^n$的<strong>射影变换</strong>表示为齐次坐标的线性变换。$$ \mathbf X^\prime=\mathrm H_{(n+1)\times (n+1)}\mathbf X. $$ 无穷远点映射到任意其它点，没有保持无穷远点。</p></li><li><p>射影平面的几何加上一条特殊的线被称为<strong>仿射几何</strong>，将一个空间中的该特殊线映射到另一个空间中特殊线的任何射影变换称为<strong>仿射变换</strong>。</p></li><li><p>平面的<strong>虚圆环点</strong>：圆方程的齐次坐标$(x,y,w)$形式形如：$$(x-aw)^2+(y-bw)^2=r^2w^2$$该方法用圆心表示圆，圆心用齐次坐标表示为$(x_0,y_0,w_0)^\top=(a,b,1)^\top$。可以很快验证点$(x,y,w)^\top=(1,\pm i,0)^\top$在这类圆上。重复一下这个有趣的事实，<u>每个圆都通过点</u>$(1,\pm i,0)^\top$，<u>因此它们存在于任意两个圆的交点</u>。由于它们最后的坐标为零，因此这两个点位于无穷远线上。由于显而易见的原因，它们被称为<mark>平面的虚圆环点（circular point）</mark>。</p></li><li><p>位于无穷远平面上的二阶曲线（圆锥曲线），且仅由复数点构成。称为<strong>绝对圆锥曲线</strong>：通过确定无穷远线和一对虚圆环点，我们清楚了如何根据射影平面确定欧氏平面。同样的思想可用于三维几何。如同二维情况，可以仔细观察球体，考察它们如何相交。就像代数上认为的那样，也如同两个一般椭球（或其它的二次曲面）那样，两个球体交于一个圆，而非一般的四阶曲线。这一思路导致了新发现，在齐次坐标系$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$，所有球体与无穷远平面相交的曲线满足方程：$\mathrm X^2+\mathrm Y^2+\mathrm Z^2=0; \mathrm T=0$。这是位于无穷远平面上的二阶曲线（圆锥曲线），且仅由复数点构成。它称为<mark>绝对圆锥曲线</mark>。尤其鉴于它和摄像机标定相关，它是本书的关键几何实体之一，正如将在后文看到的那样。以上方程定义的绝对圆锥曲线，只存在于欧氏坐标系统。挑选一个特殊的平面作为无穷远平面，并指定位于该平面的一条特殊的圆锥曲线作为绝对圆锥曲线，通常我们可以认为三维欧氏空间是从射影空间由此推导的。基于射影空间的坐标系统，可以对这些实体进行很普适的描述。</p></li><li><p>通过确定无穷远线和一对虚圆环点，即根据<strong>射影平面确定欧氏平面</strong>。挑选一个特殊的平面作为无穷远平面，并指定位于该平面的一条特殊的圆锥曲线作为绝对圆锥曲线，即<strong>射影空间确定三维欧式空间</strong>。</p></li><li><p><strong>线的垂直</strong>可以用绝对圆锥曲线来定义。空间中直线的垂直不是仿射几何中的合法概念，但是属于欧氏几何。线的垂直可以用绝对圆锥曲线来定义，如下所述。延长两条线，直到它们与平面交于无穷远，我们得到的两点称为这两条线的方向点（direction）。线的垂直通过到绝对圆锥曲线的这两个方向点间的关系确定。<mark>如果两个方向点是关于绝对圆锥曲线的共轭点，则直线是垂直的</mark>（参见图3.8（p83）[图2.8 v1-p48]）。共轭点的几何和代数表示在2.8.1节（p58）[v1 p29]中定义。简而言之，如果绝对圆锥曲线由3×3对称矩阵$\mathrm\Omega_\infty$表示，并且方向点是$\mathbf d_1$和$\mathbf d_2$，当$\mathbf d_1^\top\mathrm\Omega_\infty\mathbf d_2=0$时，那么它们关于$\mathrm\Omega_\infty$共轭。</p></li><li><p><strong>摄像机矩阵</strong>：为了在成像过程应用射影几何，通常将现实世界建模为三维射影空间，等价于$\mathbb R^3$附带无穷远点。图像模型是类似的二维射影平面$\mathbb P^2$。中心射影不过是$\mathbb P^3$到$\mathbb P^2$的一个映射。如果我们考虑点记为齐次坐标$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$的形式，且射影中心是原点$(0,0,0,1)^\top$，那么我们看到，固定$\mathrm X$、$\mathrm Y$和$\mathrm Z$并改变$\rm T$所得的全部点$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$组成的集合，形成穿过射影中心点的一条射线，因而这些点都映射到相同的点。因此，$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)$的最后坐标和点在哪里成像无关。像点（image point）事实上是$\mathbb P^2$中的点，齐次坐标为$(\mathrm X,\mathrm Y,\mathrm Z)$。因此，该映射可表示为三维齐次坐标的一个映射，记为$3\times 4$的矩阵$\mathrm P$，其块结构记为$\mathrm P=\left[\mathrm I_{3\times 3}\vert\mathbf 0_3\right]$，其中$\mathrm I_{3\times 3}$是$3\times 3$的单位矩阵，$\mathbf 0_3$是三维零向量。考察不同的射影中心，以及图像不同的射影坐标系，最一般的成像射影表示为任一秩3的$3\times 4$矩阵，它作用于$\mathbb P^3$中点的齐次坐标，将其映射到$\mathbb P^2$中的成像点。该矩阵$\mathrm P$称为<mark>摄像机矩阵</mark>。<br>总之，射影摄像机在空间中一个点上的操作，可利用线性的齐次坐标映射表示为：$$\begin{pmatrix}x \\ y \\ w\end{pmatrix}=\mathrm{P}_{3\times4}\begin{pmatrix}\mathrm{X} \\ \mathrm{Y} \\ \mathrm{Z} \\ \mathrm{T}\end{pmatrix}$$此外，如果所有点都位于一个平面上（我们可以将其选择为平面Z = 0），那么线性映射将简化为$$\begin{pmatrix}x \\ y \\ w\end{pmatrix}=\mathrm{H}_{3\times3}\begin{pmatrix}\mathrm{X} \\ \mathrm{Y} \\ \mathrm{T}\end{pmatrix}$$它是一种射影变换。</p></li><li><p>为了彻底弄清图像与现实世界的欧氏关系，有必要叙述它们相关的欧氏几何。如我们所见，通过设定$\mathbb P^3$中特定平面为无穷远平面，确定了三维世界的欧氏几何，并将该平面中特定的圆锥曲线$\mathrm\Omega$作为绝对圆锥曲线。对位于无穷远平面之外的摄像机，现实世界中的无穷远平面一一映射到了像平面。这就是为什么图像中任一点确定了空间中的一条射线，该射线与无穷远平面交于一点。因此，现实世界中的无穷远平面，不会告诉我们关于图像的任何新东西。绝对圆锥曲线，尽管是无穷远平面中的一条圆锥曲线，必投影为图像中的一条圆锥曲线。所得的图像曲线，称为<mark>绝对圆锥曲线的图像（Image of the Absolute Conic），或者IAC</mark>。若已知IAC在图像中的位置，那么我们称摄像机<mark>已标定</mark>。</p></li><li><p>从双视中重建点集的基本工具是<mark>基础矩阵</mark>（fundamental matrix），它描述了同一三维点的像点$\mathbf x$和$\mathbf x^\prime$满足的约束。该约束源自于这两个视图的摄像机中心、像点以及空间点的共面性。令基础矩阵为$\mathrm F$，匹配的点对$\mathbf x_i\leftrightarrow \mathbf x_i^\prime$必须满足: $$\mathbf x_i^{\prime\top}\mathrm F\mathbf x_i = 0$$其中$\mathrm F$是一个秩为$2$的$3\times 3$矩阵。这些方程是线性的，系数是矩阵$\mathrm F$。这意味着若$\mathrm F$未知，那么它可由一组对应点计算。一对摄像机矩阵$\mathrm P$和$\mathrm P^\prime$唯一确定了一个基础矩阵$\mathrm F$，反之，该基础矩阵确定了三维射影歧义下一对摄像机矩阵。因此，基础矩阵蕴涵了这对摄像机的全部射影几何，并且不被三维射影变换所改变。<br>基础矩阵法重建场景非常简便，包含以下步骤：</p><ul><li>给定两视图间的几个对应点$\mathbf x_i\leftrightarrow\mathbf x_i^\prime$，基于共面方程$\mathbf x_i^{\prime\top}\mathrm F\mathbf x_i=0$，构造系数为$\mathrm F$的线性方程。</li><li>找出线性方程组的解$\mathrm F$。</li><li>根据9.5节(p253[v1 p171])中给出的简单公式由$\mathrm F$计算一对摄像机矩阵。</li><li>给定两个摄像机$\left(\mathrm P, \mathrm P^\prime\right)$及对应像点对$\mathbf x_i\leftrightarrow\mathbf x_i^\prime$，找出投影到给定像点的三维点$\mathbf X_i$。这种求解$\mathbf X$的方法称为<mark>三角测量法</mark>。</li></ul></li></ul><p>此处只给出了算法的梗概，本书详细探讨了其中的每部分。</p><h1 id="第二章-rm-2D-射影几何和变换"><a href="#第二章-rm-2D-射影几何和变换" class="headerlink" title="第二章 $\rm 2D$射影几何和变换"></a>第二章 $\rm 2D$射影几何和变换</h1><ul><li><p>矢量就是点，对称矩阵就是二次曲线(一段圆锥曲线)</p></li><li><p>齐次矢量：对于线，形如$ax+by+c=0$的方程表示平面上的一条直线，因此也可用矢量$(a, b, c)^\intercal$表示；对于点，把“1”作为增加的最后一个坐标使$\mathbb R^2$中的点$(x, y)^\intercal$表示成3维矢量。</p></li><li><p><strong>结论2.1</strong>：点$\mathbf x$在直线$\mathbf l$上的充要条件是$\mathbf x^\intercal \mathbf l = 0$.</p></li><li><p><strong>结论2.2</strong>：两直线$\mathbf l$和$\mathbf l’$的交点是点$\mathbf x=\mathbf l \times \mathbf l’$。注意：两直线交点的表示之所以这样简洁是因为采用了直线和点的齐次坐标表示。</p></li><li><p><strong>结论2.4</strong>：过两点$\mathbf x$和$\mathbf x’$的直线是$\mathbf l = \mathbf x \times \mathbf x’$.</p></li><li><p>所有理想点的集合可以写成$(x1, x2, 0)^\intercal$，并由比率$x1:x2$指定一个具体的点。注意该集合在一条直线上，称为<strong>无穷远线</strong>，用矢量$\mathbf l_\infty = (0, 0, 1)^\intercal$表示。我们可以验证$(0, 0, 1)(x1, x2, 0)^\intercal=0$.</p></li><li><p><strong>射影平面的模型</strong>：一种有益的方法是把$\mathbb P^2$看作$\mathbb R^3$中一种射线的集合。该集合的所有矢量$k(x1, x2, x3)^\intercal$当k变化时形成过原点的射线。这样的一条射线可以看作是$\mathbb P^2$中的一个点。在此模型中，$\mathbb P^2$中的直线是过原点的平面。可以验证两相异的射线共处于一张平面上，而任何两张相异平面相交于一条射线。这类似于两个相异的点唯一确定一条直线，而两条相异的直线总相交于一点。</p><p>点和线可以用平面$x3=1$与这些射线和平面集相交得到。如图2.1所示，表示理想点的射线和表示$\mathbf l_\infty$的平面都与平面$x3=1$平行.</p><p><img src="/assets/blogImg/2.1.png" alt="image-2.1"></p><p><font size="2"><strong>图2.1 射影平面的模型.</strong> $\mathbb P^2$的点和线分别表示为$\mathbb R^3$中过原点的射线和平面.$x1x2-$平面上的射线表示理想点，而$x1x2-$平面表示$\mathbf l_\infty$</font></p></li><li><p>对偶原理：2维射影几何中的任何定理都有一个对应的对偶定理，它可以通过互换原定理中点和线的作用而导出。</p></li><li><p><strong>二次曲线</strong>：二次曲线由平面上的二阶方程描述. 在欧氏几何中，二次曲线有三种主要类型: 双曲线，椭圆和抛物线(后面将定义的所谓的退化二次曲线除外)，在经典理论中，这三类曲线是不同方向的平面与圆锥相交所产生的截线(退化的二次曲线由过锥顶的平面产生). 但是我们将了解到，在2D射影几何中所有非退化的二次曲线在射影变换下都等价.</p><p>在非齐次坐标中，二次曲线的方程是$$ax^2+bxy+cy^2+dx+ey+f=0$$对应于一个二阶多项式. 通过替代$x \mapsto x_1/x_3, y \mapsto x_2/x_3$，”齐次化”得到$$\begin{equation} ax_1^2+bx_1x_2+cx_2^2+dx_1x_3+ex_2x_3+fx_3^2=0 \tag{2.1} \end{equation}$$</p><p>或表示成矩阵形式$$\mathbf x^\intercal \mathbf C \mathbf x = 0 \tag{2.2}$$</p><p>其中二次曲线系数矩阵$\mathbf C$为$$\mathbf C = \begin{bmatrix} a &amp; b/2 &amp; d/2 \\ b/2 &amp; c &amp; e/2 \\ d/2 &amp; e/2 &amp; f \end{bmatrix} \tag{2.3}$$</p><p>注意二次曲线的系数矩阵是对称的. 它与点和线的齐次表达式一样，重要的仅仅是矩阵元素的比率，因为用一个非零标盘乘$\mathbf C$不会影响上面的方程. 因此，$\mathbf C$是一条二次曲线的齐次表示. 二次曲线有五个自由度，可以视为比率$\left| a : b : c : d : e : f \right|$或等价地视为对称矩阵六个元素减去一个比例因子.</p></li><li><p><strong>结论4</strong>：过(非退化)二次曲线$\mathrm C$上点$\mathbf x$的切线$\mathbf l$由$\mathbf l = \mathrm C \mathbf x$确定.</p><p><strong>证明</strong>  因为$\mathbf l^\intercal \mathbf x = \mathbf x^\intercal \mathrm C \mathbf x = 0$, 所以直线$\mathbf l = \mathrm C \mathbf x$过$\mathbf x$. 如果$\mathbf l$仅与二次曲线交于一点，那么它就是切线，我们的证明也就完成了. 否则，假定$\mathbf l$与该二次曲线还交于另一点$\mathbf y$，则有$\mathbf y^\intercal \mathrm C \mathbf y = 0$和$\mathbf x^\intercal \mathrm C \mathbf y =\mathbf l^\intercal \mathbf y = 0$. 由此推出$(x+\alpha y)^\intercal \mathrm C (x+\alpha y)=0$对所有$\alpha$成立，这表明连接$\mathbf x$和$\mathbf y$的整条直线$\mathbf l = \mathrm C \mathbf x$在该二次曲线$\mathrm C$上，因而C是退化的（见下文）.</p></li><li><p><strong>对偶(线)二次曲线</strong>：上面定义的二次曲线$\mathrm C$更确切地应称为<strong>点</strong>二次曲线，因为它定义的是点的方程。 给出了$\mathbb P^2$的对偶结论以后，理所当然应该有一个由直线的方程定义的二次曲线. 这种<strong>对偶</strong>（或线）二次曲线也由一个$3 \times 3$矩阵表示，我们把它记为$\mathrm C^*$. 二次曲线$\mathrm C$的切线$\mathbf l$满$\mathbf l^\intercal \mathrm C^* \mathbf l = 0$. 其中$\mathrm C^*$表示$\mathrm C$的伴随矩阵（伴随矩阵在附录4(p578[p404])的节A4.2(p580[406])中定义）. 对非奇异对称矩阵$\mathrm C$有$\mathrm C^* = \mathrm C^{-1}$(相差一个尺度因子).</p><p>对偶二次曲线也称<strong>二次曲线的包络</strong>，其理由在图2.2中给予说明. 对偶二次曲线有五个自由度. 与点二次曲线相类似，一般位置上的五条线定义一条对偶二次曲线.</p><p><img src="/assets/blogImg/2.2.png" alt="image-2.2"></p><p><font size="2"><strong>图2.2</strong>    (a)满足$\mathbf x^\intercal \mathrm C \mathbf x = 0$的点$\mathbf x$在一条点二次曲线上.（b)满足$\mathbf l^\intercal \mathrm C^* \mathbf l = 0$的直线$\mathbf l$是点二次曲线$\mathrm C$的切线，即二次曲线$\mathrm C$是直线$\mathbf l$的包络.</font></p></li><li><p><strong>退化二次曲线</strong>：非满秩矩阵$\mathrm C$所定义的二次曲线称作退化二次曲线. 退化的点二次曲线包含两条线（秩2）或一条重线（秩1).</p></li><li><p><strong>射影映射 = 保线变换 = 射影变换 = 单应</strong></p></li><li><p><strong>定理 2.10</strong>：映射$h$ : $\mathbb P^2 \rightarrow \mathbb P^2$是<strong>射影映射</strong>的充要条件是：存在一个$3\times3$非奇异矩阵$\mathrm H$, 使得$\mathbb P^2$的任何一个用矢量$\mathbf x$表示的点都满足$h(x)=\mathrm H \mathbf x$.</p><p><strong>证明</strong>  令$x1, x2$和$x3$同在一条直线$\mathbf l$上. 因此，$\mathbf l^\intercal \mathbf x_i = 0, i=1,…,3$. 令$\mathrm H$为非奇异$3\times3$矩阵. 可以证明$\mathbf l^\intercal \mathrm H^{-1} \mathrm H \mathbf x_i = 0$. 因此点$\mathrm H \mathbf x_i$都在直线$\mathrm H^{-\intercal} \mathbf l$上，因而该变换保持共线性.</p><p>其逆命题是每个射影映射都以这种方式出现，但相当难证明.</p></li><li><p><strong>中心投影</strong>是射影变换并可用齐次坐标的线性变换$\mathbf x’ = \mathrm H \mathbf x$表示。实际上，如果在两平面上建立的都是欧氏（直角）坐标系，那么这样一种由中心投影定义的映射比一般射影变换有更多的约束. 我们称它为<strong>透视映射</strong>而不是完全的射影映射，它可由一个六自由度的变换来表示. 我们将在节A5.4(p430 v1)中再回过来讨论透视映射.</p></li><li><p>如果点$\mathbf x_i$在直线$\mathbf l$上，那么经射影变换后的点$\mathbf x’_i=\mathrm H \mathbf x_i$在直线$\mathbf l’=\mathrm H^{-\intercal} \mathbf l$上. 即在点变换$\mathbf x’_i=\mathrm H \mathbf x_i$下，直线$\mathbf l$变换为$$\mathbf l’=\mathrm H^{-\intercal} \mathbf l \tag{2.6}$$</p><p>我们也可以换一种写法$\mathbf l’^\intercal=\mathbf l^\intercal \mathrm H^{-1}$. 注意直线和点变换的基本区别. 点变换依据$\mathrm H$, 而直线 (视为行矢量）变换则依据$\mathrm H^{-1}$. 这可以用术语“协变”或“逆变”做解释. 我们称点变换为<strong>逆变</strong>而线变换为<strong>协变</strong>. 这种区别将在第15章讨论张量时重新提到并在附录1(p400 v1)中全面地给予解释.</p></li><li><p><strong>结论2.13</strong>  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，二次曲线$\mathrm C$变换为$\mathrm C’ = \mathrm H^{-\intercal} \mathrm C \mathrm H^{-1}$.</p></li><li><p><strong>结论2.14</strong>  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，对偶二次曲线$\mathrm C’$变换为$\mathrm C^{*‘} = \mathrm H \mathrm C^* \mathrm H^{\intercal}$.</p></li><li><p><strong>等距(isometric)变换</strong>是平面$\mathbb R^2$的变换，它保持欧氏距离不变(<em>iso</em> = 一样，<em>metric</em> = 度量). —个等距变换可表示为$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} \varepsilon \cos\theta &amp;-\sin\theta&amp;t_x \\ \varepsilon \sin\theta &amp;\cos\theta&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix}$$</p><p>其中$\varepsilon = ±1$. 如果$\varepsilon$ = 1那么该等距变换是<strong>保向</strong>的并且也是<strong>欧氏</strong>变换（平移和旋转的复合）. 如果$\varepsilon=-1$, 那么该等距变换是逆向的. 例如反射（由对角矩阵出diag(-1, 1, 1)表示）与欧氏变换的复合.</p><p>欧氏变换是刚体运动的模型. 到目前为止，它们是实用中最重要的等距变换，我们将集中研究它们. 但是，保向等距变换在结构恢复时常会出现多义性.</p><p>平面欧氏变换可以用更简洁的分块形式写为$$\mathbf x’=\mathrm H_\mathrm E \mathbf x=\begin{bmatrix} \mathrm R &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.7}$$</p><p>其中$\mathrm R$是$2\times2$旋转矩阵（满足$\mathrm R^\intercal \mathrm R = \mathrm R \mathrm R^\intercal=\mathrm I$的正交矩阵），$\mathbf t$是2维平移矢量, 而$\mathbf 0$是2维零矢量. 特殊的情况是纯旋转(当$\mathbf t = 0$)和纯平移(当$\mathrm R=\mathrm I$). 欧氏变换也称为<strong>位移</strong>.</p><p>平面欧氏变换有三个自由度：旋转占一个，平移占两个. 不变量, 例如，长度（两点的距离），角度（两线的夹角）和面积. 如果等距变换左上角的$2\times2$矩阵的行列式为1，它是保向的. <strong>保向</strong>的等距变换形成一个群， 但<strong>逆向</strong>的不是. 这种区别对于下面的相似和仿射变换同样如此.</p></li><li><p><strong>相似变换</strong>是一个等距变换与一个均匀缩放的复合. 当欧氏变换（即没有反射）与均匀缩放复合时，相似变换的矩阵表示为：$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} s \cos\theta &amp;-s\sin\theta&amp;t_x \\ s \sin\theta &amp;s\cos\theta&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix} \tag{2.8}$$可以用更简洁的分块形式写成$$\mathbf x’=\mathrm H_\mathrm S \mathbf x=\begin{bmatrix} s\mathrm R &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.9}$$</p><p>其中标量s表示均匀缩放. 相似变换也称<strong>等形</strong>变换，因为它保持了“形状”(形式). 一个平面</p><p>相似变换有四个自由度，比欧氏变换多一个缩放自由度. 相似变换可由两组点对应算出. 两点间的长度不是相似不变量, 但两长度的<strong>比率</strong>是不变量，因其缩放因子相互抵消. 同样地, 面积的比率是不变量，也因为缩放因子(的平方)被抵消. <strong>度量结构</strong>就是确定到只相差一个相似变换的结构.</p></li><li><p><strong>仿射变换</strong>是一个非奇异线性变换与一个平移变换的复合. 它的矩阵表示为$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} a_{11} &amp;a_{12}&amp;t_x \\ a_{21} &amp;a_{22}&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix} \tag{2.10}$$或分块形式$$\mathbf x’=\mathrm H_\mathrm A \mathbf x=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.11}$$</p><p>其中$\mathrm A$是一个$2\times2$的非奇异矩阵, 平面仿射变换有六自由度，对应于六个矩阵元素. 变换可以由三组点对应来计算.</p><p>理解仿射变换中线性成分$\mathrm A$的几何效应的一个有益方法是把它看作两个基本变换——旋转和非均匀缩放的复合. 仿射矩阵$\mathrm A$总能分解为$$\mathrm A = \mathrm R(\theta)\mathrm R(-\phi)\mathrm D\mathrm R(\phi) \tag{2.12}$$其中$\mathrm R(\theta)$和$\mathrm R(\phi)$分别表示转角为$\theta$和$\phi$的旋转，而$\mathrm D$为对角矩阵：$$\mathrm D=\begin{bmatrix} \lambda_1 &amp; 0 \\ 0 &amp; \lambda_2 \end{bmatrix}$$分解式(2.12)由SVD(节A3.3(p408))(SVD为“奇异值分解”的缩写)直接得到: $\mathrm A=\mathrm U\mathrm D\mathrm V^\intercal=(\mathrm U\mathrm V^\intercal)(\mathrm V\mathrm D\mathrm V^\intercal) = R(\theta)(R(-\phi)\mathrm D\mathrm R(\phi))$, 其中第一个等式来自$\mathrm A$的SVD, 其他 等式则因为$\mathrm U$和$\mathrm V$是正交矩阵.</p><p>因此，仿射矩阵$\mathrm A$被看成是一个旋转($\phi$);加上在(已旋转)的$x$和$y$方向分别进行按比例因子$\lambda_1$和$\lambda_2$的缩放，再加上一个回转($-\phi$)和最后一个旋转($\theta$)的复合变换. 与相似变换相比，“新”几何仅仅是非均匀缩放. 它使仿射变换比相似变换多了两个自由度. 它们是缩放方向的角度($\phi$)和缩放参数比率$\lambda_1:\lambda_2$. 仿射变换的本质是在一个特定角的两个垂直方向上进行缩放. 图2.7给出两个示意性例子.</p><p><img src="/assets/blogImg/2.7.png" alt="image-2.7"></p><p><font size="2"><strong>图2.7  平面仿射变换失真</strong>. (a)旋转R($\theta$). (b)形变R($-\phi$)DR($\phi$). 注意形变中缩放方向是正交的.</font></p><p>因为仿射变换包含非均匀缩放，所以长度比率和线间夹角等相似不变量在仿射变换下不再保留. 三个重要的<strong>仿射不变量</strong>是：</p><ol><li><strong>平行线</strong>  考査两平行线. 它们交于某无穷远点$(x1, x2, 0)^\intercal$. 在仿射变换下，该点被映射到另一个无穷远点. 因此，平行线被映射到仍然交于无穷远的直线，即它们的像仍然平行.</li><li><strong>平行线段的长度比</strong>  直线段的长度缩放仅与该线段方向和缩放方向之间的夹角有关. 假定该线段与正交缩放方向$x-$轴的夹角为$\alpha$, 那么，缩放大小为$\sqrt{\lambda_1^2\cos^2\alpha + \lambda_2^2\sin^2\alpha}$. 因该缩放因子对所有同向的直线是一样的，所以在平行线段的比率中被消去.</li><li><strong>面积比</strong>  可以通过分解式(2.12)直接得到该不变性. 旋转和平移不影响面积，起作用的仅仅是按$\lambda_1$和$\lambda_2$的缩放. 其效果是面积被缩放了$\lambda_1\lambda_2=\mathrm d\mathrm e\mathrm t;\mathrm A$倍. 因此，任何形状的面积都被缩放$\mathrm d\mathrm e\mathrm t;\mathrm A$倍，而该缩放因子在面积比中被消去. 我们将会看到这一性质在射影变换时不成立.</li></ol><p>根据det A是正或负，仿射变换分别称为保向的或逆向的. 因$\mathrm d\mathrm e\mathrm t;\mathrm A=\lambda_1\lambda_2$，保向性或逆向性仅与其符号有关.</p></li><li><p><strong>射影变换</strong>已在(2.5)中定义. 它是<strong>齐次</strong>坐标的一般非奇异线性变换. 它是仿射变换的推广，仿射变换是<strong>非齐次</strong>坐标的一般非奇异线性变换和一个平移的复合. 我们早已见到射影变换的作用(节2.3). 这里，我们取其分块形式$$\mathbf x’=\mathrm H_\mathrm P \mathbf x=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf v^\intercal &amp; v \end{bmatrix} \mathbf x \tag{2.13}$$</p><p>其中矢量$\mathbf v= (v_1, v_2)^\intercal$. 齐次矩阵虽有九个元素但只有它们的比率是有意义的，因此该变换由八个参数确定. 注意并不是总有可能通过对矩阵缩放而取$v$为1，因为$v$可能是零. 两平面之间的射影变换可由四组点对应算出，但其中属于同一平面的三点必须不共线. 见图2.4. 与仿射变换不同，在$\mathbb P^2$中不能区分保向或逆向射影变换. 我们将在节2.6中回到这个问题. 最基本的<strong>射影不变量</strong>是四共线点的交比：直线上长度的比率在仿射变换下保持不变，但在射影变换下并非如此. 然而比率的比率即直线上长度的<strong>交比</strong>是射影不变量. 我们将在节2.5讨论这个不变量的性质.</p></li><li><p><strong>射影变换可以分解为一串变换链的复合</strong>，链中的每个矩阵比它前面的一个矩阵所表示的变换层次高.$$\mathrm H=\mathrm H_\mathrm S \mathrm H_\mathrm A \mathrm H_\mathrm P=\begin{bmatrix} s\mathrm R &amp; \mathbf t/v \\ \mathbf 0^\intercal &amp;1 \end{bmatrix}\begin{bmatrix} \mathrm K &amp; \mathbf 0 \\ \mathbf 0^\intercal &amp;1 \end{bmatrix}\begin{bmatrix} \mathrm I &amp; \mathbf 0 \\ \mathbf v^\intercal &amp;v \end{bmatrix}=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf v^\intercal &amp;v \end{bmatrix} \tag{2.16}$$</p><p>其中$\mathrm A=s\mathrm R\mathrm K + \mathbf t\mathbf v^\intercal/v$, 而$\mathrm K$是满足det K = 1的归一化上三角矩阵. 如果$v\neq0$上述分解是有效的，而且如果 $s$ 取正值，它还是唯一的.</p><p>矩阵$\mathrm H_\mathrm S、\mathrm A_\mathrm A、\mathrm H_\mathrm P$分别是相似变换、仿射变换和射影变换(如下标S、A、P所指示). 考察例2.12中对平面的透视图像进行矫正的过程：$\mathrm H_\mathrm P(2;\mathrm d\mathrm o\mathrm f)$移动无穷远直线；$\mathrm H_\mathrm A(2;\mathrm d\mathrm o\mathrm f)$影响仿射性质，而不移动无穷远直线；最后，$\mathrm H_\mathrm S$是一般的相似变换(4 dof)，它不影响仿射及射影性质. 变换$\mathrm H_\mathrm P$属于节A5.3(p430)所介绍的一种有约束的透视变换.</p></li><li><p><strong>结论2.16</strong> 与函数无关的不变量数等于或大于配置的自由度数减去变换的自由度数.</p><p>例如，由一般位置上的四点所组成的配置有八个自由度(每点2个)，从而有4个相似，2个仿射和零个射影不变量，因为这些变换分别有4,6,8自由度.</p><p>表2.1归纳了2D变换群以及它们的不变性质. 在表中<strong>低层的变换是它高层的变换的特殊化. 在表低层的变换继承其高层变换的不变量</strong>.</p><p><img src="/assets/blogImg/t2.1.png" alt="table-2.1"></p><p><font size="2"><strong>表2.1.  常见平面变换的几何不变性质</strong>  $\mathrm A = \begin{bmatrix} a_{ij} \end{bmatrix}$是$2\times2$的可逆矩阵，$\mathrm R = \begin{bmatrix} r_{ij} \end{bmatrix}$是2D旋转矩阵，$(t_x, t_y)^\intercal$是2D平移矢量. 失真列给出变换对正方形所产生的典型效应. 表中高层的变换可以产生比它低层的变换的所有效应. 它们的范围从欧式(其中仅有平移和旋转)到射影(其中正方形被变换成任意四边形(假定没有三点共线)). </font></p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-多视角几何纵览&quot;&gt;&lt;a href=&quot;#第一章-多视角几何纵览&quot; class=&quot;headerlink&quot; title=&quot;第一章 多视角几何纵览&quot;&gt;&lt;/a&gt;第一章 多视角几何纵览&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平面的射影变换定义为平面上点的任意&lt;strong&gt;保直线映射&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;射影空间&lt;/strong&gt;是欧几里德空间的延伸(通过齐次向量表示点)，两条线总是在一个点上相遇(有时这个点是无穷远点)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二维射影空间中的无穷远点形成一条线，通常称为&lt;strong&gt;无穷远线&lt;/strong&gt;。它们在三维空间中形成了&lt;strong&gt;无穷远平面&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多视角几何" scheme="//georgeju95.github.io/tags/%E5%A4%9A%E8%A7%86%E8%A7%92%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉中的多视角几何：第0篇 基础知识：射影几何、变换和估计(第2章)</title>
    <link href="//georgeju95.github.io/2019/07/19/Multi-view-geometry-P0-1/"/>
    <id>//georgeju95.github.io/2019/07/19/Multi-view-geometry-P0-1/</id>
    <published>2019-07-19T02:30:00.000Z</published>
    <updated>2023-08-29T18:58:12.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本篇大纲"><a href="#本篇大纲" class="headerlink" title="本篇大纲"></a>本篇大纲</h1><p>此篇的四章为本书后续章节将要用到的表示、术语和记号打基础，射影几何的概念和表示法是多视图几何分析的核心。例如，使用了齐次坐标就能用线性矩阵方程来表示非线性映射（如透视投影）；而且可以很自然地表示无穷远点，避免了取极限的麻烦。</p><a id="more"></a><p>第2章引入二维空间（以下简称2D）的射影变换。这些变换发生在用透视摄像机对平面摄像的时候。该章偏重于入门介绍并为三维空间（以下简称3D）几何铺路。大多数的概念在2D中比3D中更容易理解和可视化。本章介绍<strong>射影变换</strong>，包括它的特殊情况：<u>仿射和相似变换</u>；并把注意力主要集中在从透视图像中恢复<strong>仿射性质</strong>（例如平行线）和<strong>度量性质</strong>（例如线之间的角度）。</p><p>第3章覆盖3D射影几何。该几何的推导方式与2D非常相似，当然，由于维数的增加出现了新的性质。这里主要的新几何是<strong>无穷远平面</strong>和<strong>绝对二次曲线</strong>。</p><p>第4章介绍<strong>由图像测量进行几何估计</strong>，这是本书的主要论题之一。我们以用点对应来估计射影变换为例来说明估计算法的要素和目的，这些算法将在整本书中被采用。其中重要的问题是：<u>一个代价函数应该最小化什么</u>，比如是代数的或是几何的或是统计的测量，该问题将长篇地加以介绍。本章还打算介绍鲁棒估计的思想，以及这样的技术在变换的自动估计中的应用。</p><p>第5章介绍如何评价估计算法的结果。特别是如何计算估计的协方差。</p><h1 id="第2章-2D射影几何和变换"><a href="#第2章-2D射影几何和变换" class="headerlink" title="第2章  2D射影几何和变换"></a>第2章  2D射影几何和变换</h1><p>本章主要介绍理解此书内容所必须的几何概念和记号。某些概念为大家所熟悉，例如消影点的形成和二次曲线的表示，而其余的却比较深奥，例如用虚圆点去消除图像中的射影失真。这些概念在平面（2D）中比较容易理解，因为在2D中它们比较容易可视化。以后本书将涉及的3D几何的内容就是平面情形的简单推广。</p><p>具体地说，本章涵盖平面的射影变换几何。这些变换模拟透视摄像机对平面摄像时所产生的几何失真。在透视影像下，某些几何性质被保留，例如保线性（直线被影像为直线），而有的则不被保留，例如平行线一般不被影像成平行线。射影几何为这类影像建模而且提供适于计算的数学表达。</p><p>我们先介绍在齐次标记下点、线和二次曲线的表示，以及在射影变换下这些几何实体如何映射。接着介绍无穷远线和虚圆点，并证明它们控制了平面的仿射和度量性质。然后，给出平面矫正的算法，这些算法实现了由图像来计算仿射和度量性质。最后，我们介绍射影变换下的不动点。</p><h2 id="2-1-平面几何"><a href="#2-1-平面几何" class="headerlink" title="2.1 平面几何"></a>2.1 平面几何</h2><p>任何学习过初等数学的人都熟悉平面几何的基本概念。事实上，甚至因为这些概念已成为我们日常生活的部分经验，因此我们总以为它们理所当然地成立。在初等水平上，几何研究点和线以及它们的关系。</p><p>按几何纯传统论者的观点，几何研究应该坚持“几何的”或者说与坐标无关的观点。在这种方法中，定理的叙述和证明仅使用几何的公理而不使用代数。经典的欧式方法就是其中的一个例子。但是，自笛卡尔之后，人们认识到几何可以代数化，而且，几何理论的确可以从代数的观点来推导。在本书中，我们将使用混合的方法，有时用几何的而有时用代数的方法。在代数方法中，几何实体用坐标和代数实体描述。例如，一个点等同于某坐标基下的一个矢量；一条直线也等同于一个矢量；而一段圆锥截线（或简称二次曲线）用一个对称矩阵表示。事实上，至少因为语言上的方便，我们经常采用这样的等价表示，即<strong>矢量就是点，对称矩阵就是二次曲线</strong>。在几何中采用代数方法的显著优点是：这种方法导出的结果更容易产生算法以及实际的计算方法。本书主要关注的是计算和算法，它将证明使用代数方法是合理的。</p><h2 id="2-2-2D射影平面"><a href="#2-2-2D射影平面" class="headerlink" title="2.2 2D射影平面"></a>2.2 2D射影平面</h2><p>众所周知，平面上的一点可以用$\mathbb R^2$中的一对坐标$(x, y)$来表示。因此，通常$\mathbb R^2$等同于一张平面。把$\mathbb R^2$看作一个矢量空间时，坐标对$(x, y)$是矢量，也就是说点等同于矢量。本节将引入平面上点和线的<strong>齐次</strong>表示。</p><h4 id="行和列矢量"><a href="#行和列矢量" class="headerlink" title="行和列矢量"></a>行和列矢量</h4><p>此后，我们将考虑矢量空间之间的线性映射并把这样的映射表示成矩阵。在通常的方式下，一个矩阵和一个矢量的积是另一个矢量，它就是该映射下的<strong>像</strong>。由此引出“列”和“行”矢量的区别。因为矩阵可以被列矢量右乘或被行矢量左乘，在不加说明时，几何实体用列矢量表示。粗体符合如$\mathbf x $总表示列矢量，它的转置是行矢量$\mathbf x^\intercal$。按此约定，平面上的点将表示为列矢量$(x, y)^\intercal$，而不是它的转置：行矢量$(x, y)$。我们记$\mathbf x=(x, y)^\intercal$，该方程的两边都是列矢量。</p><h3 id="2-2-1-点与直线"><a href="#2-2-1-点与直线" class="headerlink" title="2.2.1 点与直线"></a>2.2.1 点与直线</h3><h4 id="直线的齐次表示"><a href="#直线的齐次表示" class="headerlink" title="直线的齐次表示"></a>直线的齐次表示</h4><p>平面上的一条直线可用形如$ax+by+c=0$的方程表示，$a$，$b$，$c$的不同值给出不同的直线。因此一条直线也可以用矢量$(a, b, c)^\intercal$表示。直线和矢量$(a, b, c)^\intercal$不是一一对应的，因为，对任何非零常数$k$，直线$ax+by+c=0$与$(ka)x+(kb)y+(kc)=0$相同。因此，对任何非零$k$，矢量$(a, b, c)^\intercal$与$k(a, b, c)^\intercal$表示同一直线。事实上，我们视这两个只相差一个全局缩放因子的矢量是等价的。这种等价关系下的矢量等价类被称为<strong>齐次矢量</strong>。任何具体矢量$(a, b, c)^\intercal$是所属的等价类的一个代表。在$\mathbb R^3-(0, 0, 0)^\intercal$中的矢量等价类的集合组成<strong>射影空间</strong>$\mathbb P^2$。记号：$-(0, 0, 0)^\intercal$表示矢量$(0, 0, 0)^\intercal$不与任何直线对应，因而被排除在外。</p><h4 id="点的齐次表示"><a href="#点的齐次表示" class="headerlink" title="点的齐次表示"></a>点的齐次表示</h4><p>点$\mathbf x=(x, y)^\intercal$在直线$\mathbf l=(a, b, c)^\intercal$上的充要条件是$ax+by+c=0$。并可用矢量内积形式把它表示为$(x, y, 1)(a, b, c)^\intercal=(x, y, 1)\mathbf l=0$；即把“1”作为增加的最后一个坐标使$\mathbb R^2$中的点$(x, y)^\intercal$表示成3维矢量。注意对任何非零$k$和直线$\mathbf l$，方程$(kx, ky, k)\mathbf l=0$的充要条件是$(x, y, 1)\mathbf l=0$。因而，我们自然把由$k$不为零的不同值所构成的矢量集$(kx, ky, k)^\intercal$看作是$\mathbb R^2$中$(x, y)^\intercal$的一种表示。因此，与直线一样，点也可用齐次矢量表示。一个点的任何齐次矢量的表示形式为$\mathbf x=(x1, x2, x3)^\intercal$，并表示$\mathbb R^2$中的点$\mathbf x=(x1/x3, x2/x3)^\intercal$。于是，点作为齐次矢量同样也是$\mathbb P^2$的元素。</p><p>我们得到一个用以确定点在不同直线上的简单方程，即</p><h5 id="结论2-1-点-mathbf-x-在直线-mathbf-l-上的充要条件是-mathbf-x-intercal-mathbf-l-0"><a href="#结论2-1-点-mathbf-x-在直线-mathbf-l-上的充要条件是-mathbf-x-intercal-mathbf-l-0" class="headerlink" title="结论2.1 点$\mathbf x$在直线$\mathbf l$上的充要条件是$\mathbf x^\intercal \mathbf l = 0$."></a>结论2.1 点$\mathbf x$在直线$\mathbf l$上的充要条件是$\mathbf x^\intercal \mathbf l = 0$.</h5><p>注意：表达式$\mathbf x^\intercal \mathbf l$就是两矢量$\mathbf x$和$\mathbf l$的内积或标量积，即$\mathbf x^\intercal \mathbf l = \mathbf l^\intercal \mathbf x = \mathbf x \cdot \mathbf l$。一般，我们更喜欢采用转置记号$\mathbf l^\intercal \mathbf x$，偶尔，也用一个“$\cdot$”来表示内积。注意区分一个点的<strong>齐次坐标</strong>：$\mathbf x=(x1, x2, x3)^\intercal$，它是3维矢量；与<strong>非齐次坐标</strong>：$(x, y)^\intercal$，它是二维矢量。</p><h4 id="自由度-dof"><a href="#自由度-dof" class="headerlink" title="自由度(dof)"></a>自由度(dof)</h4><p>显然，为了指定一个点必须提供两个值，即它的$x-$坐标和$y-$坐标。同样，一条直线由两个参数指定（两个独立的比率$\left| a:b:c \right|$）因而有两个自由度。例如，在非齐次表示中，这两个参数可以取为直线的梯度和$y$轴上的截距。</p><h4 id="直线的交点"><a href="#直线的交点" class="headerlink" title="直线的交点"></a>直线的交点</h4><p>给定两直线$\mathbf l=(a, b, c)^\intercal$和$\mathbf l’=(a’, b’, c’)^\intercal$，我们希望求它们的交点。定义矢量$\mathbf x =\mathbf l \times \mathbf l’$，这里$\times$表示矢量积或叉积。由三重纯量积等式：$\mathbf l \cdot (\mathbf l \times \mathbf l’) = \mathbf l’ \cdot (\mathbf l \times \mathbf l’) = 0$，推出$\mathbf l^\intercal \mathbf x = \mathbf l’^\intercal \mathbf x = 0$。因此，如果把$\mathbf x$视为一个点，则$\mathbf x$同时在两条直线$\mathbf l$和$\mathbf l’$上，因而是两线的交点。这表明：</p><h5 id="结论2-2-两直线-mathbf-l-和-mathbf-l’-的交点是点-mathbf-x-mathbf-l-times-mathbf-l’"><a href="#结论2-2-两直线-mathbf-l-和-mathbf-l’-的交点是点-mathbf-x-mathbf-l-times-mathbf-l’" class="headerlink" title="结论2.2 两直线$\mathbf l$和$\mathbf l’$的交点是点$\mathbf x=\mathbf l \times \mathbf l’$"></a>结论2.2 两直线$\mathbf l$和$\mathbf l’$的交点是点$\mathbf x=\mathbf l \times \mathbf l’$</h5><p>注意：两直线交点的表示之所以这样简洁是因为采用了直线和点的齐次坐标表示。</p><p>例2.3 考虑一个简单问题：求直线$x=1$和$y=1$的交点。直线$x=1$等价于$-1x+1=0$，故有齐次表示$l=(-1, 0, 1)^\intercal$。直线$y=1$等价于$-1y+1=0$，齐次表示是$l’=(0, -1, 1)^\intercal$。由结论1.2得到交点为$$\mathbf x=\mathbf l \times \mathbf l’= \begin{vmatrix} i&amp;j&amp;k \\ -1&amp;0&amp;1 \\ 0&amp;-1&amp;1 \end{vmatrix} = \begin{pmatrix} 1 \\ 1 \\ 1 \end{pmatrix}$$它是非齐次点$(1, 1)^\intercal$，正是我们所要求的。</p><h4 id="点的连线"><a href="#点的连线" class="headerlink" title="点的连线"></a>点的连线</h4><p>过两点$\mathbf x$和$\mathbf x’$的直线的表示式可完全类似地导出。定义直线$\mathbf l = \mathbf x \times \mathbf x’$，并不难验证点$\mathbf x$和$\mathbf x’$都在$\mathbf l$上。因此</p><h5 id="结论2-4-过两点-mathbf-x-和-mathbf-x’-的直线是-mathbf-l-mathbf-x-times-mathbf-x’"><a href="#结论2-4-过两点-mathbf-x-和-mathbf-x’-的直线是-mathbf-l-mathbf-x-times-mathbf-x’" class="headerlink" title="结论2.4 过两点$\mathbf x$和$\mathbf x’$的直线是$\mathbf l = \mathbf x \times \mathbf x’$."></a>结论2.4 过两点$\mathbf x$和$\mathbf x’$的直线是$\mathbf l = \mathbf x \times \mathbf x’$.</h5><h3 id="2-2-2-理想点与无穷远线"><a href="#2-2-2-理想点与无穷远线" class="headerlink" title="2.2.2 理想点与无穷远线"></a>2.2.2 理想点与无穷远线</h3><h4 id="平行线的交点"><a href="#平行线的交点" class="headerlink" title="平行线的交点"></a>平行线的交点</h4><p>考察两直线$ax+by+c=0$和$ax+by+c’=0$。它们分别用矢量$\mathbf l=(a, b, c)^\intercal$和$\mathbf l’=(a, b, c’)^\intercal$表示，其中它们的前两个坐标是一样的。用结论1.2不难算出这两条直线的交点为$\mathbf l \times \mathbf l’ = (c’-c)(b, -a, 0)^\intercal$，忽略标量因子$(c’-c)$，得到点$(b, -a, 0)^\intercal$。</p><p>现在，如果我们试图求这一点的非齐次表示，就会得到$(b/0, a/0)^\intercal$，它只能解释为该交点有无穷大坐标。一般地，具有齐次坐标$(x, y, 0)^\intercal$的点不与$\mathbb R^2$中任何有限点对应，这一观察与通常平行线交于无穷远的概念相吻合。</p><p>例2.5 考察两直线$x=1$和$x=2$。这两线平行，因而交于“无穷远点”。利用齐次表示将它们表示为$\mathbf l=(-1, 0, 1)^\intercal$和$\mathbf l’=(-1, 0, 2)^\intercal$，再由结论1.2求得其交点为$$\mathbf x=\mathbf l \times \mathbf l’= \begin{vmatrix} i &amp; j &amp; k \\ -1&amp;0&amp;1 \\ -1&amp;0&amp;2 \end{vmatrix} = \begin{pmatrix} 0 \\ 1 \\ 0 \end{pmatrix}$$这是在$y-$轴方向上的无穷远点。</p><h4 id="理想点与无穷远线"><a href="#理想点与无穷远线" class="headerlink" title="理想点与无穷远线"></a>理想点与无穷远线</h4><p>当$x3 \neq 0$时，齐次矢量$\mathbf x=(x1, x2, x3)^\intercal$对应于$\mathbb R^2$中的有限点。我们可以把最后坐标为$x3=0$的点加入$\mathbb R^2$。所扩展的空间是所有齐次3维矢量的集合，称为射影空间$\mathbb P^2$。最后坐标为$x3=0$的点被称为<strong>理想点</strong>，或无穷远点。所有理想点的集合可以写成$(x1, x2, 0)^\intercal$，并由比率$x1:x2$指定一个具体的点。注意该集合在一条直线上，称为<strong>无穷远线</strong>，用矢量$\mathbf l_\infty = (0, 0, 1)^\intercal$表示。我们可以验证$(0, 0, 1)(x1, x2, 0)^\intercal=0$.</p><p>由结论2.2，我们推出直线$\mathbf l=(a, b, c)^\intercal$与$\mathbf l_\infty$交于理想点$(b, -a, 0)^\intercal$（因为$(b, -a, 0)\mathbf l=0$）。任何一条与$\mathbf l$平行的直线$\mathbf l’=(a, b, c’)^\intercal$也交$\mathbf l_\infty$于同样的理想点$(b, -a, 0)^\intercal$，与$c’$的取值无关。在非齐次表示下，$(b, -a)^\intercal$是与该直线相切的矢量，与该直线的法线$(a, b)$相正交，因而它代表该直线的<strong>方向</strong>。当直线的方向改变时，理想点$(b, -a, 0)^\intercal$沿$\mathbf l_\infty$而变化。基于这些理由，无穷远线可以看作是平面上所有直线方向的集合。</p><p>注意引入无穷远点概念后点与直线相交的概念得到了简化。在射影平面$\mathbb P^2$中，我们可以不加思索地说任意两条相异直线都相交于一点而任意两个相异的点都在一条直线上，但在标准欧式几何$\mathbb R^2$中却不成立，其中平行线就构成一个特例。</p><p>研究$\mathbb P^2$的几何称为射影几何。在无坐标的纯几何研究中，射影几何的无穷远点（理想点）和普通点没有任何区别。但在本书中，为了达到我们的目的，有时将区别理想点和非理想点。因此，无穷远线有时被看成射影空间中的一条特殊直线。</p><h4 id="射影平面的模型"><a href="#射影平面的模型" class="headerlink" title="射影平面的模型"></a>射影平面的模型</h4><p>一种有益的方法是把$\mathbb P^2$看作$\mathbb R^3$中一种射线的集合。该集合的所有矢量$k(x1, x2, x3)^\intercal$当k变化时形成过原点的射线。这样的一条射线可以看作是$\mathbb P^2$中的一个点。在此模型中，$\mathbb P^2$中的直线是过原点的平面。可以验证两相异的射线共处于一张平面上，而任何两张相异平面相交于一条射线。这类似于两个相异的点唯一确定一条直线，而两条相异的直线总相交于一点。</p><p>点和线可以用平面$x3=1$与这些射线和平面集相交得到。如图2.1所示，表示理想点的射线和表示$\mathbf l_\infty$的平面都与平面$x3=1$平行.</p><p><img src="/assets/blogImg/2.1.png" alt="image-2.1"></p><p><font size="2"><strong>图2.1 射影平面的模型.</strong> $\mathbb P^2$的点和线分别表示为$\mathbb R^3$中过原点的射线和平面.$x1x2-$平面上的射线表示理想点，而$x1x2-$平面表示$\mathbf l_\infty$</font></p><h4 id="对偶"><a href="#对偶" class="headerlink" title="对偶"></a>对偶</h4><p>在关于线和点的性质的陈述中，读者也许已经注意到点和线的作用可以怎样互换。特别是，直线和点的基本接合方程式$\mathbf l^\intercal \mathbf x = 0$是对称的，因为$\mathbf l^\intercal \mathbf x = 0$意味着$\mathbf x^\intercal \mathbf l = 0$，其中线和点的位置互相交换了。类似地，两线相交和一线过两点的结论2.2和2.4，当把点和线的作用互换后，其本质是一样的。由此得到 一个如下的一般原理：<strong>对偶原理</strong>：</p><h5 id="结论2-6-对偶原理-2维射影几何中的任何定理都有一个对应的对偶定理，它可以通过互换原定理中点和线的作用而导出"><a href="#结论2-6-对偶原理-2维射影几何中的任何定理都有一个对应的对偶定理，它可以通过互换原定理中点和线的作用而导出" class="headerlink" title="结论2.6 对偶原理  2维射影几何中的任何定理都有一个对应的对偶定理，它可以通过互换原定理中点和线的作用而导出."></a>结论2.6 对偶原理  2维射影几何中的任何定理都有一个对应的对偶定理，它可以通过互换原定理中点和线的作用而导出.</h5><p>在应用此原理时，接合的概念也必须做适当地转换. 例如，过两点的直线与过两直线的点(即两线的交点)对偶.</p><p>注意 : 一且原定理已被证明，就没有必要再去证明它的对偶. 对偶定理的证明不过是原定理证明的对偶.</p><h3 id="2-2-3-二次曲线与对偶二次曲线"><a href="#2-2-3-二次曲线与对偶二次曲线" class="headerlink" title="2.2.3 二次曲线与对偶二次曲线"></a>2.2.3 二次曲线与对偶二次曲线</h3><p>二次曲线由平面上的二阶方程描述. 在欧氏几何中，二次曲线有三种主要类型: 双曲线，椭圆和抛物线(后面将定义的所谓的退化二次曲线除外)，在经典理论中，这三类曲线是不同方向的平面与圆锥相交所产生的截线(退化的二次曲线由过锥顶的平面产生). 但是我们将了解到，在2D射影几何中所有非退化的二次曲线在射影变换下都等价.</p><p>在非齐次坐标中，二次曲线的方程是$$ax^2+bxy+cy^2+dx+ey+f=0$$对应于一个二阶多项式. 通过替代$x \mapsto x_1/x_3, y \mapsto x_2/x_3$，”齐次化”得到$$\begin{equation} ax_1^2+bx_1x_2+cx_2^2+dx_1x_3+ex_2x_3+fx_3^2=0 \tag{2.1} \end{equation}$$</p><p>或表示成矩阵形式$$\mathbf x^\intercal \mathbf C \mathbf x = 0 \tag{2.2}$$</p><p>其中二次曲线系数矩阵$\mathbf C$为$$\mathbf C = \begin{bmatrix} a &amp; b/2 &amp; d/2 \\ b/2 &amp; c &amp; e/2 \\ d/2 &amp; e/2 &amp; f \end{bmatrix} \tag{2.3}$$</p><p>注意二次曲线的系数矩阵是对称的. 它与点和线的齐次表达式一样，重要的仅仅是矩阵元素的比率，因为用一个非零标盘乘$\mathbf C$不会影响上面的方程. 因此，$\mathbf C$是一条二次曲线的齐次表示. 二次曲线有五个自由度，可以视为比率$\left| a : b : c : d : e : f \right|$或等价地视为对称矩阵六个元素减去一个比例因子.</p><h4 id="五点定义一条二次曲线"><a href="#五点定义一条二次曲线" class="headerlink" title="五点定义一条二次曲线"></a>五点定义一条二次曲线</h4><p>假定我们希望计算过点集$\mathbf x_i$的二次曲线，在二次曲线被唯一确定之前，我们可以指定多少个点? 我们打算用一个确定二次曲线的算法来构造性地回答这个问题. 根据(2.1)可知，每一点$\mathbf x_i$给二次系数提供一个约束，因为如果二次曲线过$(x_i, y_i)^\intercal$，便有$$ax_i^2+b_ix_iy_i+cy_i^2+dx_i+ey_i+f=0$$</p><p>该约束可以重写为$$(\ x_i^2\quad x_iy_i\quad y_i^2\quad x_i\quad y_i\quad 1 \ ) \  \mathbf c = 0$$其中$\mathbf c = ( a , b , c , d , e , f)^\intercal$是把二次曲线 $\mathbf C$表示成一个6维矢量.</p><p>把五点提供的约束堆积起来，得到$$\begin{bmatrix} x_1^2 &amp; x_1y_1 &amp; y_1^2 &amp; x_1 &amp; y_1 &amp; 1 \\ x_2^2 &amp; x_2y_2 &amp; y_2^2 &amp; x_2 &amp; y_2 &amp; 1 \\ x_3^2 &amp; x_3y_3 &amp; y_3^2 &amp; x_3 &amp; y_3 &amp; 1 \\ x_4^2 &amp; x_4y_4 &amp; y_4^2 &amp; x_4 &amp; y_4 &amp; 1 \\ x_5^2 &amp; x_5y_5 &amp; y_5^2 &amp; x_5 &amp; y_5 &amp; 1 \end{bmatrix} \mathbf c = 0 \tag{2.4}$$</p><p>因而二次曲线是这个$5\times6$矩阵的零矢量. 它表明一条二次曲线由一般位置的五个点唯一确定(相差一个尺度因子)。这种通过求零空间来拟合一个几何实体(或关系)的方法今后将经常在本书介绍计算的章节中采用.</p><h4 id="二次曲线的切线"><a href="#二次曲线的切线" class="headerlink" title="二次曲线的切线"></a>二次曲线的切线</h4><p>在齐次坐标下，过二次曲线上点$\mathbf x$的切线$\mathbf l$有特别简单的形式：</p><h5 id="结论2-7-过（非退化）二次曲线-mathrm-C-上点-mathbf-x-的切线-mathbf-l-由-mathbf-l-mathrm-C-mathbf-x-确定"><a href="#结论2-7-过（非退化）二次曲线-mathrm-C-上点-mathbf-x-的切线-mathbf-l-由-mathbf-l-mathrm-C-mathbf-x-确定" class="headerlink" title="结论2.7  过（非退化）二次曲线$\mathrm C$上点$\mathbf x$的切线$\mathbf l$由$\mathbf l = \mathrm C \mathbf x$确定."></a>结论2.7  过（非退化）二次曲线$\mathrm C$上点$\mathbf x$的切线$\mathbf l$由$\mathbf l = \mathrm C \mathbf x$确定.</h5><p><strong>证明</strong>  因为$\mathbf l^\intercal \mathbf x = \mathbf x^\intercal \mathrm C \mathbf x = 0$, 所以直线$\mathbf l = \mathrm C \mathbf x$过$\mathbf x$. 如果$\mathbf l$仅与二次曲线交于一点，那么它就是切线，我们的证明也就完成了. 否则，假定$\mathbf l$与该二次曲线还交于另一点$\mathbf y$，则有$\mathbf y^\intercal \mathrm C \mathbf y = 0$和$\mathbf x^\intercal \mathrm C \mathbf y =\mathbf l^\intercal \mathbf y = 0$. 由此推出$(x+\alpha y)^\intercal \mathrm C (x+\alpha y)=0$对所有$\alpha$成立，这表明连接$\mathbf x$和$\mathbf y$的整条直线$\mathbf l = \mathrm C \mathbf x$在该二次曲线$\mathrm C$上，因而C是退化的（见下文）.</p><h4 id="对偶二次曲线"><a href="#对偶二次曲线" class="headerlink" title="对偶二次曲线"></a>对偶二次曲线</h4><p>上面定义的二次曲线$\mathrm C$更确切地应称为<strong>点</strong>二次曲线，因为它定义的是点的方程. 给出了$\mathbb P^2$的对偶结论2.6以后，理所当然应该有一个由直线的方程定义的二次曲线. 这种<strong>对偶</strong>（或线）二次曲线也由一个$3 \times 3$矩阵表示，我们把它记为$\mathrm C^*$. 二次曲线$\mathrm C$的切线$\mathbf l$满$\mathbf l^\intercal \mathrm C^* \mathbf l = 0$. 其中$\mathrm C^*$表示$\mathrm C$的伴随矩阵（伴随矩阵在附录4(p578[p404])的节A4.2(p580[406])中定义）. 对非奇异对称矩阵$\mathrm C$有$\mathrm C^* = \mathrm C^{-1}$(相差一个尺度因子）.</p><p>当$\mathrm C$为满秩时，对偶二次曲线方程可直接推导：根据结论2.7, 过$\mathrm C$上点$\mathbf x$的切线是$\mathbf l = \mathrm C \mathbf x$. 反之，直线$\mathbf l$切于$\mathrm C$的点$\mathbf x$是$\mathbf x = \mathrm C^{-1}\mathbf l$. 因为$\mathbf x$满足$\mathbf x^\intercal \mathrm C \mathbf x = 0$, 我们得到，$(\mathrm C^{-1}\mathbf l)^\intercal \mathrm C (\mathrm C^{-1}\mathbf l)=\mathbf l^\intercal \mathrm C^{-1}\mathbf l=0$, 因为$\mathrm C$是对称的，所以$\mathrm C^{-\intercal} = \mathrm C^{-1}$, 因而得到最后的结果.</p><p>对偶二次曲线也称<strong>二次曲线的包络</strong>，其理由在图2.2中给予说明. 对偶二次曲线有五个自由度. 与点二次曲线相类似，一般位置上的五条线定义一条对偶二次曲线.</p><p><img src="/assets/blogImg/2.2.png" alt="image-2.2"></p><p><font size="2"><strong>图2.2</strong>    (a)满足$\mathbf x^\intercal \mathrm C \mathbf x = 0$的点$\mathbf x$在一条点二次曲线上.（b)满足$\mathbf l^\intercal \mathrm C^* \mathbf l = 0$的直线$\mathbf l$是点二次曲线$\mathrm C$的切线，即二次曲线$\mathrm C$是直线$\mathbf l$的包络.</font></p><h4 id="退化二次曲线"><a href="#退化二次曲线" class="headerlink" title="退化二次曲线"></a>退化二次曲线</h4><p>非满秩矩阵$\mathrm C$所定义的二次曲线称作退化二次曲线. 退化的点二次曲线包含两条线（秩2）或一条重线（秩1).</p><p><strong>例2.8</strong>  二次曲线$$\mathrm C = \mathbf l \mathbf m^\intercal + \mathbf m \mathbf l^\intercal$$由$\mathbf l$和$\mathbf m$两线组成. $\mathbf l$上的点满足$\mathbf l^\intercal \mathbf x = 0$, 因而在二次曲线上，因为$\mathbf x^\intercal \mathrm C \mathbf x=(\mathbf x^\intercal \mathbf l)(\mathbf m^\intercal \mathbf x)+(\mathbf x^\intercal \mathbf m)(\mathbf l^\intercal \mathbf x)=0$. 类似地，满足$\mathbf m^\intercal \mathbf x=0$的点同样满足$\mathbf x^\intercal \mathrm C \mathbf x = 0$. 矩阵$\mathrm C$是秩为2的对称矩阵，它的零矢量为$\mathbf x = \mathbf l \times \mathbf m$，它是$\mathbf l$和$\mathbf m$的交点.</p><p>退化的<strong>线</strong>二次曲线包含两个点（秩2)，或一个重点（秩1). 例如，线二次曲线$\mathrm C^* = \mathbf x \mathbf y^\intercal + \mathbf y \mathbf x^\intercal$的秩为2并由一切过点$\mathbf x$或$\mathbf y$的直线组成. 注意对非可逆矩阵而言, $(\mathrm C^*)^* \neq \mathrm C$.</p><h2 id="2-3-射影变换"><a href="#2-3-射影变换" class="headerlink" title="2.3  射影变换"></a>2.3  射影变换</h2><p>Felix Klein在其名著：“Erlangen Program”[Klein-39]中提出：几何研究的是在变换群下保持不变的性质. 根据他的观点，2D射影几何研究的是关于射影平面$\mathbb P^2$在所谓<strong>射影映射</strong>的变换群下保持不变的性质.</p><p>射影映射是把$\mathbb P^2$的点（即齐次3维矢量）映射到$\mathbb P^2$的点的一种可逆映射，它把直线映射到直线. 更准确地说：</p><p><strong>定义2.9  射影映射</strong>是$\mathbb P^2$到它自身的一种满足下列条件的可逆映射 $h$ : 三点$x1, x2$和$x3$共线当且仅当$h(x1), h(x2), h(x3)$也共线.</p><p>射影映射组成一个群，因为射影映射的逆以及两个射影映射的复合也是射影映射. 射影映射也称为<strong>保线变换</strong>(一个有益的名字)，或<strong>射影变换</strong>或<strong>单应(homography)</strong>, 它们是同义术语.</p><p>在定义2.9中，射影映射用点线关联的几何概念来定义，它与坐标无关. 基于下列定理，我们也可得到射影映射的等价的代数定义.</p><h5 id="定理2-10-映射-h-mathbb-P-2-rightarrow-mathbb-P-2-是射影映射的充要条件是：存在一个-3-times3-非奇异矩阵-mathrm-H-使得-mathbb-P-2-的任何一个用矢量-mathbf-x-表示的点都满足-h-x-mathrm-H-mathbf-x"><a href="#定理2-10-映射-h-mathbb-P-2-rightarrow-mathbb-P-2-是射影映射的充要条件是：存在一个-3-times3-非奇异矩阵-mathrm-H-使得-mathbb-P-2-的任何一个用矢量-mathbf-x-表示的点都满足-h-x-mathrm-H-mathbf-x" class="headerlink" title="定理2.10  映射$h$ : $\mathbb P^2 \rightarrow \mathbb P^2$是射影映射的充要条件是：存在一个$3\times3$非奇异矩阵$\mathrm H$, 使得$\mathbb P^2$的任何一个用矢量$\mathbf x$表示的点都满足$h(x)=\mathrm H \mathbf x$."></a>定理2.10  映射$h$ : $\mathbb P^2 \rightarrow \mathbb P^2$是射影映射的充要条件是：存在一个$3\times3$非奇异矩阵$\mathrm H$, 使得$\mathbb P^2$的任何一个用矢量$\mathbf x$表示的点都满足$h(x)=\mathrm H \mathbf x$.</h5><p>为了解释这个定理，我们用齐次3维矢量$\mathbf x$来表示$\mathbb P^2$中的点，而用$\mathrm H \mathbf x$表示齐次坐标的线性映射. 该定理断言任何射影映射都以这样一种齐次坐标的线性变换出现，反之，任何这样的映射是射影映射. 这里我们不全面地证明这个定理. 我们仅打算证明齐次坐标的任何可逆线性变换是射影映射.</p><p><strong>证明</strong>  令$x1, x2$和$x3$同在一条直线$\mathbf l$上. 因此，$\mathbf l^\intercal \mathbf x_i = 0, i=1,…,3$. 令$\mathrm H$为非奇异$3\times3$矩阵. 可以证明$\mathbf l^\intercal \mathrm H^{-1} \mathrm H \mathbf x_i = 0$. 因此点$\mathrm H \mathbf x_i$都在直线$\mathrm H^{-\intercal} \mathbf l$上，因而该变换保持共线性.</p><p>其逆命题是每个射影映射都以这种方式出现，但相当难证明.</p><p>根据这个定理，可以给出射影变换(或保线变换）的另一种定义.</p><p><strong>定义2.11  射影变换</strong>  平面射影变换是关于齐次3维矢量的一种线性变换，并可用一个非奇异$3\times3$矩阵$\mathrm H$表示为：$$\begin{pmatrix} x’_1 \\ x’_2 \\ x’_3 \end{pmatrix} = \begin{bmatrix} h_{11}&amp;h_{12}&amp;h_{13} \\ h_{21}&amp;h_{22}&amp;h_{23} \\ h_{31}&amp;h_{32}&amp;h_{33} \end{bmatrix}\begin{pmatrix} x_1 \\ x_2 \\ x_3 \end{pmatrix} \tag{2.5}$$或更简洁地表示为X’ = Hx.</p><p>注意 : 此方程中的矩阵$\mathrm H$乘以任意一个非零比例因子不会使射影变换改变. 换句话说$\mathrm H$是一个齐次矩阵，与点的齐次表示一样，有意义的仅仅是矩阵元素的比率. 在$\mathrm H$的九个元素中有八个独立比率，因此一个射影变换有八个自由度.</p><p>射影变换将每个图形投影为射影等价的图形，保持所有的射影性质不变. 在图2.1的射线模型中，一个射影变换就是$\mathbb R^3$的一种线性变换.</p><p><img src="/assets/blogImg/2.3.png" alt="image-2.3"></p><p><font size="2"><strong>图2.3  中心投影把一张平面的点映射成另一张平面的点</strong>. 过投影中心作一张与两平面$\pi$和$\pi’$相交的平面便不难看出中心投影也把直线映射为直线. 因为直线被映射为直线，所以中心投影是射影变换并可用齐次坐标的线性变换$\mathbf x’ = \mathrm H \mathbf x$表示.</font></p><h4 id="平面之间的映射"><a href="#平面之间的映射" class="headerlink" title="平面之间的映射"></a>平面之间的映射</h4><p>图2.3中给出怎样应用定理2.10的一个例子. 沿过一个公共点（投影中心）的射线的投影定义了从一张平面到另一张平面的映射. 显然这种点到点的映射保持直线不变，其中一张平面上的直线被映射到另一张平面上的直线. 如果在每一张平面上建立坐标系并且采用齐次坐标来表示点，那么<strong>中心投影</strong>映射可以表示成$\mathbf x’ = \mathrm H \mathbf x$, 其中$\mathrm H$是$3\times3$非奇异矩阵. 实际上，如果在两平面上建立的都是欧氏（直角）坐标系，那么这样一种由中心投影定义的映射比一般射影变换有更多的约束. 我们称它为<strong>透视映射</strong>而不是完全的射影映射，它可由一个六自由度的变换来表示. 我们将在节A5.4(p430)中再回过来讨论透视映射.</p><p><strong>例2.12  消除平面透视图像的射影失真.</strong></p><p><img src="/assets/blogImg/2.4.png" alt="image-2.4"></p><p><font size="2"><strong>图2.4  消除透视失真</strong>.（a)带有透视失真的原始图像——窗子的上下边线显然会聚（即延长后相交）于一个有限点.（b)合成得到的前墙的正视图. 墙的图橡(a)与墙的真实几何通过一个射影变换相联系. 逆变换是把影像得到的四个窗角的角点映射到适当大小的矩形顶点并由此计算得到. 此变换由这四组点对应确定. 再用此变换作用于整幅图像. 注意图像中的地面部分出现进一步的射影失真. 它同样可以通过一个射影变换加以消除.</font></p><p>在透视影像下形状会失真. 例如，虽然原有的窗子是矩形，但在图2.4a中的图像上的窗子不是矩形. 景物平面上的平行线在图像上一般地不平行并会聚到一个有限点. 我们已经知道平面（或部分平面）的中心投影的图像与原平面通过射影变换相关，因而该图像是原景物的一种射影失真. 通过求该射影变换的逆变换并把它应用于图像就有可能“撤消”此射影变换. 它的结果将是一幅新的合成图像，其中在此平面上的物体将显示其正确的几何形状. 我们用图2.4a大楼的前墙对这做解释. 注意因为地面和大楼的前墙不在同一平面上，所以用于矫正大楼前墙的射影变换必然与用于地面的射影变换不一样.</p><p>我们将在第四章详细讨论由点到点的对应来求射影变换的计算. 现在，我们仅简洁地给出一种计箅该变换的方法. 首先选择世界平面与图像相对应的部分. 按图2.3所指示选择图像平面的2D局部坐标以及景物的世界坐标. 令世界与图像平面上的一对匹配点$\mathbf x$和$\mathbf x’$的非齐次坐标分别为$(x, y)^\intercal$和$(x’, y’)^\intercal$. 这里我们采用点的非齐次坐标而不是齐次坐标，因为从图像和世界平面的测量可以直接得到的是这些非齐次坐标.（2.5)式的射影变换可以写成如下非齐次形式：$$x’=\frac {x’_1}{x’_3}=\frac{h_{11}x+h_{12}y+h_{13}}{h_{31}x+h_{32}y+h_{33}},\qquad y’=\frac {x’_2}{x’_3}=\frac{h_{21}x+h_{22}y+h_{23}}{h_{31}x+h_{32}y+h_{33}}$$一组点对应可以提供关于$\mathrm H$元素的两个方程，把它简化后得到：$$x’(h_{31}x+h_{32}y+h_{33})=h_{11}x+h_{12}y+h_{13}$$$$y’(h_{31}x+h_{32}y+h_{33})=h_{21}x+h_{22}y+h_{23}$$</p><p>它们是关于$\mathrm H$元素的<strong>线性</strong>方程. 四组点对应提供八个这样的关于$\mathrm H$元素的线性方程，并足以解出$\mathrm H$(仅相差一个不重要的乘法因子）. 唯一的限制是这四点必须在“一般位置”上，即要求没有三个点共线. 用此方法计算变换$\mathrm H$并求它的逆，然后作用于整幅图像，便可消除被选平面的射影失真效应. 其结果在图2.4b中给出.</p><p>针对这个例子，我们给出三点说明：第一，用这种方法计箅矫正变换$\mathrm H$不需要知道摄像机参数或平面位置的<strong>任何</strong>信息；第二，为消除射影失真，并非总需要知道四个点的坐标: 节2.7将介绍另一种方法，它需要较少但不同类型的信息；第三，高级的（和推荐的）计箅射影变换的方法将在第四章中闸述.</p><p>射影变换是一种重要的映射，与世界平面的透视成像相比较，它能表示更多的情形. 图2.5中给出了其他的几个例子，我们将在本书后续的篇章中对其中的每种情形作更详尽的讨论.</p><p><img src="/assets/blogImg/2.5.png" alt="image-2.5"></p><p><font size="2"><strong>图2.5  出现在透视图像中的几个射影变换$(\mathbf x’=\mathrm H \mathbf x)$的例子</strong>.（a)由一张世界平面诱导的两幅图像之间的射影变换（两射影变换的复合是射影变换）；(b)摄像中心相同的两幅图像之间的射影变换（即一个摄像机绕它的中心旋转或变化它的焦距）；(c)—张平面的图像（大楼的后墙）和它的阴影在另一张平面上(地平面)的图像之间的射影变换. 图(c)取自Luc Van Gool.</font></p><h3 id="2-3-1-直线与二次曲线的变换"><a href="#2-3-1-直线与二次曲线的变换" class="headerlink" title="2.3.1    直线与二次曲线的变换"></a>2.3.1    直线与二次曲线的变换</h3><h4 id="直线的变换"><a href="#直线的变换" class="headerlink" title="直线的变换"></a>直线的变换</h4><p>定理2.10的证明指出：如果点$\mathbf x_i$在直线$\mathbf l$上，那么经射影变换后的点$\mathbf x’_i=\mathrm H \mathbf x_i$在直线$\mathbf l’=\mathrm H^{-\intercal} \mathbf l$上. 因为$\mathbf l’^\intercal\mathbf x’_i=\mathbf l^\intercal \mathrm H^{-1}\mathrm H \mathbf x_i = 0$, 故变换$\mathrm H$保持点在直线上的性质. 它给出了关于直线的变换规则：在点变换$\mathbf x’_i=\mathrm H \mathbf x_i$下，直线$\mathbf l$变换为$$\mathbf l’=\mathrm H^{-\intercal} \mathbf l \tag{2.6}$$</p><p>我们也可以换一种写法$\mathbf l’^\intercal=\mathbf l^\intercal \mathrm H^{-1}$. 注意直线和点变换的基本区别. 点变换依据$\mathrm H$, 而直线 (视为行矢量）变换则依据$\mathrm H^{-1}$. 这可以用术语“协变”或“逆变”做解释. 我们称点变换为<strong>逆变</strong>而线变换为<strong>协变</strong>. 这种区别将在第15章讨论张量时重新提到并在附录1(p400)中全面地给予解释.</p><h4 id="二次曲线的变换"><a href="#二次曲线的变换" class="headerlink" title="二次曲线的变换"></a>二次曲线的变换</h4><p>在点变换$\mathbf x’=\mathrm H \mathbf x$下，(2.2)变为$$\begin{aligned} \mathbf x^\intercal \mathrm C \mathbf x &amp;=\mathbf x’^\intercal [\mathrm H^{-1}]^\intercal \mathrm C \mathrm H^{-1} \mathbf x’ \\ &amp;= \mathbf x’^\intercal \mathrm H^{-\intercal} \mathrm C \mathrm H^{-1} \mathbf x’ \end{aligned}$$它是一种二次形式$\mathbf x’^\intercal \mathrm C’ \mathbf x’$, 其中$\mathrm C’ = \mathrm H^{-\intercal} \mathrm C \mathrm H^{-1}$. 由此得到二次曲线变换的规则：</p><h5 id="结论2-13-在点变换-mathbf-x’-mathrm-H-mathbf-x-下，二次曲线-mathrm-C-变换为-mathrm-C’-mathrm-H-intercal-mathrm-C-mathrm-H-1"><a href="#结论2-13-在点变换-mathbf-x’-mathrm-H-mathbf-x-下，二次曲线-mathrm-C-变换为-mathrm-C’-mathrm-H-intercal-mathrm-C-mathrm-H-1" class="headerlink" title="结论2.13  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，二次曲线$\mathrm C$变换为$\mathrm C’ = \mathrm H^{-\intercal} \mathrm C \mathrm H^{-1}$."></a>结论2.13  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，二次曲线$\mathrm C$变换为$\mathrm C’ = \mathrm H^{-\intercal} \mathrm C \mathrm H^{-1}$.</h5><p>因$\mathrm H^{-1}$出现在方程中，故可以称二次曲线变换为<strong>协变</strong>. 对偶二次曲线的变换规则可用类似的方式导出，即:</p><h5 id="结论2-14-在点变换-mathbf-x’-mathrm-H-mathbf-x-下，对偶二次曲线-mathrm-C-变换为-acute-mathrm-C-mathrm-H-mathrm-C-mathrm-H-intercal"><a href="#结论2-14-在点变换-mathbf-x’-mathrm-H-mathbf-x-下，对偶二次曲线-mathrm-C-变换为-acute-mathrm-C-mathrm-H-mathrm-C-mathrm-H-intercal" class="headerlink" title="结论2.14  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，对偶二次曲线$\mathrm C^{*}$变换为$\acute{\mathrm C^{*}} = \mathrm H \mathrm C^* \mathrm H^{\intercal}$."></a>结论2.14  在点变换$\mathbf x’ = \mathrm H \mathbf x$下，对偶二次曲线$\mathrm C^{*}$变换为$\acute{\mathrm C^{*}} = \mathrm H \mathrm C^* \mathrm H^{\intercal}$.</h5><h2 id="2-4-变换的层次"><a href="#2-4-变换的层次" class="headerlink" title="2.4  变换的层次"></a>2.4  变换的层次</h2><p>我们将在本节中介绍射影变换的重要特殊情况以及它们的几何性质. 节1.3已经指出射影变换组成一个群. 这个群被称为<strong>射影线性群</strong>，我们将会看到这些特殊情况都是该群的<strong>子群</strong>.</p><p>$n\times n$可逆实矩阵的群称为（实的）一般线性群或$GL(n)$. 当把相差非零纯量因子的矩阵都视为等同时，便得到射影线性群，记为$PL(n)$(它是$GL(n)$的商群）. 在平面射影变换时，n = 3.</p><p>$PL(3)$的重要子群包括<strong>仿射群</strong>和<strong>欧氏群</strong>，仿射群是由$PL(3)$中最后一行为(0, 0, 1)的矩阵组成的子群；欧氏群是仿射群的子群，其左上角的$2\times2$矩阵是正交的. 当左上角的$2\times2$矩阵的行列式为1时称为<strong>定向欧氏群</strong>.</p><p>我们将介绍这些变换，从最特殊的等距变换开始，并逐步推广直到射影变换. 由此定义了变换的一个层次. 图2.6给出属于不同层面上的各种变换的失真效果.</p><p><img src="/assets/blogImg/2.6.png" alt="image-2.6"></p><p><font size="2"><strong>图2.6  在中心投影下出现的失真</strong>. 花砖地板的图像. (a)<strong>相似变换</strong>：圆被影像为圆. 方砖被影像为正方形. 平行或垂直的线在图像中有相同的定向. (b)<strong>仿射</strong>：圆被影像为椭圆. 世界中的垂直线不再被影像为垂直线. 但是，在世界中的方砖的平行边在图像中仍平行. (c)<strong>射影</strong>: 平行世界线被影像为会聚线. 离摄像机近的方砖的图像比远的大.</font></p><p>某些有趣的变换，例如透视映射，不是群(因为两个透视映射的复合是射影映射而不是透射映射).这方面的内容在节A5.4(p430)中讨论.</p><h4 id="不变量"><a href="#不变量" class="headerlink" title="不变量"></a>不变量</h4><p>介绍变换的另一种<strong>代数方法</strong>（即把变换视为作用于点或曲线的坐标的矩阵）是用被保持不变的元素或量即所谓的不变量来介绍. 一个几何配置的一个(标量)不变量是该配置的函数，其值在某特殊的变换下不变. 例如，两点间的距离在欧氏变换（平移和旋转）下不变，但在相似变换（即平移，旋转和均匀缩放）下则不然. 因此，距离是欧氏不变量但不是相似不变量. 两线间的夹角既是欧氏又是相似不变量.</p><h4 id="2-4-1-类-Ⅰ-等距变换"><a href="#2-4-1-类-Ⅰ-等距变换" class="headerlink" title="2.4.1    类 Ⅰ:  等距变换"></a>2.4.1    类 Ⅰ:  等距变换</h4><p>等距(isometric)变换是平面$\mathbb R^2$的变换，它保持欧氏距离不变(<em>iso</em> = 一样，<em>metric</em> = 度量). —个等距变换可表示为$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} \varepsilon \cos\theta &amp;-\sin\theta&amp;t_x \\ \varepsilon \sin\theta &amp;\cos\theta&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix}$$</p><p>其中$\varepsilon = ±1$. 如果$\varepsilon$ = 1那么该等距变换是<strong>保向</strong>的并且也是<strong>欧氏</strong>变换（平移和旋转的复合）. 如果$\varepsilon=-1$, 那么该等距变换是逆向的. 例如反射（由对角矩阵出diag(-1, 1, 1)表示）与欧氏变换的复合.</p><p>欧氏变换是刚体运动的模型. 到目前为止，它们是实用中最重要的等距变换，我们将集中研究它们. 但是，保向等距变换在结构恢复时常会出现多义性.</p><p>平面欧氏变换可以用更简洁的分块形式写为$$\mathbf x’=\mathrm H_\mathrm E \mathbf x=\begin{bmatrix} \mathrm R &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.7}$$</p><p>其中$\mathrm R$是$2\times2$旋转矩阵（满足$\mathrm R^\intercal \mathrm R = \mathrm R \mathrm R^\intercal=\mathrm I$的正交矩阵），$\mathbf t$是2维平移矢量, 而$\mathbf 0$是2维零矢量. 特殊的情况是纯旋转(当$\mathbf t = 0$)和纯平移(当$\mathrm R=\mathrm I$). 欧氏变换也称为<strong>位移</strong>.</p><p>平面欧氏变换有三个自由度：旋转占一个，平移占两个. 因此，确定该变换必须指定三个参量. 该变换可以由两组点对应来计算.</p><h4 id="不变量-1"><a href="#不变量-1" class="headerlink" title="不变量"></a>不变量</h4><p>我们熟知它的不变量, 例如，长度（两点的距离），角度（两线的夹角）和面积.</p><h4 id="群和定向"><a href="#群和定向" class="headerlink" title="群和定向"></a>群和定向</h4><p>如果等距变换左上角的$2\times2$矩阵的行列式为1，它是保向的. <strong>保向</strong>的等距变换形成一个群， 但<strong>逆向</strong>的不是. 这种区别对于下面的相似和仿射变换同样如此.</p><h3 id="2-4-2-类-II-相似变换"><a href="#2-4-2-类-II-相似变换" class="headerlink" title="2.4.2 类 II:  相似变换"></a>2.4.2 类 II:  相似变换</h3><p>相似变换是一个等距变换与一个均匀缩放的复合. 当欧氏变换（即没有反射）与均匀缩放复合时，相似变换的矩阵表示为：$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} s \cos\theta &amp;-s\sin\theta&amp;t_x \\ s \sin\theta &amp;s\cos\theta&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix} \tag{2.8}$$可以用更简洁的分块形式写成$$\mathbf x’=\mathrm H_\mathrm S \mathbf x=\begin{bmatrix} s\mathrm R &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.9}$$</p><p>其中标量s表示均匀缩放. 相似变换也称<strong>等形</strong>变换，因为它保持了“形状”(形式). 一个平面</p><p>相似变换有四个自由度，比欧氏变换多一个缩放自由度. 相似变换可由两组点对应算出.</p><h4 id="不变量-2"><a href="#不变量-2" class="headerlink" title="不变量"></a>不变量</h4><p>在考虑缩放自由度影响的基础上，它的不变量可以由欧氏不变量推出. 直线的夹角不受旋转，平移或均匀缩放的影响，因而是相似不变量. 特别是平行线映射为平行线. 两点间的长度不是相似不变量, 但两长度的<strong>比率</strong>是不变量，因其缩放因子相互抵消. 同样地, 面积的比率是不变量，也因为缩放因子(的平方)被抵消.</p><h4 id="度量结构"><a href="#度量结构" class="headerlink" title="度量结构"></a>度量结构</h4><p>讨论重构(第9章)时常用的一个术语是<strong>度量</strong>. 所谓<strong>度量结构</strong>就是确定到只相差一个相似变换的结构.</p><h3 id="2-4-3-类III-仿射变换"><a href="#2-4-3-类III-仿射变换" class="headerlink" title="2.4.3 类III:  仿射变换"></a>2.4.3 类III:  仿射变换</h3><p>仿射变换是一个非奇异线性变换与一个平移变换的复合. 它的矩阵表示为$$\begin{pmatrix} x’ \\ y’ \\ 1 \end{pmatrix} = \begin{bmatrix} a_{11} &amp;a_{12}&amp;t_x \\ a_{21} &amp;a_{22}&amp;t_y \\ 0&amp;0&amp;1 \end{bmatrix}\begin{pmatrix} x \\ y \\ 1 \end{pmatrix} \tag{2.10}$$或分块形式$$\mathbf x’=\mathrm H_\mathrm A \mathbf x=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf 0^\intercal &amp; 1 \end{bmatrix} \mathbf x \tag{2.11}$$</p><p>其中$\mathrm A$是一个$2\times2$的非奇异矩阵, 平面仿射变换有六自由度，对应于六个矩阵元素. 变换可以由三组点对应来计算.</p><p>理解仿射变换中线性成分$\mathrm A$的几何效应的一个有益方法是把它看作两个基本变换——旋转和非均匀缩放的复合. 仿射矩阵$\mathrm A$总能分解为$$\mathrm A = \mathrm R(\theta)\mathrm R(-\phi)\mathrm D\mathrm R(\phi) \tag{2.12}$$其中$\mathrm R(\theta)$和$\mathrm R(\phi)$分别表示转角为$\theta$和$\phi$的旋转，而$\mathrm D$为对角矩阵：$$\mathrm D=\begin{bmatrix} \lambda_1 &amp; 0 \\ 0 &amp; \lambda_2 \end{bmatrix}$$分解式(2.12)由SVD(节A3.3(p408))(SVD为“奇异值分解”的缩写)直接得到: $\mathrm A=\mathrm U\mathrm D\mathrm V^\intercal=(\mathrm U\mathrm V^\intercal)(\mathrm V\mathrm D\mathrm V^\intercal) = R(\theta)(R(-\phi)\mathrm D\mathrm R(\phi))$, 其中第一个等式来自$\mathrm A$的SVD, 其他 等式则因为$\mathrm U$和$\mathrm V$是正交矩阵.</p><p>因此，仿射矩阵$\mathrm A$被看成是一个旋转($\phi$);加上在(已旋转)的$x$和$y$方向分别进行按比例因子$\lambda_1$和$\lambda_2$的缩放，再加上一个回转($-\phi$)和最后一个旋转($\theta$)的复合变换. 与相似变换相比，“新”几何仅仅是非均匀缩放. 它使仿射变换比相似变换多了两个自由度. 它们是缩放方向的角度($\phi$)和缩放参数比率$\lambda_1:\lambda_2$. 仿射变换的本质是在一个特定角的两个垂直方向上进行缩放. 图2.7给出两个示意性例子.</p><p><img src="/assets/blogImg/2.7.png" alt="image-2.7"></p><p><font size="2"><strong>图2.7  平面仿射变换失真</strong>. (a)旋转R($\theta$). (b)形变R($-\phi$)DR($\phi$). 注意形变中缩放方向是正交的.</font></p><h4 id="不变量-3"><a href="#不变量-3" class="headerlink" title="不变量"></a>不变量</h4><p>因为仿射变换包含非均匀缩放，所以长度比率和线间夹角等相似不变量在仿射变换下不再保留. 三个重要的仿射不变量是：</p><ol><li><strong>平行线</strong>  考査两平行线. 它们交于某无穷远点$(x1, x2, 0)^\intercal$. 在仿射变换下，该点被映射到另一个无穷远点. 因此，平行线被映射到仍然交于无穷远的直线，即它们的像仍然平行.</li><li><strong>平行线段的长度比</strong>  直线段的长度缩放仅与该线段方向和缩放方向之间的夹角有关. 假定该线段与正交缩放方向$x-$轴的夹角为$\alpha$, 那么，缩放大小为$\sqrt{\lambda_1^2\cos^2\alpha + \lambda_2^2\sin^2\alpha}$. 因该缩放因子对所有同向的直线是一样的，所以在平行线段的比率中被消去.</li><li><strong>面积比</strong>  可以通过分解式(2.12)直接得到该不变性. 旋转和平移不影响面积，起作用的仅仅是按$\lambda_1$和$\lambda_2$的缩放. 其效果是面积被缩放了$\lambda_1\lambda_2=\mathrm d\mathrm e\mathrm t;\mathrm A$倍. 因此，任何形状的面积都被缩放$\mathrm d\mathrm e\mathrm t;\mathrm A$倍，而该缩放因子在面积比中被消去. 我们将会看到这一性质在射影变换时不成立.</li></ol><p>根据det A是正或负，仿射变换分别称为保向的或逆向的. 因$\mathrm d\mathrm e\mathrm t;\mathrm A=\lambda_1\lambda_2$，保向性或逆向性仅与其符号有关.</p><h3 id="2-4-4类-Ⅳ-射影变换"><a href="#2-4-4类-Ⅳ-射影变换" class="headerlink" title="2.4.4类 Ⅳ: 射影变换"></a>2.4.4类 Ⅳ: 射影变换</h3><p>射影变换已在(2.5)中定义. 它是<strong>齐次</strong>坐标的一般非奇异线性变换. 它是仿射变换的推广，仿射变换是<strong>非齐次</strong>坐标的一般非奇异线性变换和一个平移的复合. 我们早已见到射影变换的作用(节2.3). 这里，我们取其分块形式$$\mathbf x’=\mathrm H_\mathrm P \mathbf x=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf v^\intercal &amp; v \end{bmatrix} \mathbf x \tag{2.13}$$</p><p>其中矢量$\mathbf v= (v_1, v_2)^\intercal$. 齐次矩阵虽有九个元素但只有它们的比率是有意义的，因此该变换由八个参数确定. 注意并不是总有可能通过对矩阵缩放而取$v$为1，因为$v$可能是零. 两平面之间的射影变换可由四组点对应算出，但其中属于同一平面的三点必须不共线. 见图2.4.</p><p>与仿射变换不同，在$\mathbb P^2$中不能区分保向或逆向射影变换. 我们将在节2.6中回到这个问题.</p><h4 id="不变量-4"><a href="#不变量-4" class="headerlink" title="不变量"></a>不变量</h4><p>最基本的射影不变量是四共线点的交比：直线上长度的比率在仿射变换下保持不变，但在射影变换下并非如此. 然而比率的比率即直线上长度的<strong>交比</strong>是射影不变量. 我们将在节2.5讨论这个不变量的性质.</p><h4 id="2-4-5-小结与比较"><a href="#2-4-5-小结与比较" class="headerlink" title="2.4.5  小结与比较"></a>2.4.5  小结与比较</h4><p>仿射变换(6 dof)介于相似变换(4 dof)与射影变换(8 dof)之间. 仿射变换推广相似变换使得夹角不再保持不变，造成物体形状在变换后产生歪斜. 另一方面，仿射变换对平面的作用是均匀的：对于一个给定的仿射变换，平面上任何地方的物体(比如说一个正方形)的面积缩放因子det A都是一样的；直线变换的方向取决于它原来的方向，而与它在平面上的位置无关. 与此相反，经一个给定的射影变换后，面积的缩放随位置的改变而改变(比如在透视变换下，平面上较远的正方形比较近的正方形的图像小，如图2.6所示)；并且直线变换的方向既取决于原线的方向又取决于它的位置(在节7.6(p149)中将会看到线的消影点仅取决于直线的方向，与位置无关).</p><p>射影与仿射变换的根本区别在于射影变换中矢量$\mathbf v$不是零. 由它引起射影变换的非线性效应. 把理想点$(x1, x2, 0)^\intercal$在仿射和射影变换下的映射做一个对比. 首先看仿射变换，$$ \begin{bmatrix} \mathrm A &amp;\mathbf t \\ \mathbf 0^\intercal&amp;1 \end{bmatrix}\begin{pmatrix} x_1 \\ x_2 \\ 0 \end{pmatrix}=\begin{pmatrix} \mathrm A \begin{pmatrix} x_1 \\ x_2 \end{pmatrix}  \\ 0 \end{pmatrix} \tag{2.14}$$再看，射影变换$$ \begin{bmatrix} \mathrm A &amp;\mathbf t \\ \mathbf v^\intercal&amp;v \end{bmatrix}\begin{pmatrix} x_1 \\ x_2 \\ 0 \end{pmatrix}=\begin{pmatrix} \mathrm A \begin{pmatrix} x_1 \\ x_2 \end{pmatrix}  \\ v_1x_1+v_2x_2 \end{pmatrix} \tag{2.15}$$</p><p>在第一种情况下，理想点仍然是理想点(在无穷远处). 在第二种情况下，理想点被映射到有 限点. 正是因为具有这种能力，射影变换能对消影点建模.</p><h4 id="2-4-6-射影变换的分解"><a href="#2-4-6-射影变换的分解" class="headerlink" title="2.4.6  射影变换的分解"></a>2.4.6  射影变换的分解</h4><p>射影变换可以分解为一串变换链的复合，链中的每个矩阵比它前面的一个矩阵所表示的变换层次高.$$\mathrm H=\mathrm H_\mathrm S \mathrm H_\mathrm A \mathrm H_\mathrm P=\begin{bmatrix} s\mathrm R &amp; \mathbf t/v \\ \mathbf 0^\intercal &amp;1 \end{bmatrix}\begin{bmatrix} \mathrm K &amp; \mathbf 0 \\ \mathbf 0^\intercal &amp;1 \end{bmatrix}\begin{bmatrix} \mathrm I &amp; \mathbf 0 \\ \mathbf v^\intercal &amp;v \end{bmatrix}=\begin{bmatrix} \mathrm A &amp; \mathbf t \\ \mathbf v^\intercal &amp;v \end{bmatrix} \tag{2.16}$$</p><p>其中$\mathrm A=s\mathrm R\mathrm K + \mathbf t\mathbf v^\intercal/v$, 而$\mathrm K$是满足det K = 1的归一化上三角矩阵. 如果$v\neq0$上述分解是有效的，而且如果 $s$ 取正值，它还是唯一的.</p><p>矩阵$\mathrm H_\mathrm S、\mathrm A_\mathrm A、\mathrm H_\mathrm P$分别是相似变换、仿射变换和射影变换(如下标S、A、P所指示). 考察例2.12中对平面的透视图像进行矫正的过程：$\mathrm H_\mathrm P(2;\mathrm d\mathrm o\mathrm f)$移动无穷远直线；$\mathrm H_\mathrm A(2;\mathrm d\mathrm o\mathrm f)$影响仿射性质，而不移动无穷远直线；最后，$\mathrm H_\mathrm S$是一般的相似变换(4 dof)，它不影响仿射及射影性质. 变换$\mathrm H_\mathrm P$属于节A5.3(p430)所介绍的一种有约束的透视变换.</p><p><strong>例2.15</strong>  射影变换</p><p>$$\mathrm H=\begin{bmatrix} 1.707 &amp; 0.586 &amp;1.0 \\ 2.707 &amp;8.242&amp;2.0 \\ 1.0 &amp; 2.0 &amp;1.0 \end{bmatrix}$$可以分解为$$\mathrm H=\begin{bmatrix} 2\cos45° &amp; -2\sin45° &amp;1 \\ 2\sin 45° &amp;2\cos45°&amp;2 \\ 0 &amp; 0 &amp;1 \end{bmatrix}\begin{bmatrix} 0.5 &amp; 1 &amp;0 \\ 0 &amp;2&amp;0 \\ 0 &amp; 0 &amp;1 \end{bmatrix}\begin{bmatrix} 1 &amp; 0 &amp;0 \\ 0 &amp;1&amp;0 \\ 1 &amp; 2 &amp;1 \end{bmatrix}$$</p><p>当我们的目标只是确定部分的变换时，可以应用这样的分解. 例如，如果我们需要从平面的 射影图像中测量长度比，那么仅需要确定(矫正)到相似变换. 我们将在节2.7回过来讨论这种方法.</p><h4 id="2-4-7-不变量的数目"><a href="#2-4-7-不变量的数目" class="headerlink" title="2.4.7 不变量的数目"></a>2.4.7 不变量的数目</h4><p>已知几何配置，在一种特定类型的变换下不变量的数目是多少？首先术语“数目”需要进一步精确化，如果一个量是不变量，例如欧氏变换下的长度，那么该量的任何函数也是不变量. 因而，我们要寻求一个与函数无关的不变量计数法则. 为了形成不变量就必须消去变换矩阵的参数数目，考虑到这点后可以导出：</p><h5 id="结论2-16-与函数无关的不变量数等于或大于配置的自由度数减去变换的自由度数"><a href="#结论2-16-与函数无关的不变量数等于或大于配置的自由度数减去变换的自由度数" class="headerlink" title="结论2.16  与函数无关的不变量数等于或大于配置的自由度数减去变换的自由度数."></a>结论2.16  与函数无关的不变量数等于或大于配置的自由度数减去变换的自由度数.</h5><p>例如，由一般位置上的四点所组成的配置有八个自由度(每点2个)，从而有4个相似，2个仿射和零个射影不变量，因为这些变换分别有4,6,8自由度.</p><p>表2.1归纳了2D变换群以及它们的不变性质. 在表中低层的变换是它高层的变换的特殊化. 在表低层的变换继承其高层变换的不变量.</p><p><img src="/assets/blogImg/t2.1.png" alt="table-2.1"></p><p><font size="2"><strong>表2.1.  常见平面变换的几何不变性质</strong>  $\mathrm A = \begin{bmatrix} a_{ij} \end{bmatrix}$是$2\times2$的可逆矩阵，$\mathrm R = \begin{bmatrix} r_{ij} \end{bmatrix}$是2D旋转矩阵，$(t_x, t_y)^\intercal$是2D平移矢量. 失真列给出变换对正方形所产生的典型效应. 表中高层的变换可以产生比它低层的变换的所有效应. 它们的范围从欧式(其中仅有平移和旋转)到射影(其中正方形被变换成任意四边形(假定没有三点共线)).</font></p><h2 id="2-5-1D射影几何"><a href="#2-5-1D射影几何" class="headerlink" title="2.5  1D射影几何"></a>2.5  1D射影几何</h2><p>直线射影几何$\mathbb P^1$的推导方法与平面的几乎一样. 直线上的点 $x$ 用齐次坐标表示为$(x1, x2)^\intercal$，而$(x1, 0)^\intercal$是该直线的理想点. 我们将用记号$\overline{\mathbf x}$表示2维矢量$(x_1, x_2)^\intercal$. 直线的射影变换由一个$2\times2$的齐次矩阵来表示：$$\overline {\mathbf x}’=\mathrm H_{2\times2}\overline {\mathbf x}$$它有3个自由度，即矩阵的四个元素减去一个全局缩放因子. 直线的射影变换可以由3组对应点来确定.</p><h5 id="交比"><a href="#交比" class="headerlink" title="交比"></a>交比</h5><p>交比是$\mathbb P^1$的基本射影不变量. 给定4个点$\overline {\mathbf x}_i$，<strong>交比</strong>定义为$$\rm Cross(\overline {\mathbf x}_1, \overline {\mathbf x}_2, \overline {\mathbf x}_3, \overline {\mathbf x}_4)=\frac{\left| \overline {\mathbf x}_1\overline {\mathbf x}_2 \right| \left| \overline {\mathbf x}_3\overline {\mathbf x}_4 \right|}{\left| \overline {\mathbf x}_1\overline {\mathbf x}_3 \right| \left| \overline {\mathbf x}_2\overline {\mathbf x}_4 \right|}$$其中$$\left| \overline {\mathbf x}_i\overline {\mathbf x}_j \right|=\rm det \begin{bmatrix} x_{i1} &amp; x_{j1} \\ x_{i2}&amp;x_{j2} \end{bmatrix}$$</p><p>关于交比的几点注释如下：</p><ol><li>交比的值与各点$\overline {\mathbf x}_i$所用的具体的齐次表示无关，因为分子和分母的缩放因子在它们之间抵消.</li><li>如果每点$\overline {\mathbf x}_i$都是有限点，并在齐次表示中均选择$x_2 = 1$, 那么$\left| \overline {\mathbf x}_i\overline {\mathbf x}_j \right|$就表示由到$\overline {\mathbf x}_i$到$\overline {\mathbf x}_j$的带符号的距离.</li><li>如果点$\overline {\mathbf x}_i$中有一个理想点，交比的定义仍然有效.</li><li>在任何直线的射影变换下，交比的值不变：如果$\overline {\mathbf x}’= \mathrm H_{2\times2}\overline {\mathbf x}$则$$\rm Cross(\overline {\mathbf x}_1’, \overline {\mathbf x}_2’, \overline {\mathbf x}_3’, \overline {\mathbf x}_4’) = Cross(\overline {\mathbf x}_1, \overline {\mathbf x}_2, \overline {\mathbf x}_3, \overline {\mathbf x}_4) \tag{2.17}$$</li></ol><p>以上四点的证明留着习题. 它也可以说成是：交比对于直线的射影坐标选择是不变量. 图2.8说明若干等交比的直线之间的射影变换.</p><p>平面射影变换下，平面上的任何直线都诱导一个1D射影变换.</p><p><img src="/assets/blogImg/2.8.png" alt="image-2.8image-2.8"></p><p><font size="2"><strong>图2.8  直线之间的射影变换</strong>. 图中有四组四共线点. 每组与其他组都通过直线到直线的射影变换相关联. 因为在射影变换下交比是不变量. 所以图中每一组有相同的交比值.</font></p><h4 id="共点线"><a href="#共点线" class="headerlink" title="共点线"></a>共点线</h4><p>共点线是直线上共线点的对偶. 这意味着平面上的共点线也有几何$\mathbb P^1$. 特别是, 任何四条共点线都有一个确定的交比，如图2.9a所示.</p><p><img src="/assets/blogImg/2.9.png" alt="image-2.9"></p><p><font size="2"><strong>图2.9  共点直线</strong>.  (a)四共点线$\mathbf l_i$与直线$\mathbf l$交于四点$\overline {\mathbf x}_i$. 这些直线的交比对平面射影变换来说是不变量. 它的值由点的交比：$\rm Cross(\overline {\mathbf x}_1, \overline {\mathbf x}_2, \overline {\mathbf x}_3, \overline {\mathbf x}_4)$给出. (b)共面点$\mathbf x_i$被过中心$\mathbf c$的投影影像到一直线$\mathbf l$(也在该平面上). 像点$\overline {\mathbf x}_i$的交比对像线$\mathbf l$的位罝来说是不变量.</font></p><font><p>请注意图2.9b如何把平面$\mathbb P^2$上的点投影到1维图像的表示方法. 特别是，如果$\mathbf c$表示摄像机中心，而直线$\mathbf l$表示像直线(像平面的1D情况)，那么点$\overline {\mathbf x}_i$是点$\mathbf x_i$向该像直线的投影. 点$\overline {\mathbf x}_i$的交比刻画四个像点的射影配置. 注意，就四个像点的射影配置而论，像直线的实际位置是无关紧要的——不同像直线的选择都给出射影等价的像点配置.</p><p>共点线的射影几何对理解第8章中对极线的射影几何非常重要.</p><h2 id="2-6-射影平面的拓扑"><a href="#2-6-射影平面的拓扑" class="headerlink" title="2.6  射影平面的拓扑"></a>2.6  射影平面的拓扑</h2><p>本节中<strong>简短地介绍一下$\mathbb P^2$的拓扑. 它并非是理解本书以后的内容所必须的.</strong></p><p>我们已经知道射影平面$\mathbb P^2$可以视为全体齐次3维矢量的集合. 这种类型的矢量$\mathbf x=(x_1, x_2, x_3)^\intercal$可以通过乘以一个非零因子使得$x_1^2+x_2^2+x_3^2=1$来归一化. 这样的一个点在$\mathbb R^3$的单位球面上. 但在$\mathbb P^2$中，任何相差一个乘数因子-1的矢量x和-x表示同一点. 因此，$\mathbb R^3$的单位球面$S^3$和射影平面$\mathbb P^2$之间存在一种二对一的对应. 射影平面可以画成一单位球面，其中符号相反的点视为等同. 在此表示中，$\mathbb P^2$上的直线被模型化为单位球面上的大圆( 符号相反的正对点仍等同 ). 可以验证，球上任何两不同的( 非正对 )点恰好在一大圆上，任何两大圆相交于一点( 因为正对点等同 ).</p><p>按拓扑学的语言，球面$S^2$是$\mathbb P^2$的2-叶复盖空间. 从而$\mathbb P^2$不是<strong>单连通</strong>的，即在$\mathbb P^2$中存在环，不能在$\mathbb P^2$内收缩到一点. 更专业化地说，$\mathbb P^2$的基本群是阶为2的循环群.</p><p>在把射影平面看作正对点等同的球面的模型中，可以把球而$S^2$的下半球拿掉，因为下半球的点与其在上半球的正对点一样. 在这种情形下，$\mathbb P^2$可以由上半球面构成并认为在赤道上正对点等同. 因为$S^2$的上半球拓扑等价于一个圆盘，所以$\mathbb P^2$就是一个圆盘而且边缘上正对点被视为等同或粘在一起. 这在物理上是不可能的. 通过给圆盘粘边界来构造拓扑空间是拓扑学常用的方法，并且事实上，任何2维流形都可以用这方法来构造，如图2.10所示.</p><p><img src="/assets/blogImg/2.10.png" alt="image-2.10"></p><p><font size="2"><strong>图2.10  表面的拓扑</strong>.  把正方形纸片( 拓扑等价于圆盘 )的边适当相粘接可以构成通常的曲面. 在每种情况中, 把正方形中有相同箭头的两边粘在一起并保持箭头的方叫一致. 我们得到( a )球面( b )环面( c )Klein 瓶( d )射影平面. 只有球面和环面可用带箭头的纸真正实现. 球面和环面是可定向的但射影平面和Klein瓶则不然.</font></p></font><p>射影平面$\mathbb P^2$的一个显著特点是不可定向，即不可能定义一个在整个表面上保持一致的局部方位( 例如由一对有向坐标轴来表示 ). 图2.11对此给予了说明，即证明射影平面包含一条逆向的路径.</p><p><img src="/assets/blogImg/2.11.png" alt="image-2.11"></p><p><font size="2"><strong>图2.11  曲面的定向</strong>.  一个坐标系( 图中用L表示 )可以沿曲面上—条路径平移并最终回到它的出发点. (a)表示一个射影平面. 坐标系( 由一对轴表示 )沿给出的路径回到出发点时被反向了，因为正方形的边界上视为等同的两个对点有一条轴的方向调转了. 这样的路径称为逆向路径，含有逆向路径的曲面称不可定向的. (b)给出一个熟知的例子：麦比乌斯带, 它由反向粘接长方形的两对边而得到. 可以验证，绕麦比乌斯带一圈的路径是逆向的.</font></p><h4 id="mathbb-P-1-的拓扑"><a href="#mathbb-P-1-的拓扑" class="headerlink" title="$\mathbb P^1$的拓扑"></a>$\mathbb P^1$的拓扑</h4><p>类似地，1维射影线可以等同于1维球面$S^1$( 即圆 )且正对点视为等同. 如果去掉可由上半圆复制的下半圆，那么上半圆便拓扑等价于一直线段. 因此$\mathbb P^1$拓扑等价于一条将两端视为等同的直线段，它也拓扑等价于圆$S^1$.</p><h2 id="2-7-从图像恢复仿射和度量性质"><a href="#2-7-从图像恢复仿射和度量性质" class="headerlink" title="2.7  从图像恢复仿射和度量性质"></a>2.7  从图像恢复仿射和度量性质</h2><p>我们回到射影矫正的例子(例2.12(p9)), 它的目的是消除平面的透视图像中的射影失真，使得原始平面的相似性质( 角度，长度比 )可以被测量. 在该例中，通过确认平面上四个参考点的位置( 共8个自由度 )，并显式地算出映射参考点到它们图像的变换，射影失真被完全消除. 事实上，它超定了该几何——射影变换仅比相似变换多4个自由度，因此，为确定度量性质仅需要指定4个自由度( 不是8 ). 在射影变换中，这4个自由度给出与几何对象相关联的“物理本质”：无穷远直线$\mathbf l_\infty$(2dof)和在$\mathbf l_\infty$上的两个<strong>虚圆点</strong>(2dof). 这种关联性用于此问题的推理通常比分解链(2.16)中具体矩阵的描述更直观，虽然它们是等价描述.</p><p>下文将证明一旦$\mathbf l_\infty$的像被指定，射影失真便可消除，而一旦虚圆点被指定，仿射失真也可消除. 然后，余下的只是相似失真.</p><h3 id="2-7-1-无穷远线"><a href="#2-7-1-无穷远线" class="headerlink" title="2.7.1    无穷远线"></a>2.7.1    无穷远线</h3><p>在射影变换下，理想点可以映射为有限点(2.15), 因而$\mathbf l_\infty$被映射为有限直线. 但如果是仿射变换，$\mathbf l_\infty$不会被映射为有限直线，即仍留在无穷远处. 显然，它可直接由直线的变换(2.6 - p10)推出：$$\mathbf l_\infty’=\mathrm H_\mathrm A^{-\intercal}\mathbf l_\infty= \begin{bmatrix} \mathrm A^{-\intercal} &amp;\mathbf 0 \\ -\mathbf t^\intercal\mathrm A^{-\intercal} &amp;\mathbf 1 \end{bmatrix}\begin{pmatrix} 0 \\ 0 \\ 1 \end{pmatrix}=\begin{pmatrix} 0 \\ 0 \\ 1 \end{pmatrix} =\mathbf l_\infty$$逆命题也是正确的，即仿射变换是保持$\mathbf l_\infty$不变的最一般的线性变换，并可证明如下. 我们要求一个无穷远点，例如$\mathbf x=(1,0,0)^\intercal$, 被映为一个无穷远点. 该要求就决定了$h_{31} =0$,同理可证$h_{32}=0$,所以该变换是仿射变换. 概括起来：</p><h5 id="结论2-17-在射影变换-mathrm-H-下，无穷远直线-mathbf-l-infty-为不动直线的充要条件是-mathrm-H-是仿射变换"><a href="#结论2-17-在射影变换-mathrm-H-下，无穷远直线-mathbf-l-infty-为不动直线的充要条件是-mathrm-H-是仿射变换" class="headerlink" title="结论2.17  在射影变换$\mathrm H$下，无穷远直线$\mathbf l_\infty$为不动直线的充要条件是$\mathrm H$是仿射变换."></a>结论2.17  在射影变换$\mathrm H$下，无穷远直线$\mathbf l_\infty$为不动直线的充要条件是$\mathrm H$是仿射变换.</h5><p>但是，在仿射变换下, $\mathbf l_\infty$不是点点不动的：(1.14)表明在仿射变换下$\mathbf l_\infty$的点( 理想点 )被映射为$\mathbf l_\infty$的点，但它不是原来的点，除非$\mathrm A(x_1, x_2)^\intercal=k(x_1, x_2)^\intercal$. 现在可以证明辨认$\mathbf l_\infty$就能恢复仿射性质(平行，面积比).</p><h3 id="2-7-2-由图像恢复仿射性质"><a href="#2-7-2-由图像恢复仿射性质" class="headerlink" title="2.7.2    由图像恢复仿射性质"></a>2.7.2    由图像恢复仿射性质</h3><p>在平面的像中，一旦无穷远直线的像得到辨认，就有可能对原平面进行仿射测量. 例如，如果两条直线的影像相交在$\mathbf l_\infty$的像上，则可认定这两条直线在原平面上平行. 这是因为在欧氏平面中平行线相交在$\mathbf l_\infty$上，又因射影变换保持交点不变，经射影变换之后直线仍然交于$\mathbf l_\infty$的像上. 类似地，一旦$\mathbf l_\infty$被辨认，直线上的长度比率便可由像平面上该直线上确定长度的三个点以及该直线与$\mathbf l_\infty$的交点( 它提供交比的第四点 )的交比来计算，等等.</p><p>但是，一个转弯不大却更适合于计算机算法的途径是直接把已辨认的$\mathbf l_\infty$变换到它的规范位置$\mathbf l_\infty=(0, 0, 1)^\intercal$. 把实现此变换的(射影)矩阵应用于图像中的每一点以达到对图像进行仿射矫正的目的，即变换之后，仿射测量可以直接在矫正过的图像中进行. 这个基本思想在图2.12中加以说明.</p><p><img src="/assets/blogImg/2.12.png" alt="image-2.12"></p><p><font size="2"><strong>图2.12  仿射矫正</strong>.  射影变换把$\mathbf l_\infty$从欧氏平面$\pi_1$的$(0, 0, 1)^\intercal$映射到平面$\pi_2$的有限直线$\mathbf l$. 如果构造一个射影变换把$\mathbf l$映射回$(0, 0, 1)^\intercal$,那么根据结论2.17从第一到第三张平面的变换必定是仿射变换. 因为$\mathbf l_\infty$的标准位置保持不变. 这意味着第一张平而的仿射性质可以从第三张平面上测量，即第三张平面是第一平面的仿射像.</font></p><p>如果无穷远直线的像是$\mathbf l=(l_1, l_2, l_3)^\intercal$，假定$l_3\neq0$,那么把$\mathbf l$映射回$\mathbf l_\infty=(0, 0, 1)^\intercal$的一个合适的射影点变换是$$\mathrm H=\mathrm H_\mathrm A\begin{bmatrix} 1&amp;0&amp;0 \\0&amp;1&amp;0\\l_1&amp;l_2&amp;l_3\end{bmatrix} \tag{2.18}$$其中$\mathrm H_\mathrm A$可取为任何仿射变换( $\mathrm H$的最后一行是$\mathbf l^\intercal$). 可以验证在直线变换(1.6 - p10)下, $\mathrm H^{-\intercal}(l_1, l_2, l_3)^\intercal=(0,0,1)^\intercal=\mathbf l_\infty$.</p><h5 id="例2-18-仿射矫正"><a href="#例2-18-仿射矫正" class="headerlink" title="例2.18  仿射矫正"></a>例2.18  仿射矫正</h5><p><img src="/assets/blogImg/2.13.png" alt="image-2.13"></p><p><font size="2"><strong>图2.13  通过消影线实现仿射矫正</strong>.  (a)中平面的消影线在(c)中用两组平行线的像的交点计算. 此后, 图像(a)经过射影形变生成仿射矫正图像(b). 被仿射矫正的图像中平行线的像现在平行的. 但是, 夹角不再是它们在世界平面上的直角, 因为它们被仿射失真了. 同时参见图2.17.</font></p><p>在平面的透视图像中，世界平面上的无穷远直线被影像为该平面的消影线. 第7章中将对它作更详细的讨论. 如图2.13所示，消影线$\mathbf l$可以由平行线的影像的交点来计算. 然后用射影形变(2.18)作用于图像平面，使$\mathbf l$映射到它的规范位置$\mathbf l_\infty =(0, 0, 1)^\intercal$，从而达到图像仿射矫正的目的.</p><p>该例表明仿射性质可以通过指定一条直线(2dof)来恢复. 这等价于仅仅指定变换分解链(2.16)中的射影成分. 相反，如果已知仿射属性，则可以使用这些属性来确定无穷远点和无穷远线。以下示例说明了这一点。</p><h5 id="例2-19-从长度比计算消影点"><a href="#例2-19-从长度比计算消影点" class="headerlink" title="例2.19  从长度比计算消影点"></a>例2.19  从长度比计算消影点</h5><p>给定一条直线上有已知长度比的两个线段，该直线上的无穷远点便可以确定. 典型的情况是在像直线上的三个点$\mathbf a’, \mathbf b’, \mathbf c’$已被辨认. 假定$\mathbf a, \mathbf b, \mathbf c$是世界直线上对应的共线点，且长度比$d(\mathbf a, \mathbf b):d(\mathbf b, \mathbf c)=a:b$已知( 这里$d(\mathbf x, \mathbf y)$是点$\mathbf x$和$\mathbf y$之间的欧氏距离 ). 有可能利用交比找到消影点. 其过程如下：</p><ol><li>在图像中量出距离比$d(\mathbf a’, \mathbf b’):d(\mathbf b’, \mathbf c’)=a’:b’$.</li><li>在直线$&lt;\mathbf a, \mathbf b, \mathbf c&gt;$上建立坐标系，使点$\mathbf a, \mathbf b, \mathbf c$的坐标分别为$0, a, a+b$. 为计算方便,把这些点表示为齐次2维矢量$(0, 1)^\intercal$, $(a, 1)^\intercal$和$(a+b, 1)^\intercal$. 类似地，令$\mathbf a’, \mathbf b’, \mathbf c’$的坐标为$0, a’, a’+b’$，并且它们同样可表示为齐次矢量.</li><li>相对于这些坐标系，计算使$\mathbf a \mapsto \mathbf a’, \mathbf b \mapsto \mathbf b’, \mathbf c \mapsto \mathbf c’$的1D射影变换$\mathrm H_{2\times2}$.</li><li>在变换$\mathrm H_{2\times2}$下无穷远点的像( 坐标为$(1, 0)^\intercal$ )是直线$&lt;\mathbf a’, \mathbf b’, \mathbf c’&gt;$的消影点. </li></ol><p>用这种方式计算消影点的例子在图2.14中给出.</p><p><img src="/assets/blogImg/2.14.png" alt="image-2.14"></p><p><font size="2">图2.14  用直线上等距比来确定无穷远点的两个例子. 被采用的线段用细和粗的白线（以点界定）标记.这种作图方法确定了平而的消影线. 把它与图2.13c作比较.</font></p><h5 id="例2-20-由长度比作消影点的几何作图"><a href="#例2-20-由长度比作消影点的几何作图" class="headerlink" title="例2.20  由长度比作消影点的几何作图"></a>例2.20  由长度比作消影点的几何作图</h5><p>图2.14中给出的消影点也可以用纯几何作图的方法得到，步骤如下：</p><ol><li>给定：图像中三共线点$\mathbf a’, \mathbf b’, \mathbf c’$，它们与线段比是$a:b$的世界共线点对应.</li><li>过$\mathbf a’$画任意直线$\mathbf l$(不与直线$\mathbf a’\mathbf c’$重叠)并标注点$\mathbf a = \mathbf a’, \mathbf b, \mathbf c$使线段$&lt;\mathbf a\mathbf b&gt;, &lt;\mathbf b\mathbf c&gt;$的长度比为$a:b$.</li><li>连接$\mathbf b\mathbf b’$和$\mathbf c\mathbf c’$,它们交于$\mathbf o$.</li><li>过$\mathbf o$作平行$\mathbf l$的直线交直线$\mathbf a’\mathbf c’$于消影点$\mathbf v’$.</li></ol><p>该作图过程在图2.15中说明.</p><p><img src="/assets/blogImg/2.15.png" alt="image-2.15"></p><p><font size="2">图2.15  已知长度比，求一直线上无穷远点的像的几何作图法. 细节在正文中给出.</font></p><h3 id="2-7-3-虚圆点及其对偶"><a href="#2-7-3-虚圆点及其对偶" class="headerlink" title="2.7.3  虚圆点及其对偶"></a>2.7.3  虚圆点及其对偶</h3><p>在相似变换下，$\mathbf l_\infty$上有两个不动点. 它们是<strong>虚圆点</strong>(也称<strong>绝对点</strong>)$\mathbf I, \mathbf J$,其标准坐标是$$\mathbf I=\begin{pmatrix} 1\\ i \\0 \end{pmatrix} \qquad \mathbf J= \begin{pmatrix} 1 \\ -i \\ 0 \end{pmatrix}$$这一对虚圆点是复共轭理想点. 它们在保向相似变换下不变:$$\begin{aligned} \mathbf I’ &amp;= \mathrm H_\mathrm S \mathbf I\\ &amp;= \begin{bmatrix} s\cos\theta &amp; -s\sin\theta &amp; t_x \\ s\sin\theta &amp; s\cos\theta &amp; t_y \\ 0&amp;0&amp;1 \end{bmatrix} \begin{pmatrix} 1\\ i \\0 \end{pmatrix}\\ &amp;= se^{-i\theta} \begin{pmatrix} 1\\ i \\0 \end{pmatrix}=\mathbf I \end{aligned}$$</p><p>类似地，可以给出$\mathbf J$的证明. 一个反射变换使$\mathbf I$和$\mathbf J$交换. 逆命题也成立，即如果虚圆点在一个线性变换下不动，那么该线性变换必是相似变换，其证明留作练习. 槪括起来有：</p><h5 id="结论2-20-在射影变换-mathrm-H-下-虚圆点-mathbf-I-和-mathbf-J-为不动点的充要条件是-mathrm-H-是相似变换"><a href="#结论2-20-在射影变换-mathrm-H-下-虚圆点-mathbf-I-和-mathbf-J-为不动点的充要条件是-mathrm-H-是相似变换" class="headerlink" title="结论2.20. 在射影变换$\mathrm H$下, 虚圆点$\mathbf I$和$\mathbf J$为不动点的充要条件是$\mathrm H$是相似变换."></a>结论2.20. 在射影变换$\mathrm H$下, 虚圆点$\mathbf I$和$\mathbf J$为不动点的充要条件是$\mathrm H$是相似变换.</h5><p>“虚圆点”的命名起源于每一圆周交$\mathbf l_\infty$于虚圆点. 为了证明这一点，由二次曲线方程(2.1-p6)开始. 在二次曲线为圆时有$a=c$且$b=0$. 则$$x_1^2+x_2^2+dx_1x_3+ex_2x_3+fx_3^2=0$$其中$a$取为1. 该二次曲线交$\mathbf l_\infty$于(理想)点$(x_3=0)$，即$$x_1^2+x_2^2=0$$解得，$\mathbf I=(1, i, 0)^\intercal, \mathbf J=(1, -i, 0)^\intercal$, 即任何圆都交$\mathbf l_\infty$于虚圆点. 在欧氏几何中我们知道一个圆由三点指定. 虚圆点引出另一种计算. 圆可以用由五个点定义的一般二次曲线的公式(2.4 - p6)来计算，它的五个点是三个点加上两个虚圆点. 节2.7.5将证明辨认虚圆点(等价地辨认它们的对偶，见下文)能够恢复相似性质（角度，长度比）. 代数上，虚圆点是把欧氏几何中两正交方向$(1, 0, 0)^\intercal, (0, 1, 0)^\intercal$合并到一个复共轭中，即$$\mathbf I=(1, 0, 0)^\intercal+i(0, 1, 0)^\intercal$$</p><p>因此，不足为奇，一旦虚圆点被辨认，正交性和其他的度量性质就可以被确定.</p><h4 id="与虚圆点对偶的二次曲线"><a href="#与虚圆点对偶的二次曲线" class="headerlink" title="与虚圆点对偶的二次曲线"></a>与虚圆点对偶的二次曲线</h4><p>二次曲线$$\mathrm C^*_\infty=\mathbf I\mathbf J^\intercal +\mathbf J\mathbf I^\intercal \tag{2.19}$$</p><p>与虚圆点对偶. $\mathrm C_\infty^*$是由这两个虚圆点构成的退化(秩为2)的线二次曲线(见节2.2.3). 在欧氏坐标系下写为$$\mathrm C_\infty^*=\begin{pmatrix} 1\\i\\0 \end{pmatrix}\begin{pmatrix} 1&amp;-i&amp;0 \end{pmatrix}+\begin{pmatrix} 1\\-i\\0 \end{pmatrix}\begin{pmatrix} 1&amp;i&amp;0 \end{pmatrix}\begin{bmatrix} 1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;0 \end{bmatrix}$$</p><p>类似于虚圆点的不动性质，二次曲线$\mathrm C_\infty^*$在相似变换下不变. 在某变换下，二次曲线的矩阵如果不变(相差一常数)，则称该二次曲线在此变换下不变. 因为$\mathrm C_\infty^*$是对偶二次曲线，它的变换遵循结论2.14(p11)$(\mathrm C^{*‘} = \mathrm H\mathrm C^* \mathrm H^\intercal)$,可以验证在点相似变换$\mathbf x’ = \mathrm H_\mathrm S\mathbf x$下，$$\mathrm C_\infty^{*‘} = \mathrm H_\mathrm S\mathrm C_\infty^* \mathrm H_\mathrm S^\intercal=\mathrm C_\infty^*$$其逆命题也正确，从而得到</p><h5 id="结论2-21-对偶二次曲线-mathrm-C-infty-在射影变换-mathrm-H-下不变的充要条件是-mathrm-H-是相似变换"><a href="#结论2-21-对偶二次曲线-mathrm-C-infty-在射影变换-mathrm-H-下不变的充要条件是-mathrm-H-是相似变换" class="headerlink" title="结论2.21  对偶二次曲线$\mathrm C_\infty^* $在射影变换$\mathrm H$下不变的充要条件是$\mathrm H$是相似变换."></a>结论2.21  对偶二次曲线$\mathrm C_\infty^* $在射影变换$\mathrm H$下不变的充要条件是$\mathrm H$是相似变换.</h5><p>在任何射影框架下, $\mathrm C_\infty^* $所具有的一些性质：</p><ol><li>$\mathrm C_\infty^* $有4自由度：$3\times3$齐次对称矩阵有5个自由度，但约束det $\mathrm C_\infty^* $ = 0减去一个自由度.</li><li>$\mathbf l_\infty$是$\mathrm C_\infty^* $的零矢量. 根据定义虚圆点在$\mathbf l_\infty$上，即$\mathbf I^\intercal \mathbf l_\infty=\mathbf J^\intercal\mathbf l_\infty=0$, 从而$$\mathrm C_\infty^* \mathbf l_\infty = (\mathbf I\mathbf J^\intercal + \mathbf J\mathbf I^\intercal)\mathbf l_\infty =\mathbf I(\mathbf J^\intercal \mathbf l_\infty) +\mathbf J(\mathbf I^\intercal \mathbf l_\infty) = 0$$</li></ol><h3 id="2-7-4-射影平面上的夹角"><a href="#2-7-4-射影平面上的夹角" class="headerlink" title="2.7.4    射影平面上的夹角"></a>2.7.4    射影平面上的夹角</h3><p>在欧氏几何中，两线间的夹角由它们法线的点乘来计算. 直线$\mathbf l=(l_1, l_2, l_3)^\intercal$和$\mathbf m=(m_1, m_2, m_3)^\intercal$的法线分别平行于$(l_1, l_2)^\intercal$和$(m_1, m_2)^\intercal$，其夹角为$$\cos\theta=\frac{l_1m_1+l_2m_2}{\sqrt{(l_1^2+l_2^2)(m_1^2+m_2^2)}} \tag{2.20}$$</p><p>平面经仿射或射影变换后，公式(2.20)不能被使用，问题出在$\mathbf l$和$\mathbf m$的头两个分量在射影变换下没有良定的变换性质( 它们不是张量 ), 但类似于(2.20)在射影变换下不变的公式为$$\cos\theta=\frac{\mathbf l^\intercal \mathrm C_\infty^* \mathbf m}{\sqrt{(\mathbf l^\intercal \mathrm C_\infty^* \mathbf l)(\mathbf m^\intercal \mathrm C_\infty^* \mathbf m)}} \tag{2.21}$$</p><p>其中$\mathrm C_\infty^* $是与虚圆点对偶的二次曲线. 不言而喻，在欧氏坐标系下，(2.21)被简化为(2.20).</p><p>在点变换$\mathbf x’ = \mathrm H_\mathrm S\mathbf x$下，采用直线(2.6 - p10)$(\mathbf l’ = \mathrm H^{-\intercal} \mathbf l)$和对偶二次曲线(2. 14(p11))$(\mathrm C^{*‘} = \mathrm H\mathrm C^* \mathrm H^\intercal)$的变换规则，可以证明(2.21)在射影变换下不变. 例如，分子变换为：$$\mathbf l^\intercal \mathrm C_\infty^* \mathbf m\mapsto \mathbf l^\intercal \mathrm H^{-1}\mathrm H\mathrm C_\infty^* \mathrm H^\intercal \mathrm H^{-\intercal}\mathbf m=\mathbf l^\intercal \mathrm C_\infty^* \mathbf m$$</p><p>同样可以证明齐次对象的缩放因子在分子和分母之间相消. 因此(2.21)的确在射影框架下不变. 所证明的结果概括为：</p><h5 id="结论2-22-—旦二次曲线-mathrm-C-infty-在射彩平面上被辨认，那么欧氏角可以用-2-21-来测置"><a href="#结论2-22-—旦二次曲线-mathrm-C-infty-在射彩平面上被辨认，那么欧氏角可以用-2-21-来测置" class="headerlink" title="结论2.22  —旦二次曲线$\mathrm C_\infty^*$在射彩平面上被辨认，那么欧氏角可以用(2.21)来测置."></a>结论2.22  —旦二次曲线$\mathrm C_\infty^*$在射彩平面上被辨认，那么欧氏角可以用(2.21)来测置.</h5><p>作为它的推论有</p><h5 id="结论2-23-如果-mathbf-l-intercal-mathrm-C-infty-mathbf-m-mathbf-0-则直线-mathbf-l-和-mathbf-m-正交"><a href="#结论2-23-如果-mathbf-l-intercal-mathrm-C-infty-mathbf-m-mathbf-0-则直线-mathbf-l-和-mathbf-m-正交" class="headerlink" title="结论2.23  如果$\mathbf l^\intercal \mathrm C_\infty^* \mathbf m=\mathbf 0$, 则直线$\mathbf l$和$\mathbf m$正交."></a>结论2.23  如果$\mathbf l^\intercal \mathrm C_\infty^* \mathbf m=\mathbf 0$, 则直线$\mathbf l$和$\mathbf m$正交.</h5><p>几何上，如果直线$\mathbf l$和$\mathbf m$满足$\mathbf l^\intercal \mathrm C_\infty^* \mathbf m=\mathbf 0$, 则称两直线相对于二次曲线$\mathrm C_\infty^*$共轭(见节2.8.1).</p><h4 id="长度比"><a href="#长度比" class="headerlink" title="长度比"></a>长度比</h4><p>一旦$\mathrm C_\infty^*$被辨认，长度比同样可以测量. 考察图2.16中顶点为$\bf a, b, c$的三角形. 按三角学的正弦定理，长度比$d(\mathbf b, \mathbf c):d(\mathbf a,\mathbf c)=\sin\alpha : \sin\beta$,其中$d(\mathbf x, \mathbf y)$表示点$\mathbf x, \mathbf y$的欧氏距离. 在$\mathrm C_\infty^*$已被辨认的射影框架下，按(2.21)，$\cos\alpha, \cos\beta$可由$\mathbf l’ = \mathbf a’\times \mathbf b’, \mathbf m’ =\mathbf c’\times \mathbf a’$和$\mathbf n’ =\mathbf b’\times \mathbf c’$计算出来. 因此$\sin\alpha, \sin\beta$从而比率$d(\mathbf a, \mathbf b):d(\mathbf c,\mathbf a)$可由射影映射后的点来确定.</p><p><img src="/assets/blogImg/2.16.png" alt="image-2.16"></p><p><font size="2"><strong>图2.16  长度比</strong>. 一旦$\mathrm C_\infty^*$被辨认，欧氏长度比$d(\mathbf b, \mathbf c):d(\mathbf a,\mathbf c)$可以由射影失真的图形中测量出来. 详见正文.</font></p><h3 id="2-7-5-由图像恢复度量性质"><a href="#2-7-5-由图像恢复度量性质" class="headerlink" title="2.7.5    由图像恢复度量性质"></a>2.7.5    由图像恢复度量性质</h3><p>用完全类似于节2.7.2和图2.12中通过辨认$\mathbf l_\infty$来恢复仿射性质的途径，把虚圆点变换到它们的标准位置, 就可以由平面的图像恢复度量性质. 假定在图像上的虚圆点已被辨认，并且图像已用射影变换H矫正使被影像的虚圆点映回到它们在$\mathbf l_\infty$上的标准位置$((1, ±i, 0)^\intercal)$. 由结论2.20可知，世界平面和被矫正的图像之间的变换是相似变换，因为它是保持虚圆点不变的射影变换.</p><h4 id="用-mathrm-C-infty-进行度量矫正"><a href="#用-mathrm-C-infty-进行度量矫正" class="headerlink" title="用$\mathrm C_\infty^*$进行度量矫正"></a>用$\mathrm C_\infty^*$进行度量矫正</h4><p>对偶二次曲线$\mathrm C_\infty^*$几乎包含了实现度量矫正所需的全部信息. 它能确定射影变换中的仿射和射影成分，而只留下相似变换的失真. 这一点可以由它在射影下的变换得到证明. 如果点变换是$\mathbf x’ = \mathrm H\mathbf x$, 其中$\bf x$是欧氏坐标而$\mathbf x’$是射影坐标，$\mathrm C_\infty^*$按结论2.14(p11)$(\mathrm C^{*‘} = \mathrm H\mathrm C^* \mathrm H^\intercal)$进行变换. 由$\rm H$的分解链(2.16 - p15)可推出：$$\begin{aligned} \mathrm C_\infty^{*‘}&amp;= (\rm H_PH_AH_S)C_\infty^*(H_PH_AH_S)^\intercal = (H_PH_A)(H_SC_\infty^*H_S^\intercal)(H_A^\intercal H_P^\intercal) \\ &amp;=\rm (H_PH_A)C_\infty^*(H_A^\intercal H_P^\intercal) \\ &amp;= \begin{bmatrix} \mathrm K\mathrm K^\intercal &amp;  \mathrm K\mathrm K^\intercal \mathbf v \\ \mathbf v^\intercal  \mathrm K\mathrm K^\intercal &amp; \mathbf v^\intercal  \mathrm K\mathrm K^\intercal \mathbf v\end{bmatrix} \end{aligned}\tag{2.23}$$ </p><p>显然射影成分($\bf v$)和仿射成分(K)可以直接由$\mathrm C_\infty^*$的像确定，但( 因为根据结论2.21，$\mathrm C_\infty^*$在相似变换下不变 )相似成分不能确定. 因而，</p><h5 id="结论2-24-在射影平面上，一旦-mathrm-C-infty-被辨认，那么射影失真可以矫正到相差一个相似变换"><a href="#结论2-24-在射影平面上，一旦-mathrm-C-infty-被辨认，那么射影失真可以矫正到相差一个相似变换" class="headerlink" title="结论2.24  在射影平面上，一旦$\mathrm C_\infty^*$被辨认，那么射影失真可以矫正到相差一个相似变换."></a>结论2.24  在射影平面上，一旦$\mathrm C_\infty^*$被辨认，那么射影失真可以矫正到相差一个相似变换.</h5><p>实际上，利用SVD(节A3.3(p408)), 可以直接从图像中已辨认的$\mathrm C_\infty^*$获得所需的矫正单应变换；先将$\mathrm C_\infty^{*‘}$的SVD写为$$\mathrm C_\infty^{*‘}=\rm U\begin{bmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\0&amp;0&amp;0 \end{bmatrix}U^\intercal$$</p><p>然后通过査对(2.22), 求得相差一个相似变换的矫正射影变换为$\rm H=U$.</p><p>下面两个例子给出$\mathrm C_\infty^{*}$可能在图像中被辨认，从而能获得度量矫正的典型情形.</p><h5 id="例2-25-度量矫正-I"><a href="#例2-25-度量矫正-I" class="headerlink" title="例2.25  度量矫正 I"></a>例2.25  度量矫正 I</h5><p>假定一幅图像已经仿射矫正( 如上文例2.18 )，那么为了确定度量矫正，我们需要两个约束以便能够确定虚圆点的两个自由度. 这两个约束可以由世界平面上两个直角的影像来获得,</p><p>假设已经仿射矫正的图像中的直线$\bf l’$和$\bf m’$与世界平面上的一对垂直线$\bf l$和$\bf m$对应. 由结论2.23得$\mathbf l’^\intercal \mathrm C_\infty^{*‘} \mathbf m’=\mathbf 0$, 并用(2.22)且让$\bf v = 0$得$$(l_1’\quad l_2’ \quad l_3’)\begin{bmatrix} \mathrm K\mathrm K^\intercal &amp; \mathbf 0 \\ \mathbf 0^\intercal  &amp; 0\end{bmatrix}\begin{pmatrix} m_1’\\m_2’\\m_3’ \end{pmatrix}=0$$</p><p>它是关于$2\times2$矩阵$\rm S=KK^\intercal$的线性约束. 矩阵$\rm S=KK^\intercal$是对称矩阵并有三个独立元素，因而有两个自由度(因为全局的尺度因子无关紧要). 该正交条件约减为方程$(l_1’, l_2’)\mathrm S(m_1’, m_2’)^\intercal = 0$.并可重写为：$$(l_1’m_1’, l_1’m_2’+l_2’m_1’, l_2’m_2’)\mathbf s=0$$</p><p>其中$\mathbf s = (s_{11}, s_{12}, s_{22})^\intercal$是$\rm S$的3维矢量形式. 两个这样的正交直线对就能提供两个约束，并可以联合起来给出以$\bf s$为零矢量的$2\times3$矩阵. 这样，在相差一个尺度因子的情况下获得$\rm S$, 并进一步获得$\rm K$( 利用 Cholesky 分解法：节A3.2.1(p407)). 图2.17给出一个例子，它在已进行过仿射矫正的图2.13上用两组正交直线对进行度量矫正.</p><p>另外，度量矫正所需的两个约束可以通过一个圆的影像或两个已知的长度比来得到. 对于圆的情形，其像在仿射矫正过的图像中是椭圆，该椭圆和(已知)$\mathbf l_\infty$的交点直接确定被影像的虚圆点.</p><p>在下面的例子中，二次曲线$\mathrm C_\infty^{*}$可以用另一种方法直接在一幅透视图像中加以确定，而不用首先辨认$\mathbf l_\infty$</p><p><img src="/assets/blogImg/2.17.png" alt="image-2.17"></p><p><font size="2"><strong>图2.17  通过正交直线进行度量矫正 I</strong>. 求对仿射图像进行度量矫正的仿射变换可以从被影像的正交直线中计算出来. (a)在仿射矫正过的图像(图2.13)上，两(非平行)直线对被认定与世界平面上的正交直线相对应 (b)度量矫正图像. 注意在度量矫正过的图像中. 所有在世界中正交的直线是正交的，世界正方形的长宽比为1，而世界圆是圆的.</font></p><h5 id="例2-26-度量矫正-II"><a href="#例2-26-度量矫正-II" class="headerlink" title="例2.26  度量矫正 II"></a>例2.26  度量矫正 II</h5><p>这里我们从平面的原有透视图像( 不像例2.25中用仿射矫正过的图像 )入手. 假定直线$\bf l$和$\bf m$是世界平面上两正交直线的图像；则按结论2.23, $\mathbf l^\intercal \mathrm C_\infty^* \mathbf m=\mathbf 0$, 然后用与(1.4 - p6)(约束二次曲线使之过一点)类似的方式，提供关于$\mathrm C_\infty^{*}$元素的一个线性约束，即$$(l_1m_1, (l_1m_2+l_2m_1)/2, l_2m_2, (l_1m_3+l_3m_1)/2, (l_2m_3+l_3m_2)/2, l_3m_3)\mathbf c=0$$</p><p>其中$\mathbf c=(a, b, c, d, e, f)^\intercal$是$\mathrm C_\infty^{*}$的二次曲线矩阵(2.3 - p6)的6维矢量形式. 五个这样的约朿联合起来，便形成一个$5\times6$矩阵，使得$\bf c$和$\mathrm C_\infty^{*}$作为其零矢量而求得. 它证明$\mathrm C_\infty^{*}$可以由世界平面上五个正交的直线对的图像线性地加以确定. 图2.18给出以这种直线对约束进行度量矫正的一个例子.</p><p><img src="/assets/blogImg/2.18.png" alt="image-2.18"></p><p><font size="2"><strong>图2.18  通过正交直线进行度量矫正 II</strong>. (a)二次曲线$\mathrm C_\infty^{*}$用图中显示的五个正交直线对在透视图像平面(建筑物的前墙)上被确定. 二次曲线$\mathrm C_\infty^{*}$确定虚圖点，并等价于确定了度量矫正图像所需的射影变换. (b)图(a)与图2.4(p10)是同一个透视图像，在那里图像的透视失真是通过确定四个图像点的世界位置来消除的.</font></p><h4 id="分层法"><a href="#分层法" class="headerlink" title="分层法"></a>分层法</h4><p>注息：在例2.26中，仿射和射影失真通过确定$\mathrm C_\infty^{*}$一次性给予解决. 而前面的例2.25则先消除射影失真，然后消除仿射失真. 这种两步法称为分层法. 类似的方式适用于3D情况，并用于第9章的3D重构和第18章的自|标定，它们由3D射影重构获得度量重构.</p><h2 id="2-8-二次曲线的其他性质"><a href="#2-8-二次曲线的其他性质" class="headerlink" title="2.8  二次曲线的其他性质"></a>2.8  二次曲线的其他性质</h2><p>现在介绍点、线和二次曲线之间的一种被称为<strong>配极</strong>的重要几何关系. 这种（正交性表示的）关系的应用将在第七章中给出.</p><h3 id="2-8-1-极点-极线关系"><a href="#2-8-1-极点-极线关系" class="headerlink" title="2.8.1  极点 - 极线关系"></a>2.8.1  极点 - 极线关系</h3><p>点$\bf x$和二次曲线C定义一条直线$\mathbf l=\mathrm C\mathbf x$. $\bf l$称为$\bf x$关于C的极线，而点$\bf x$称为$\bf l$关于C的极点.</p><ul><li><strong>点$\bf x$关于二次曲线C的极线$\mathbf l=\mathrm C\mathbf x$与C交于两点. C的过这两点的两条切线相交于$\bf x$.</strong></li></ul><p>这个关系在图2.19中给予说明.</p><p><img src="/assets/blogImg/2.19.png" alt="image-2.19"></p><p><font size="2"><strong>图2.19  极点一极线关系</strong>. 直线$\mathbf l=\mathrm C\mathbf x$足点$\bf x$关于二次曲线C的极线，而点$\mathbf x=\mathrm C^{-1}\mathbf l$是$\bf l$关于$\rm C$的极点. $\bf x$的极线与二次曲线的交点是$\bf x$到二次曲线的切线的切点. 如果$\bf y$在$\bf l$上，则$\mathbf y^\intercal\mathbf l=\mathbf y^\intercal \mathrm C\mathbf x = 0$. 满足$\mathbf y^\intercal \mathrm C\mathbf x = 0$的点$\bf x$和$\bf y$共轭.</font></p><p><strong>证明</strong>  考察C上的一点$\bf y$. C的过$\bf y$的切线是$\mathrm C\mathbf y$. 若满足$\mathbf x^\intercal \mathrm C\mathbf y = 0$, 则$\bf x$就在此切线上. 利用C的对称性，条件$\mathbf x^\intercal \mathrm C\mathbf y=(\mathrm C\mathbf x)^\intercal\mathbf y = 0$表明点$\bf y$在极线$\mathrm C\mathbf x$上. 因此，极线$\mathrm C\mathbf x$与二次曲线交于$\bf y$, $\bf x$在过$\bf y$的切线上.</p><p>在$\bf x$趋近二次曲线的过程中，两切线变得越来越接近共线，且它们与二次曲线上的接触点也变得越来越靠近. 在极限位置时, $\bf x$在C上，它的极线与C有二阶接触点$\bf x$，于是我们得到：</p><ul><li><strong>如果点$\bf x$在C上，则它的极线就是二次曲线过$\bf x$点的切线</strong>.</li></ul><p>见结论2.7(p7).</p><p><strong>例2.27</strong>  半径为$r$，中心位于$x$轴上的点$x = a$处的圆的方程为$(x-a)^2+y^2=r^2$, 并用二次曲线矩阵表示为$$\mathrm C=\begin{bmatrix} 1&amp;0&amp;-a\\0&amp;1&amp;0\\-a&amp;0&amp;a^2-r^2 \end{bmatrix}$$</p><p>原点的极线由$\mathbf l = \mathrm C(0, 0, 1)^\intercal =(-a, 0, a^2-r^2)^\intercal$给定. 这是在$x = (a^2-r^2)/a$处的竖直线. 如果$r =a$, 原点在圆周上. 在这种情况下，其极线是$y-$轴并与圆周相切.</p><p>显然，二次曲线诱发了$\mathbb P^2$中点与直线之间的一个映射. 这个映射具有射影结构，因为它仅仅涉及相交和相切这两种在射影变换下不变的性质. 点与直线之间的射影变换称为<strong>对射</strong>（不幸的是此名字还有许多别的用处）.</p><h4 id="定义2-28-对射"><a href="#定义2-28-对射" class="headerlink" title="定义2.28  对射"></a>定义2.28  对射</h4><p>对射是$\mathbb P^2$点到$\mathbb P^2$线的可逆映射. 并用一个$3\times3$非奇异矩阵$\rm A$衣示为$\mathbf l= \mathrm A\mathbf x$.</p><p>对射提供了点与直线关系对偶化的一种系统方法. 对射不要求一定要用对称矩阵表示，但因为讨论二次曲线，在这里我们只限于考虑对称的对射.</p><ul><li><strong>共轭点  如果点$\mathbf y$在极线$\mathbf l=\mathrm C\mathbf x$上，则$\mathbf y^\intercal \mathbf l= \mathbf y^\intercal \mathrm C\mathbf x = 0$. 满足$\mathbf y^\intercal \mathrm C\mathbf x = 0$的任何两点$\bf x$, $\bf y$称为关于二次曲线C共轭</strong>.</li></ul><p>共轭关系是对称的：</p><ul><li><strong>如果$\bf x$在$\bf y$的极线上，那么$\bf y$也在$\bf x$的极线上.</strong></li></ul><p>这一点很简单，因为二次曲线矩阵是对称的——如果$\mathbf x^\intercal \mathrm C\mathbf y = 0$, 则$\bf x$在$\bf y$的极线上，而且如果$\mathbf y^\intercal \mathrm C\mathbf x = 0$, 则$\bf y$在$\bf x$的极线上. 因为$\mathbf x^\intercal \mathrm C\mathbf y = \mathbf y^\intercal \mathrm C\mathbf x$，如果其中一边为零，则另一边也为零. 同时，如果$\mathbf l^\intercal \mathrm C^* \mathbf m = 0$, 则存在一个关于直线$\bf l$和$\bf m$的对偶共轭关系.</p><h3 id="2-8-2-二次曲线的分类"><a href="#2-8-2-二次曲线的分类" class="headerlink" title="2.8.2    二次曲线的分类"></a>2.8.2    二次曲线的分类</h3><p>本节介绍二次曲线的射影和仿射分类.</p><h4 id="二次曲线的射影标准形式"><a href="#二次曲线的射影标准形式" class="headerlink" title="二次曲线的射影标准形式"></a>二次曲线的射影标准形式</h4><p>因为C是对称矩阵，所以有实特征值并可分解为乘积$\rm C=U^\intercal DU$ (见节A3.2(p406))，其中U是正交矩阵，而D是对角矩阵. 以射影变换U作用于二次曲线C,则C被变换成另一条二次曲线$\rm C’ = U^{-\intercal}CU^{-1} = U^{-\intercal}U^\intercal DUU^{-1}=D$. 这表明任何二次曲线都射影等价于一个由对角矩阵表示的二次曲线. 令$\mathrm D = \mathrm d\mathrm i\mathrm a\mathrm g(\varepsilon_1d_1, \varepsilon_2d_2, \varepsilon_3d_3)$其中$\varepsilon_i=±1$或0且$d_i&gt;0$.则D可以写为，$$\mathrm D = \mathrm d\mathrm i\mathrm a\mathrm g(s_1, s_2, s_3)^\intercal \mathrm d\mathrm i\mathrm a\mathrm g(\varepsilon_1, \varepsilon_2, \varepsilon_3)\mathrm d\mathrm i\mathrm a\mathrm g(s_1, s_2, s_3)$$</p><p>其中$s_i^2=d_i$. 注意$\mathrm d\mathrm i\mathrm a\mathrm g(s_1, s_2, s_3)^\intercal= \mathrm d\mathrm i\mathrm a\mathrm g(s_1, s_2, s_3)$. 现在用变换$\mathrm d\mathrm i\mathrm a\mathrm g(s_1, s_2, s_3)$再进行一次变换，二次曲线D被变为具有矩阵$\mathrm d\mathrm i\mathrm a\mathrm g(\varepsilon_1, \varepsilon_2, \varepsilon_3)$的二次曲线，其中$\varepsilon_i=\pm1$或0.</p><table><thead><tr><th align="center">对角线</th><th align="center">方程</th><th align="center">二次曲线类型</th></tr></thead><tbody><tr><td align="center">(1.1.1)</td><td align="center">$x^2+y^2+w^2=0$</td><td align="center">假二次曲线——无实点</td></tr><tr><td align="center">(1.1.-1)</td><td align="center">$x^2+y^2-w^2=0$</td><td align="center">圆</td></tr><tr><td align="center">(1.1.0)</td><td align="center">$x^2+y^2=0$</td><td align="center">单个实点$(0, 0, 1)^\intercal$</td></tr><tr><td align="center">(1.-1.0)</td><td align="center">$x^2-y^2=0$</td><td align="center">两条直线$x=\pm y$</td></tr><tr><td align="center">(1,0.0)</td><td align="center">$x^2 = 0$</td><td align="center">单条直线$x = 0$计两次</td></tr></tbody></table><p><font size="2"><strong>表2.2  点二次曲线的射影分类</strong>.  任何平面二次曲线都射影等价于表中给出的一种类型. 对某$i$，有$\varepsilon_i=0$的那些二次曲线是退化的二次曲线，它们可以用秩小于3的矩阵表示. 本表的二次曲线类型栏仅介绍二次曲线的实点——例如记为复二次曲线时$x^2 + y^2 =0$由一对直线$x= ±iy$组成.</font></p><p>可以用置换矩阵进一步变换，以保证值$\varepsilon_i = 1$出现在值$\varepsilon_i = -1$之前而后者又在值$\varepsilon_i=0$之前.最后如果有必要，可以乘以-1以保证+1至少和-1一样多. 现在可以列举各种类型的二次曲线，并在表2.2中给出.</p><h4 id="二次曲线的仿射分类"><a href="#二次曲线的仿射分类" class="headerlink" title="二次曲线的仿射分类"></a>二次曲线的仿射分类</h4><p>众所周知，在欧氏几何中，(非退化或真)二次曲线可以分为双曲线、椭圆和抛物线. 如上文所示，在射影几何中这三种类型的二次曲线却都射影等价于圆. 然而在仿射几何中，上述欧氏分类仍有效，因为它仅取决于$\mathbf l_\infty$与二次曲线的关系. 三种类型的二次曲线与$\mathbf l_\infty$的关系在图2.20中给出了说明.</p><p><img src="/assets/blogImg/2.20.png" alt="image-2.20"></p><p><font size="2"><strong>图2.20  点二次曲线的仿射分类</strong>.  二次曲线是(a)椭圆，(b)抛物线，(c)双曲线；分别取决于它们与$\mathbf l_\infty$的关系：(a)无实交点、(b)相切(2点接触)、(c)有2个实交点. 在仿射变换下，$\mathbf l_\infty$是不动线而且交点保持不变. 因此，这种分类在仿射变换下不变.</font></p><h2 id="2-9-不动点与直线"><a href="#2-9-不动点与直线" class="headerlink" title="2.9  不动点与直线"></a>2.9  不动点与直线</h2><p>由$\mathbf l_\infty$和虚圆点的例子，我们已经知道点和直线在射影变换下可能是不动的. 本节将对该思想作更彻底地研究.</p><p>这里，我们把源平面和目标平面视为等同(一样)，这样可把点$\bf x$映射到点$\bf x’$的变换在同一坐标系中进行. 关键思想是变换的一个<strong>特征矢量</strong>对应一个<strong>不动点</strong>，因为对于特征值$\lambda$及其对应的特征矢量$\bf e$有$$\mathrm H\mathbf e=\lambda\mathbf e$$</p><p>而$\bf e$和$\lambda \mathbf e$表示同一点. 通常在计算机视觉应用中，特征矢量和特征值具有物理的或几何的重要意义.</p><p>一个$3\times3$矩阵有三个特征值，如果特征值互不相同，则一个平面射影变换最多有三个不动点. 因为在此情形中特征方程是三次方程，特征值及其对应的特征矢量中有一个或三个是实的. 类似的推导可以用于不动直线，它对应于$\mathrm H^\intercal$的特征矢量，因为直线的变换(2.6 - p10)为$\mathbf l’ = \mathrm H^{-\intercal} \mathbf l$.</p><p>不动点和不动直线之间的关系在图2.21中显示. 注意直线的不动是集合不动，不是点点不动，即该直线上的一点被映射到该直线上的另一点，这两点一般不相同. 这并不难理解：平面射影变换诱导直线上的一个1D射影变换. 1D射影变换以一个$2\times2$的齐次矩阵表示(节1.5). 对应于该$2\times2$矩阵的两个特征矢最，1D射影变换有两个不动点. 这些不动点也是2D射影变换的不动点.</p><p><img src="/assets/blogImg/2.21.png" alt="image-2.21"></p><p><font size="2"><strong>图2.21  平面射影变换的不动点和直线.</strong> 这里有三个不动点和过这三点的不动直线. 不动直线和不动点可能是复的. 从代数的角度来说，不动点是点变换($\mathbf x’ = \mathrm H\mathbf x$)的特征矢量$\mathbf e_i$, 而不动直线是线变换$(\mathbf l’ = \mathrm H^{-\intercal} \mathbf l)$的特征矢量. 注意，不动直线不是点点不动：在变换下，直线上的一点被映为其上的另一点，只有不动点才映为自身.</font></p><p>进一步的特殊性涉及重特征值的情况. 假定两个特征值(如$\lambda_2, \lambda_3$)相等，而对应于$\lambda_2=\lambda_3$存在两个不同的特征矢量$(\mathbf e_2, \mathbf e_3)$,那么包含特征矢量$\mathbf e_2、\mathbf e_3$的直线将是点点不动的, 即它是由不动点构成的直线. 假定$\mathbf x = \alpha\mathbf e_2+\beta \mathbf e_3$;则有$$\mathrm H\mathbf x=\lambda_2\alpha\mathbf e_2+\lambda_2\beta\mathbf e_3=\lambda _2\mathbf x$$</p><p>即过两退化特征矢量的直线上的点都映射为自己(仅仅相差一比例因子). 另一种可能是$\lambda_2=\lambda_3$，但只有一个对应的特征矢量. 在这种情况下，特征矢量的<strong>代数维数</strong>为二，而<strong>几何维数</strong>为一. 其不动点少了一个(2个而不是3个). 重特征值的各种情况将在附录5(p427)和p33的练习(8)中作进一步讨论.</p><p>我们现在来査看一下节2.4介绍的射影变换子群中的不动点和直线. 仿射变换以及比它更特殊的变换有两个特征矢量, 它们都是理想点$(x_3=0)$并且对应于左上角$2\times2$矩阵的特征矢量. 第三个特征矢量通常是有限矢量.</p><h4 id="欧氏矩阵"><a href="#欧氏矩阵" class="headerlink" title="欧氏矩阵"></a>欧氏矩阵</h4><p>两个不动理想点是虚圆点$\bf I,J$组成的复共轭对，相对应的特征值是${ e^{i\theta}, e^{-i\theta} }$, 这里$\theta$是旋转角. 对应于特征值1的第三个特征矢量，称为<strong>极点</strong>. 欧氏变换等价于绕该点转$\theta$角的纯旋转并且没有平移.</p><p>一种特殊的情况是纯平移(即$\theta$ = 0). 这时特征值三重退化. 无穷远线点点不动，且有一束过点$(t_x, t_y, 0)^\intercal$的不动直线，该点对应于平移方向. 因此平行于$\bf t$的直线是不动的. 这是约束透视变换的一个例子(见节A5.3(p430)).</p><h4 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h4><p>两个不动理想点仍是虚圆点. 特征值是${1, se^{i\theta}, se^{-i\theta}}$. 相似变换的作用可以理解为绕它的有限不动点的旋转和取$s$为因子的均匀缩放. 注意虚圆点的特征值仍然表征旋转角.</p><h4 id="仿射矩阵"><a href="#仿射矩阵" class="headerlink" title="仿射矩阵"></a>仿射矩阵</h4><p>两个不动理想点可以是实或复共轭的，但在任何一种情况下，过这些点的不动直线$\mathbf l_\infty=(0, 0, 1)^\intercal$是实的.</p><h2 id="2-10-结束语"><a href="#2-10-结束语" class="headerlink" title="2.10  结束语"></a>2.10  结束语</h2><h3 id="2-10-1-文献"><a href="#2-10-1-文献" class="headerlink" title="2.10.1    文献"></a>2.10.1    文献</h3><p>关于平面射影几何的一些浅显的介绍在Mundy和Zisserman[Mundy - 92]的附录中给出，它是为计算机视觉研究者而写的. 更正规的介绍在Semple和Kneebone[Semple-79]中给出，但[Springer - 64]更容易读懂.</p><p>关于由平面的图像恢复仿射和度量景物性质的工作有：Collins和Beveridge[Collins - 93]用消影线由卫星图像恢复仿射性质，而Liebowitz和Zisserman[Liebowitz - 98]利用平面的如直角一类的度量信息来恢复度量几何.</p><h3 id="2-10-2-注释与练习"><a href="#2-10-2-注释与练习" class="headerlink" title="2.10.2    注释与练习"></a>2.10.2    注释与练习</h3><h4 id="1-仿射变换"><a href="#1-仿射变换" class="headerlink" title="1. 仿射变换"></a>1. 仿射变换</h4><p>   (a) 证明仿射变换能把圆映射为椭圆，但不能把捕圆映射为双曲线或抛物线.</p><p>   (b) 证明在仿射变换下平行的两线段的长度比不变，而不平行的线段的长度比则 不是如此.</p><h4 id="2-射影变换"><a href="#2-射影变换" class="headerlink" title="2. 射影变换"></a>2. 射影变换</h4><p>   证明存在使过原点的单位圆不动(作为集合不动)的一种三参数簇的射影变换，即以原点为中心的单位圆被映射到以原点为中心的单位圆(提示，用结论2.13(p11)计算变换). 该簇的几何解释是什么？</p><h4 id="3-各向同性"><a href="#3-各向同性" class="headerlink" title="3. 各向同性"></a>3. 各向同性</h4><p>   证明两直线在相似变换下具有一个不变量: 两直线和两点在射影变换下具有一个不变量. 在这两种情况下，自由度的计算法则(结论2.16(p17))的等式情况不成立. 证明在这两种情况中，相应的变换不能完全被确定，虽然它能够部分被确定.</p><h4 id="4-不变量"><a href="#4-不变量" class="headerlink" title="4. 不变量"></a>4. 不变量</h4><p>   用点、直线和二次曲线的变换规则证明：</p><p>   (a) 两条直线$\bf l_1, \bf l_2$及不在其上的两点$\mathbf x_1, \mathbf x_2$有不变量$$I=\frac{(\mathbf l_1^\intercal \mathbf x_1)(\mathbf l_2^\intercal \mathbf x_2)}{(\mathbf l_1^\intercal \mathbf x_2)(\mathbf l_2^\intercal \mathbf x_1)}$$（见前一问题）</p><p>   (b) 对于二次曲线C和在一般位置上的两点$\bf x_1, x_2$有不变量：$$I=\frac{(\mathbf x_1^\intercal \mathrm C\mathbf x_2)^2}{(\mathbf x_1^\intercal \mathrm C\mathbf x_1)(\mathbf x_2^\intercal \mathrm C\mathbf x_2)}$$</p><p>   (c) 证明计算夹角的射影不变量表达式(2.21)等价于Laguerre关于虚圆点交比的射影不变量表达式(见[Springer-64]).</p><h4 id="5-交比"><a href="#5-交比" class="headerlink" title="5. 交比"></a>5. 交比</h4><p>   证明在直线的射影变换下，四共线点的交比不变(2.17 - p17). 提示：首先把直线上两点的变换写成$\overline{\mathbf x}_i’= \lambda_i\mathrm H_{2\times2}\overline{\mathbf x}_i$和$\overline{\mathbf x}_j’= \lambda_j\mathrm H_{2\times2}\overline{\mathbf x}_j$, 这里的等式不相差一个比例因子，然后由行列式性质证明$\left| \overline{\mathbf x}_i’\overline{\mathbf x}_j’ \right| =\lambda_1\lambda_2\mathrm d\mathrm e\mathrm t \;\mathrm H_{2\times2}\left| \overline{\mathbf x}_i\overline{\mathbf x}_j \right|$，并由此继续. 另一种推导方法在[Semple-79]中给出.</p><h4 id="6-配极"><a href="#6-配极" class="headerlink" title="6. 配极"></a>6. 配极</h4><p>   图2.19给出了椭圆<strong>外</strong>一点$\bf x$的极线的几何作图. 给出当点在椭圆内时极线的几何作图. 提示：选择过$\bf x$的任意直线. 该直线的极点是$\bf x$极线上的一点.</p><h4 id="7-对偶二次曲线"><a href="#7-对偶二次曲线" class="headerlink" title="7. 对偶二次曲线"></a>7. 对偶二次曲线</h4><p>   证明矩阵[$\bf l$]$_\times\mathrm C$[$\mathbf l$]$_\times$表示一个秩为2的对偶二次曲线，它由直线$\mathbf l$与(点)二次曲线C的两个交点组成.（记号[$\bf l]$$_\times$在(A3.4-p410)中定义）.</p><h4 id="8-不动点"><a href="#8-不动点" class="headerlink" title="8. 不动点"></a>8. 不动点</h4><p>   给出只有一个和两个不动点的2D单应变换的例子. 它们对应于几何维数小于代数维数的重特征值.</p><h4 id="9-特殊射影变换"><a href="#9-特殊射影变换" class="headerlink" title="9. 特殊射影变换"></a>9. 特殊射影变换</h4><p>   假定一个景物平面上的点由一条直线的反射相关联，例如具有双边对称的平面物体. 证明该平面透视图像的点由满足$\rm H^2 = I$的射影变换H相关联. 进一步证明在H下有一条不动点组成的直线，它对应于反射直线的影像，并且H有一个不在此直线上的特征矢量，它是该反射方向的消影点（H是一个平面调和透射，见节 A5.2(p427)）.</p><p>   现在，假定点由有限对称旋转相联系：例如在一个六边形螺栓头上的点. 证明在这种情况下$\rm H^n=I$，这里$n$是该对称旋转的阶(六边形为6)，H的特征值确定旋转角，而对应于实特征值的特征矢量是对称旋转中心的影像.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本篇大纲&quot;&gt;&lt;a href=&quot;#本篇大纲&quot; class=&quot;headerlink&quot; title=&quot;本篇大纲&quot;&gt;&lt;/a&gt;本篇大纲&lt;/h1&gt;&lt;p&gt;此篇的四章为本书后续章节将要用到的表示、术语和记号打基础，射影几何的概念和表示法是多视图几何分析的核心。例如，使用了齐次坐标就能用线性矩阵方程来表示非线性映射（如透视投影）；而且可以很自然地表示无穷远点，避免了取极限的麻烦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多视角几何第二版" scheme="//georgeju95.github.io/tags/%E5%A4%9A%E8%A7%86%E8%A7%92%E5%87%A0%E4%BD%95%E7%AC%AC%E4%BA%8C%E7%89%88/"/>
    
      <category term="翻译" scheme="//georgeju95.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="计算机视觉" scheme="//georgeju95.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉中的多视角几何——序 &amp; 前言</title>
    <link href="//georgeju95.github.io/2019/07/10/Multi-view-geometry-preface-and-foreword/"/>
    <id>//georgeju95.github.io/2019/07/10/Multi-view-geometry-preface-and-foreword/</id>
    <published>2019-07-10T02:30:00.000Z</published>
    <updated>2023-08-29T18:58:12.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>60年代，在人工智能领域的带头专家眼里，使计算机具有视觉功能充其量只是属于暑期学生设计的事。40 年以后这项任务仍然没有解决并且似乎还很艰难。称之为计算机视觉的整个领域本身已成为一门与数学和计算机科学都有很强联系的学科，同时它与物理、感知心理学和神经科学也有一定的联系。</p><a id="more"></a><p>​造成部分失败的一种可能的原因始研究者忽略了这样的事实:动物和人类的感知，特别是视觉感知比当初想像的要复杂得多。当然没有理由要求计算机视觉算法一定要模仿生物，但事实是：</p><ol><li>生物视觉工作的方式仍有许多未知的东西，因而难以在计算机上模拟。</li><li>企图忽略生物视觉而重建一种完全基于芯片的视觉(silicon-based vision)并没有像当初想像的那样成功。</li></ol><p>除了这些负面的评论外，计算机视觉方面的研究者在实践和理论两个方面都已经获得了某些显著的成功。</p><p>在实践方面，举一个例子说明，用计算机视觉技术引导汽车、卡车等交通工具在平坦的道路或崎岖的地形上行驶己成为可能，并且许多年前就在欧洲、英国和日本进行过演示。引导车辆需要相当复杂的实时分析三维动态景物的能力。今天，汽车制造商己慢慢地将其中的某些功能集成到他们的产品中去。</p><p>在理论方面，称之为几何计算机视觉的领域已经取得了一些显著的成就。其中包括：<mark>当从不同视角观察时，用对象形状和摄像机参数的函数表示对象外观的改变方式</mark>。如果不应用相当复杂的数学技术，这样的成就是不可能得到的，这些古老的和新颖的方法涵盖了几何学的多个领域。这本书着重阐述现实世界中对象的图像之间复杂而又美妙的几何关系。由于解释表象是科学的目标之一，对这些关系自身而言，它们对分析至关重要；由于这些关系的明确拓宽了应用范围，它们对分析也至关重要。</p><p>这本书的作者是两位几何计算机视觉领域的开拓者和专家。他们在具有挑战的领域取得了成功，即他们把理解基本几何概念必须的数学表达得浅显易懂，把他们以及全世界的其他学者获得的成果覆盖得很全面；分析了几何学和真实情况之间的相互作用关系，真实情况的图像测量必含有噪声；把许多理论的结果表达成算法的形式，从而使它们能够很容易地被转换成计算机代码，并且给出了许多真实的例子来解释概念，展示了理论的应用范围。</p><p>回到使计算机具有视觉功能的初衷，我们也许想知道这样的工作是否向正确的方向迈出了一步。我必须把该问题的答案留给本书的读者，并且我乐于这样说：任何一个打算用连接到计算机的摄像机构建系统的设计者都不会忽略这项工作，对定义什么意味着计算机具备视觉功能，这可能向该方向迈出了一步。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过去十多年里，计算机视觉在多视图几何的理解和建模方向已得到迅速发展，理论和实践已达到成熟的程度，10年前尚未解决并经常被认为无法解决的 一些问题现在已经有了漂亮的结果。这些任务和算法包括：</p><ul><li>给定两幅图像而不附带其他信息，计算图像之间的匹配、点和摄像机的三维位置，点产生这些匹配，摄像机获取这些图像。</li><li>给定三幅图像并不附带其他信息，类似地计算点和直线图像之间的匹配，以及这些点和线与摄像机的三维位置。</li><li>不需要标定物，计算双目装置（stereo rig）的极几何（epipolar geometry）以及三目装置（trinocular rig）的三视几何（trifocal geometry）。</li><li>由自然景物的图像序列，进行摄像机的内部标定计算（也就是在线标定）。</li></ul><p>这些算法的与众不同的特点是它们是未标定的一一不必要知道或不必首先计算摄像机的内参数（例如焦距）。</p><p>支撑这些算法的是对未标定多视几何的崭新且更完善的理论认识：关联参数数目，呈现在视图中的点线间约束，以及由对应图像重建摄像机和三维空间点。例如确定双目装置的极几何仅需指定7个参数，不需要摄像机标定，这些参数由相应的至少7个对应的像点确定。与此非标定的路线相反，10年前采用了预先标定的路线：每个摄像机必须首先用工程上仔细标定的并已知几何关系的物体的图像进行标定。这种标定需要为每个摄像机确定11个参数，然后由这样两组11个参数的数据计算极几何。</p><p>该例子说明未标定（射影）方法的重要性一一采用适宜的几何表达，明确了每个计算阶段需要的参数。这样避免了计算那些对最后结果没有影响的参数，并得到更简单的算法。此外，一个可能的误解值得纠正。在未标定体系中，实体（例如三维空间点的位置）通常被恢复到准确定义的歧义中，这种歧义并不表示点被糟糕地估计。</p><p>更现实地说，标定摄像机通常不可能一劳永逸，例如摄像机被移动了（在移动的车上）或内参数改变了（具有变焦的监控摄像机）。进一步说，在某些情况下标定信息并不能简单得到，想像如下情况：由视频序列计算摄像机的运动，或者从存档的电影片段中构建虚拟现实模型，其中运动和内标定信息都是未知的。</p><p>由于我们理论认识的发展，而且还因为从图像估计数学对象的进步，在多视几何取得成就已成为可能。第一个进步是关注超定系统中应当被最小化的误差一一不论它是代数的、几何的或是统计的；第二个提高是使用了鲁棒估计算法（例如RANSAC），使得估计不受数据中离群点的影响。同时，这些技术已经催生了强有力的搜索和匹配算法。</p><p>目前，我们可以认为许多重构问题已经解决，这些问题包括：</p><ol><li>从对应的像点（image point correspondence）估计多焦张量（multifocal tensor），特别是基本矩阵（fundamental matrix）和三焦张量（四焦张量还没有得到如此多的注意）。</li><li>从这些张量中提取摄像机矩阵，然后分别从双视图、三视图和四视图实现射影重建。</li></ol><p>已经取得了一些其他的重大成功，虽然可能还有更多的空间可以了解这些问题。例如：</p><ol><li>应用光束平差法（bundle adjustment）来解决更一般的重建问题。</li><li>给定摄像机矩阵的最小假设，进行度量（欧式）重构。</li><li>自动检测图像序列中的对应关系，并采用多焦张量关系消除离群点和误匹配。</li></ol><p>本书分为六个部分，且有七个简短的附录。每个部分都引入了一种新的几何关系：背景的单映矩阵（homography），单视图的摄像机矩阵，双视图的基础矩阵，三视图的三焦张量，以及四视图的四焦张量。在每篇中，用一章介绍了该几何关系及它的性质和应用，以及伴随一章描述从图像测量估计它的算法。估计算法包括从廉价简单的方法到最优的算法，这些最优算法目前认为是可用的最好算法。</p><p><strong>第0部分：背景</strong></p><p>这部分比其它部分更入门级。它介绍了2维空间和3维空间射影几何的中心思想（例如理想点和绝对圆锥曲线）;该几何可以如何来表示、利用和估计以及该几何如何与计算机视觉中的各种目标相关联，例如通过矫正平面图消除透视失真。</p><p><strong>第1部分：单视几何</strong></p><p>在此，定义了各种摄像，建立了三维空间到图像的透视射影模型，探讨了其内部结构（anatomy）。描述了使用传统标定物技术对它们进行估计，以及通过消失点（vanishing point）和消失线标定摄像机。</p><p><strong>第2部分：双视几何</strong></p><p>这部分描述了双摄像机的极几何，基于对应像点的射影重建，解决射影歧义的方法，最佳三角测量，基于平面的视图间转换。</p><p><strong>第3部分：三视几何</strong></p><p>在此，描述了三摄像机的三焦几何，包括：从双视图的一个对应点转换到第三点，对应线的类似转换；基于相应点和线的几何计算，摄像机矩阵的重建。</p><p><strong>第4部分：N视几何</strong></p><p>这部分有两个目的。首先，它将三视几何扩展到四视图（微小扩展）并描述适用于N视图的估计方法，例如：Tomasi和Kanade的因子化算法，用于从多幅图像同时计算结构和运动。其次，它涵盖了前几章所涉及的主题，通过强调它们的共性可以得到更全面和一致的理解。例如：推导了对应关系（correspondence）的多线性视图约束、自标定和消歧法。</p><p><strong>附录</strong></p><p>这部分描述了关于张量、统计学、参数估计、线性和矩阵代数、迭代估计、稀疏矩阵系统的解和特殊射影变换的更进一步的背景材料。</p><h2 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h2><p>这个新的简装版经过扩展，包含了从2000年7月原始版本之后的一些进展，例如：目前本书涵盖了在场景中平面可见的投影情形，闭式因子化的解的新发现，并将仿射因子化扩展到了非刚性场景。我们也扩展了单视几何（第8章）和三视几何（第15章）的论述，并增加了关于参数估计的附录。</p><p>本书中出现的图片可从<a href="http://www.robots.ox.ac.uk/~vgg/hzbook/index.html" target="_blank" rel="noopener">http://www.robots.ox.ac.uk/~vgg/hzbook/index.html</a>下载。该站点也包含了几个算法的Matlab代码，并列出了早期印刷版的勘误表。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;60年代，在人工智能领域的带头专家眼里，使计算机具有视觉功能充其量只是属于暑期学生设计的事。40 年以后这项任务仍然没有解决并且似乎还很艰难。称之为计算机视觉的整个领域本身已成为一门与数学和计算机科学都有很强联系的学科，同时它与物理、感知心理学和神经科学也有一定的联系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多视角几何第二版" scheme="//georgeju95.github.io/tags/%E5%A4%9A%E8%A7%86%E8%A7%92%E5%87%A0%E4%BD%95%E7%AC%AC%E4%BA%8C%E7%89%88/"/>
    
      <category term="翻译" scheme="//georgeju95.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="计算机视觉" scheme="//georgeju95.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉中的多视角几何：简介——多视角几何纵览(第1章)</title>
    <link href="//georgeju95.github.io/2019/07/03/Multi-view-geometry-overview/"/>
    <id>//georgeju95.github.io/2019/07/03/Multi-view-geometry-overview/</id>
    <published>2019-07-03T02:01:00.000Z</published>
    <updated>2023-08-29T18:58:12.352Z</updated>
    
    <content type="html"><![CDATA[<p>本章介绍了本书中涉及的主要思想。对这些主题进行了非正式的介绍。精确、明确的定义，细致的代数以及精心设计的估算算法的描述被推迟到本书的第2章和后续章节。在整个介绍中，我们通常不会给出到后面那些章节的明确指向。所涉及的材料可以使用索引或目录来定位。</p><a id="more"></a><h2 id="1-1-简介——无处不在的射影几何"><a href="#1-1-简介——无处不在的射影几何" class="headerlink" title="1.1 简介——无处不在的射影几何"></a>1.1 简介——无处不在的射影几何</h2><p>我们都熟悉射影变换。当我们看一张图片时，我们看到不是很正的正方形，不是很圆的圆圈。将这些平面物体映射到图片上的变换，就是射影变换的一个例子。</p><p>那么通过射影变换保留了哪些几何属性？当然，形状没有保留，因为圆圈可能显示为椭圆形。长度也没有保留，因为通过射影变换将圆的两个垂直半径拉伸了不同的量。角度、距离、距离比——这些都不会被保留，可能看起来通过射影变换保留了非常少的几何性质。但是有一个属性被保留下来了，那就是平直性（straightness）。事实证明，这是对映射的最一般的要求，并且我们可以将<mark>平面的射影变换定义为平面上点的任意保直线映射</mark>。</p><p>为了了解我们为什么需要射影几何，我们从熟悉的欧几里德几何开始。这是描述对象的角度和形状的几何学。欧几里德几何存在一个大麻烦——我们需要不断使用特例，推导该几何的某些基本概念——例如线的交叉。两条线（我们在这里考虑的是二维几何）几乎总是在一个点上相遇，但是有一些线不会这样——我们称之为平行线。一个常见的语言描述是说平行线在“无穷远处”相交。然而，这并不是完全令人信服的，并与另一常识矛盾，即在现实中并不存在“无穷远”，它只是一个简单的假设。我们可以通过加入平行线相交的无穷远点来增强欧几里德平面，并将它们称为<mark>“理想点”</mark>，以解决无穷远的难题。</p><p><mark>通过添加这些在无穷远点，熟悉的欧几里德空间被转换为一种新型的几何对象——射影空间</mark>。这是一种非常有用的思维方式，因为我们熟悉欧氏空间的属性，比如距离、角度、点、线和入射角（incidence）等概念。射影空间没有什么神秘之处——它只是欧几里德空间的延伸，两条线总是在一个点上相遇，尽管有时这个点是在神秘的无穷远处。</p><h5 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h5><p>欧几里德2维空间中的一个点由有序的实数对（x，y）表示。我们可以为这一对添加一个额外的坐标，给出一个三元组（x，y，1），我们声明它们代表相同的点。这似乎没有问题，因为我们可以通过添加或删除最后一个坐标，使该点的两个坐标表示可以相互转换。我们现在关注最重要的一步，为什么最后一个坐标是1——其它两个坐标并无此约束。坐标三元组（x，y，2）怎么样？在这里，我们做出一个定义并说（x，y，1）和（2x，2y，2）代表相同的点，而且对于任何非零值k，（kx，ky，k）也代表相同的点。形式上，点由坐标三元组的<strong>等价类</strong>（equivalence classes）表示，当两个三元组在它们相差一个公倍数时是等价的。这些被称为<mark>点的齐次坐标</mark>（homogeneous coordinate）。给定坐标三元组（kx，ky，k），我们可以通过除以k得到原始坐标得到（x，y）。</p><p>读者将观察到虽然（x，y，1）表示与坐标对（x，y）相同的点，但没有对应于三元组（x，y，0）的点。如果我们试图除以最后一个坐标，我们得到无限的点（x / 0，y / 0）。这就是在无限远处产生的点。它们是由最后一个坐标为零的齐次坐标表示的点。</p><p>一旦我们清楚在二维欧氏空间中如何做——通过齐次向量（homogeneous vector）表示点，将它推广到射影空间。很明显我们可以在任何维度上做同样的事情。通过齐次向量表示点，欧氏空间$\mathbb{R}^n$可拓展到射影空间$\mathbb{P}^n$。事实证明，二维射影空间中的无穷远点形成一条线，通常称为<strong>无穷远线</strong>（line at infinity）。它们在三维空间中形成了<strong>无穷远平面</strong>（plane at infinity）。</p><h5 id="匀质"><a href="#匀质" class="headerlink" title="匀质"></a>匀质</h5><p>在经典的欧几里德几何中，所有点都是相同的，没有区别。整个空间是匀质的。添加坐标时，似乎选择了一个点作为原点。但是，重要的是认识到选择特定的坐标系只是偶然。设定平面中不同的点为原点，我们也可得到坐标化该平面的不同方法。事实上，我们可认为是欧氏空间的坐标变换，其中坐标轴平移和旋转到了不同位置。我们可换种方式思考，这是<mark>空间自身变换和旋转到了不同位置</mark>。所得的操作称为<mark>欧氏变换</mark>。</p><p>一种更普遍形式的变换是对$\mathbb R^n$施加线性变换，然后是移动空间原点进行欧氏变换。我们<mark>可认为这是空间的移动、旋转，以及最后在不同方向可能按不同比例进行线性缩放</mark>。所得的变换称为<mark>仿射变换</mark>。</p><p>欧氏变换或仿射变换的结果是，无穷远点仍然在无穷远。通过这种变换，这些点以某种方式被保留，至少保持了集合。在欧氏几何或仿射几何的场景，它们在某些方面存在不同或例外。</p><p>从射影几何的角度来看，无穷点与其他点没有任何不同。就像欧几里德空间是均匀的一样，射影空间也是如此。在齐次坐标表示中无穷远点最后一个坐标为零，该性质无非是一种特殊的坐标系选择。通过类比欧氏变换或仿射变换，我们可以定义射影空间的<strong>射影变换</strong>（projective transformation）。矩阵乘以点的坐标，表示欧氏空间$\mathbb R^n$的线性变换。正如此，射影空间$\mathbb P^n$的射影变换是齐次坐标表示的点（$(n+1)$维向量）的映射，它采用非奇异矩阵（non-singular matrix）乘以坐标向量。在该映射下，无穷远点（最后一个坐标为零）映射到任意其它点。没有保持无穷远点。因此，射影空间$\mathbb P^n$的射影变换表示为齐次坐标的线性变换。$$ \mathbf X^\prime=\mathrm H_{(n+1)\times (n+1)}\mathbf X. $$</p><p>在计算机视觉问题中，通过将其扩展到三维（3D）射影空间，射影空间被用作表示真实三维世界的便利方式。类似地，图像通常由真实世界投影为二维形式构成，图像便于推广，视它们在二维射影空间。实际上，现实世界及其中的图像并不包含无穷远点，我们需要关注哪些是虚构的点，也就是图像中无穷远线和现实世界中无穷远平面。正因如此，虽然我们通常工作在射影空间，但我们仍意识到无穷远的线和平面有些特殊。这违背了纯粹射影几何的思想，但却使它对我们的实际问题有用。我们通常设法两全其美：同等对待射影空间中的所有点，当这适合我们时就这么做；单独处理空间中无穷远线和图像中无穷远平面，当这变得必要时就这么做。</p><h3 id="1-1-1-仿射几何和欧几里德几何"><a href="#1-1-1-仿射几何和欧几里德几何" class="headerlink" title="1.1.1 仿射几何和欧几里德几何"></a>1.1.1 仿射几何和欧几里德几何</h3><p>我们已清楚通过增加无穷远线（或平面），可以从欧几里德空间获得射影空间。我们现在考虑其逆过程。本讨论主要涉及二维和三维射影空间。</p><h5 id="仿射几何"><a href="#仿射几何" class="headerlink" title="仿射几何"></a>仿射几何</h5><p>我们将认为射影空间最初是匀质的，没有特定的坐标系是优选的。在这样的空间中，没有平行线的概念，因为平行线（或三维情况中的平面）会交于无穷远。然而，在射影空间中，没有哪些点在无穷远的概念——所有点都是相同的。我们认为平行性不是射影几何的概念。谈论它毫无意义。</p><p>为了使这样的概念有意义，我们需要选择一些特定的线，并确定这是无穷远线。这导致一种情况，尽管所有点都是相同的，但有些点比其他点更平等。因此，从一张白纸开始，并想象它延伸到无穷远处并形成射影空间$\mathbb P^2$。我们所看到的只是该空间的一小部分，这看起来很像普通的欧几里德平面。现在，让我们在纸上画一条直线，并声明这是无穷远线。接下来，我们绘制另外两条在此无穷远线上相交的线。由于他们交于无穷远线，我们将它们定义为平行。该情形与在无穷远平面看到的相似。想象一下在地球上非常平坦的地方拍摄的照片。平面中的无穷远点在图像中显示为地平线（horizon line）。诸如铁轨之类的线在图像中显示为与地平线处相交的线。位于地平线上方的图像中的点（天空的图像）显然与世界平面（world plane）上的点不对应。但是，如果我们考虑在摄像机后面向后延伸相应的射线，它会在摄像机后的一点与该平面相交。因此，图像中的点与世界平面中的点之间存在一对一的关系。世界平面中的无穷远点对应于图像中的真实地平线，并且世界平面中的平行线对应于交于地平线的线。从我们的观点来看，世界平面及其图像只是以另一种方式展示射影平面的几何，附带一条特殊的线。射影平面的几何加上一条特殊的线被称为<mark>仿射几何</mark>，将一个空间中的该特殊线映射到另一个空间中特殊线的任何射影变换称为<mark>仿射变换</mark>。</p><p>通过确定一条特殊的线为无穷远线，我们能够定义平面中直线的平行。然而，一旦我们能够定义平行性，某些其他概念也是有意义的。例如，我们可以确定平行线上两点之间的间隔相等。例如，如果A，B，C和D是点，并且线AB和CD是平行的，如果线AC和BD也是平行的，则我们说两个间隔AB和CD具有相等的长度。类似地，同一条线上两个间隔相等，若其平行线上存在另一个间隔与它们都相等。</p><h5 id="欧式几何"><a href="#欧式几何" class="headerlink" title="欧式几何"></a>欧式几何</h5><p>通过设置射影平面中的特殊线，我们获得了平行性的概念，以及基于它的仿射几何。仿射几何被视为射影几何的特例，我们从中挑出一条特定的线（或平面——根据维数决定）并将其称为无穷远线。接下来，我们转向欧几里德几何，并说明通过选取某些无穷远线或平面的特性，仿射几何变成了欧氏几何。在这样做的过程中，我们介绍了本书最重要的概念之一，即<mark>绝对圆锥曲线（absolute conic）</mark>。</p><p>我们首先考虑二维几何，并且从圆开始。请注意，<mark>圆不是仿射几何的概念</mark>，因为平面的任意伸缩，虽保持了无穷远线，但将圆变成了椭圆。因此，仿射几何不区分圆和椭圆。</p><p>然而，在欧几里德几何中，它们是截然不同的，并且具有重要的区别。从代数角度看，椭圆由二阶方程描述。正如期望，也是事实，最通常情况两个椭圆会交于四点。然而，几何上很显然，两个不同的圆无法交于两个以上的点。我们此处在代数上让两个二阶曲线相交，或者等价于求解两个二次方程。我们期待得到四个解。问题在于，圆有何特别，它们只交于两点。</p><p>这个问题的答案当然是存在另外两个解，这两个圆还交于另外两个复数（complex）点。<br>我们不必费多大劲就能找到这两点。</p><p>圆方程的齐次坐标$(x,y,w)$形式形如：$$(x-aw)^2+(y-bw)^2=r^2w^2$$</p><p>该方法用圆心表示圆，圆心用齐次坐标表示为$(x_0,y_0,w_0)^\top=(a,b,1)^\top$。可以很快验证点$(x,y,w)^\top=(1,\pm i,0)^\top$在这类圆上。重复一下这个有趣的事实，<u>每个圆都通过点</u>$(1,\pm i,0)^\top$，<u>因此它们存在于任意两个圆的交点</u>。由于它们最后的坐标为零，因此这两个点位于无穷远线上。由于显而易见的原因，它们被称为<mark>平面的虚圆环点（circular point）</mark><span id="虚圆环点"></span>。注意，尽管两个虚圆环点是复数形式的，但它们满足一对实方程：$x^2 + y^2 = 0$; $w = 0$。</p><p>这种视角赋予了我们可以如何定义欧氏几何的依据。通过首先选出一条无穷远线，然后是该线上的两个虚圆环点，从射影几何导出了欧氏几何。当然虚圆环点是复数点，但在大多数情况下我们并不担心这一点。现在，我们可以将<mark>圆形定义为通过两个虚圆环点的任意圆锥曲线</mark>（由二阶方程定义的曲线）。注意，在标准欧氏坐标系统，虚圆环点的坐标为$(1,\pm i,0)^\top$。通过将欧氏体系用于射影平面，那么，我们可以指定任意线和该线上的任意两（复数）点，作为无穷远线和虚圆环点。</p><p>作为应用这一观点的一个例子，我们注意到可以发现一般圆锥曲线经过平面上的五个任意点，因为通过计算一般二次方程$ax^2+by^2+\cdots +fw^2=0$的参数个数，可以清楚这一点。另一方面，只需三点确定一个圆。换一种方式认识该问题：一条圆锥曲线通过两个特殊的点（虚圆环点）和三个其它的点，因此如同任何其它圆锥曲线，它需要由五个点唯一确定。</p><p>通过挑出两个虚圆环点，人们可以获得全部熟悉的欧氏几何，这一点不足为奇。特别地，诸如角度和长度比等概念可以根据虚圆环点来定义。然而，这些概念最容易的是通过某个欧氏平面的坐标系统定义，这些将在接下来的章节中看到。</p><h5 id="三维欧式几何"><a href="#三维欧式几何" class="headerlink" title="三维欧式几何"></a>三维欧式几何</h5><p>通过确定无穷远线和一对虚圆环点，我们清楚了如何根据射影平面确定欧氏平面。同样的思想可用于三维几何。如同二维情况，可以仔细观察球体，考察它们如何相交。就像代数上认为的那样，也如同两个一般椭球（或其它的二次曲面）那样，两个球体交于一个圆，而非一般的四阶曲线。这一思路导致了新发现，在齐次坐标系$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$，<span id="绝对圆锥曲线"></span>所有球体与无穷远平面相交的曲线满足方程：$\mathrm X^2+\mathrm Y^2+\mathrm Z^2=0; \mathrm T=0$。这是位于无穷远平面上的二阶曲线（圆锥曲线），且仅由复数点构成。它称为<mark>绝对圆锥曲线</mark>。尤其鉴于它和摄像机标定相关，它是本书的关键几何实体之一，正如将在后文看到的那样。</p><p>以上方程定义的绝对圆锥曲线，只存在于欧氏坐标系统。挑选一个特殊的平面作为无穷远平面，并指定位于该平面的一条特殊的圆锥曲线作为绝对圆锥曲线，通常我们可以认为三维欧氏空间是从射影空间由此推导的。基于射影空间的坐标系统，可以对这些实体进行很普适的描述。</p><p>我们在此不会详细深入绝对圆锥曲线如何确定整个欧几里德三维几何。只会提供一个例子。<mark>空间中直线的垂直不是仿射几何中的合法概念，但是属于欧氏几何</mark>。<span id="线的垂直"></span>线的垂直可以用绝对圆锥曲线来定义，如下所述。延长两条线，直到它们与平面交于无穷远，我们得到的两点称为这两条线的方向点（direction）。线的垂直通过到绝对圆锥曲线的这两个方向点间的关系确定。<mark>如果两个方向点是关于绝对圆锥曲线的共轭点，则直线是垂直的</mark>（参见图3.8（p83）[图2.8 v1-p48]）。共轭点的几何和代数表示在2.8.1节（p58）[v1 p29]中定义。简而言之，如果绝对圆锥曲线由3×3对称矩阵$\mathrm\Omega_\infty$表示，并且方向点是$\mathbf d_1$和$\mathbf d_2$，当$\mathbf d_1^\top\mathrm\Omega_\infty\mathbf d_2=0$时，那么它们关于$\mathrm\Omega_\infty$共轭。更一般地说，在任意坐标系统，角度可根据绝对圆锥曲线定义，如（3.23-p82[v1 p48]）所述。</p><h2 id="1-2-摄像机的射影几何"><a href="#1-2-摄像机的射影几何" class="headerlink" title="1.2 摄像机的射影几何"></a>1.2 摄像机的射影几何</h2><p>本书的主要议题之一是成像过程，即三维世界的二维表征方式，以及我们可以根据图像中出现的内容推断出其3D结构。</p><p>从三维世界降为二维图像是一个射影过程（projection process），我们从中损失了一个维度。该过程通用的建模方法是中心射影（central projection）。在该射影，空间中的引出的一条射线，来自于三维世界中的点通过空间中一个固定的点，射影中心（centre of projection）。射线会交于空间中设定为像平面（image plane）的特定平面。射线和像平面的交点表示点的图像。若三维结构落在了平面上，就没有损失维度。</p><p>该模型符合简单的摄像机模型。从现实世界点发出的一束光线，穿过摄像机的透镜，投射到胶片或数字设备上，生成该点的图像。忽略聚焦和透镜厚度等的影响，合理的近似是所有的光线都通过单个点，透镜中心。</p><p>为了在成像过程应用射影几何，通常将现实世界建模为三维射影空间，等价于$\mathbb R^3$附带无穷远点。图像模型是类似的二维射影平面$\mathbb P^2$。中心射影不过是$\mathbb P^3$到$\mathbb P^2$的一个映射。如果我们考虑点记为齐次坐标$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$的形式，且射影中心是原点$(0,0,0,1)^\top$，那么我们看到，固定$\mathrm X$、$\mathrm Y$和$\mathrm Z$并改变$\rm T$所得的全部点$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)^\top$组成的集合，形成穿过射影中心点的一条射线，因而这些点都映射到相同的点。因此，$(\mathrm X,\mathrm Y,\mathrm Z,\mathrm T)$的最后坐标和点在哪里成像无关。像点（image point）事实上是$\mathbb P^2$中的点，齐次坐标为$(\mathrm X,\mathrm Y,\mathrm Z)$。因此，该映射可表示为三维齐次坐标的一个映射，记为$3\times 4$的矩阵$\mathrm P$，其块结构记为$\mathrm P=\left[\mathrm I_{3\times 3}\vert\mathbf 0_3\right]$，其中$\mathrm I_{3\times 3}$是$3\times 3$的单位矩阵，$\mathbf 0_3$是三维零向量。考察不同的射影中心，以及图像不同的射影坐标系，最一般的成像射影表示为任一秩3的$3\times 4$矩阵，它作用于$\mathbb P^3$中点的齐次坐标，将其映射到$\mathbb P^2$中的成像点。该<span id="摄像机矩阵"></span>矩阵$\mathrm P$称为<mark>摄像机矩阵</mark>。</p><p>总之，射影摄像机在空间中一个点上的操作，可利用线性的齐次坐标映射表示为：$$\begin{pmatrix}x \\ y \\ w\end{pmatrix}=\mathrm{P}_{3\times4}\begin{pmatrix}\mathrm{X} \\ \mathrm{Y} \\ \mathrm{Z} \\ \mathrm{T}\end{pmatrix}$$</p><p>此外，如果所有点都位于一个平面上（我们可以将其选择为平面Z = 0），那么线性映射将简化为$$\begin{pmatrix}x \\ y \\ w\end{pmatrix}=\mathrm{H}_{3\times3}\begin{pmatrix}\mathrm{X} \\ \mathrm{Y} \\ \mathrm{T}\end{pmatrix}$$</p><p>它是一种射影变换。</p><h5 id="摄像机视为点"><a href="#摄像机视为点" class="headerlink" title="摄像机视为点"></a>摄像机视为点</h5><p>中心射影把$\mathbb P^3$的点映射为$\mathbb P^2$的点，通过射影中心的射线上的所有点，投射在图像上的同一点。为了图像射影，可将沿此射线的所有点视为等价。我们可更进一步，并考虑用通过射影中心的射线表示像点。因此，所有像点的集合，与通过摄像机中心的射线集相同。若从$(0,0,0,1)^\top$通过点$(\mathrm X,\mathrm Y, \mathrm Z, \mathrm T)^\top$的射线我们用前三个坐标$(\mathrm X,\mathrm Y, \mathrm Z)^\top$表示，那么易知对任意常数$k$，射线$k(\mathrm X,\mathrm Y,\mathrm Z)^\top$表示同一射线。因此，射线本身用齐次坐标表示。它们实际上组成了一个二维的射线空间。射线自身的集合可视为图像空间$\mathbb P^2$的一种表示。如此表示图像，摄像机中心最重要，因为它唯一确定了构成图像的射线集。源自同一射影中心的不同图像，表示为不同的摄像机矩阵，但只展示了生成图像的射线集的不同坐标系。因此，空间中相同点得到的两张图像射影等价（projectively equivalent）。只有当我们着手测量图像中的点时，才需为图像指定一个特定的坐标系统。只有这样，才有必要确定一个特定的摄像机矩阵。简言之，目前我们忽略的模视场（modulo field-of-view），通过同一摄像机中心获取的所有图像等价——在没有关于三维点或摄像机中心位置的任何信息时，它们通过射影变换可互相转换。这些观点表示在图1.1中。</p><p><img src="/assets/blogImg/1.1.png" alt="image-1.1"><br><strong>Fig.1.1. 相机中心是必不可少的。</strong></p><ul><li>(a) 图像的构成：像点$\mathbf x_i$是由空间点$\mathbf X_i$经摄像机中心$\mathbf C$的射线与平面的交点。</li><li>(b) 当空间点共面时，存在一个真实世界与像平面之间的投影变换，$\mathbf x_i = \mathrm H_{3\times 3}\mathrm X_i$。</li><li>(c) 具有相同摄像机中心的所有图像，通过射影变换相联系，$\mathbf x_i^\prime=\mathrm H_{3\times 3}^\prime\mathbf x_i$。</li><li>比较(b)和(c)——两种情况都是通过穿越中心的射线平面间相互映射。</li><li>(b)是场景和像平面之间的映射，(c)是两个像平面之间的映射。(d)若改变摄像机中心，一般图像不再通过射影变换相关联，除非(e)所有空间点共面。</li></ul><h5 id="已标定摄像机"><a href="#已标定摄像机" class="headerlink" title="已标定摄像机"></a>已标定摄像机</h5><p>为了彻底弄清图像与现实世界的欧氏关系，有必要叙述它们相关的欧氏几何。如我们所见，通过设定$\mathbb P^3$中特定平面为无穷远平面，确定了三维世界的欧氏几何，并将该平面中特定的圆锥曲线$\mathrm\Omega$作为绝对圆锥曲线。对位于无穷远平面之外的摄像机，现实世界中的无穷远平面一一映射到了像平面。这就是为什么图像中任一点确定了空间中的一条射线，该射线与无穷远平面交于一点。因此，现实世界中的无穷远平面，不会告诉我们关于图像的任何新东西。绝对圆锥曲线，尽管是无穷远平面中的一条圆锥曲线，必投影为图像中的一条圆锥曲线。所得的图像曲线，称为<mark>绝对圆锥曲线的图像（Image of the Absolute Conic），或者IAC</mark>。<span id="IAC"></span>若已知IAC在图像中的位置，那么我们称摄像机<mark>已标定<mark>。</mark></mark></p><p>在标定的摄像机中，可以确定从图像中两点回射的两条射线间的夹角。我们已知，空间中两条线的夹角，由它们与无穷远平面相交的位置确定，与绝对圆锥曲线相关。在标定的摄像机中，无穷远平面和绝对圆锥曲线$\Omega_{\infty}$一一投影到了像平面和IAC，记为$\boldsymbol\omega$。两个像点与$\boldsymbol\omega$间的射影关系，完全等价于回射的射线和无穷远平面的交点与$\Omega_{\infty}$间的关系。那么，已知IAC，通过直接在图像中测量，可测量射线间的夹角。因此，对标定的摄像机，可以测量射线间夹角，计算图像块代表的视场，或者确定图像中的椭圆能否反向投影为圆锥（circular cone）。稍后，我们将看到它帮助我们确定重建场景的欧氏结构。</p><h5 id="例1-1-基于绘画的三维重建"><a href="#例1-1-基于绘画的三维重建" class="headerlink" title="例1.1 基于绘画的三维重建"></a>例1.1 基于绘画的三维重建</h5><p>利用射影几何技术，很多情况下可从单张图像重建场景。若不对成像场景做些假设，这无法实现。典型的技术涉及通过平行线和消失点等特征的分析，确定场景的仿射结构，例如这可通过确定图像中观察平面的无穷远线而确定。场景中发现的角度信息（或假设），尤其是正交的线或平面，可用于将仿射重建提升到欧氏重建。</p><p>这些技术还不能完全自动化。尽管如此，射影几何知识仍可根植于系统，实现用户引导下的单视场景重建。</p><p>这些技术已被用于重建大师画作中的三维纹理映射的图模型（graphical model）。自文艺复兴始，就产生了具有非常精确透视法的绘画。图1.2中展示了基于这样的绘画而实现的重建们制作了具有极其准确视角的绘画。在图1.2中，展示了从这种绘画进行的重建。</p><p><img src="/assets/blogImg/1.2.png" alt="image-1.2"></p><h2 id="1-3-多视图重建"><a href="#1-3-多视图重建" class="headerlink" title="1.3 多视图重建"></a>1.3 多视图重建</h2><p>我们现在进入本书的主题之一——基于多张图像重建场景。最简单的情况是两张图，这是我们首先将要考虑的。作为数学上的抽象，我们将论述限定在只包含点的“场景”。</p><p>本书给出的许多算法，输入一般都是对应点（point correspondence）的集合。因此，在双视情形，我们考虑两张图对应关系的一个集合$\mathbf x_i \leftrightarrow\mathbf x_i^\prime$。假设存在摄像机矩阵$\mathrm P$和$\mathrm P^\prime$，以及三维点$\mathbf X_i$，它们生成了场景的这些对应图像（image correspondence），满足$\mathrm P\mathbf X_i=\mathbf x_i$和$\mathrm P^\prime\mathbf X_i=\mathbf x_i^\prime$。因此，点$\mathbf X_i$投影到了两个给定的数据点。然而，摄像机（表示为射影矩阵$\mathrm P$和$\mathrm P^\prime$）和点$\mathbf X_i$都未知。我们的任务就是确定它们。</p><p>从一开始就清楚，不可能唯一确定这些点的位置。尽管我们得到了许多图，甚至我们不止拥有相应点的数据，这种歧义仍普遍存在。例如，给定立方体对象的几张图，这不可能表明它的绝对位置（它在亚的斯亚贝巴的夜总会（night-club）还是大英博物馆），它的朝向（它的哪面朝北），或它的尺寸。对此我们认为重建是可行的，只不过受制于现实世界的相似变换。然而，事实表明，除非两个摄像机标定的相关信息已知，重建中的这种歧义通过一种更一般的变换类描述——射影变换。</p><p>导致这种歧义，其原因在于可对每个点$\mathbf X_i$施加射影变换（用$4\times 4$的矩阵$\mathrm H$表示），也可将该变换用于每个摄像机矩阵$\mathrm P_j$的右侧，而不改变投影的像点，因此：$$\begin{equation} \mathrm P_j\mathbf X_i = \left(\mathrm P_j\mathrm H^{-1}\right)\left(\mathrm H\mathbf X_i\right) \tag{1.1} \end{equation}$$</p><p>选择某个点集和摄像机矩阵而非其它的，并非理由充分。$\mathrm H$的选择非常随意，我们称重建存在射影歧义，或称之为<mark>射影重建</mark>（projective reconstruction）。</p><p>然而，好消息是这是可能发生的最坏情况。从双视图重建点集，在无法避免的射影歧义下可行。那么，我们需要满足一些前提；点必须足够多，至少七个，并且它们必不在任何明确的关键结构（critical configuration）中。</p><p>从双视中重建点集的基本工具是<mark>基础矩阵</mark>（fundamental matrix）<span id="基础矩阵"></span>，它描述了同一三维点的像点$\mathbf x$和$\mathbf x^\prime$满足的约束。该约束源自于这两个视图的摄像机中心、像点以及空间点的共面性。令基础矩阵为$\mathrm F$，匹配的点对$\mathbf x_i\leftrightarrow \mathbf x_i^\prime$必须满足: $$\mathbf x_i^{\prime\top}\mathrm F\mathbf x_i = 0$$</p><p>其中$\mathrm F$是一个秩为$2$的$3\times 3$矩阵。这些方程是线性的，系数是矩阵$\mathrm F$。这意味着若$\mathrm F$未知，那么它可由一组对应点计算。</p><p>一对摄像机矩阵$\mathrm P$和$\mathrm P^\prime$唯一确定了一个基础矩阵$\mathrm F$，反之，该基础矩阵确定了三维射影歧义下一对摄像机矩阵。因此，基础矩阵蕴涵了这对摄像机的全部射影几何，并且不被三维射影变换所改变。</p><p>基础矩阵法重建场景非常简便，包含以下步骤：</p><ol><li>给定两视图间的几个对应点$\mathbf x_i\leftrightarrow\mathbf x_i^\prime$，基于共面方程$\mathbf x_i^{\prime\top}\mathrm F\mathbf x_i=0$，构造系数为$\mathrm F$的线性方程。</li><li>找出线性方程组的解$\mathrm F$。</li><li>根据9.5节(p253[v1 p171])中给出的简单公式由$\mathrm F$计算一对摄像机矩阵。</li><li>给定两个摄像机$\left(\mathrm P, \mathrm P^\prime\right)$及对应像点对$\mathbf x_i\leftrightarrow\mathbf x_i^\prime$，找出投影到给定像点的三维点$\mathbf X_i$。这种求解$\mathbf X$的方法<span id="三角测量法"></span>称为<mark>三角测量法</mark>。</li></ol><p>此处只给出了算法的梗概，本书详细探讨了其中的每部分。按照此简述不能直接实现该算法。</p><h2 id="1-4-三视几何"><a href="#1-4-三视几何" class="headerlink" title="1.4 三视几何"></a>1.4 三视几何</h2><p>在上一节，探讨了从点集的双视图，重建点集和摄像机的相对位置是可行的。这种重建，仅在空间射影变换以及对摄像机矩阵相应调整时，才可行。</p><p>本节考虑三视图的情况。鉴于双视图，基本的代数实体是基础矩阵，对三视图该角色由三焦张量胜任。三焦张量是一个$3\times 3\times 3$的数字数组，其数字与三视图中相应点或线的坐标相关。<mark>正如基础矩阵由两个摄像机矩阵确定，并在射影变换意义下确定它们，三视图亦如此，三焦张量由三个摄像机矩阵确定，并且也是在射影变换的意义下依次确定他们</mark>。因此，三焦矩阵包含了三个摄像机的相对射影几何。</p><p>通常张量的一些索引记为下标，一些记为上标，原因将在第15章说明。这些称为协变和逆变索引。三焦张量形如$\mathcal T_i^{jk}$，拥有两个上标和一个下标索引。</p><p>三视图中图像实体间最基本的关系，涉及两条线和一点之间的对应关系。我们考虑一张图中一个点$\mathbf x$和另外两张图中两条线$\mathbf l^{\prime}$和$\mathbf l^{\prime\prime}$之间的对应关系$\mathbf x\leftrightarrow\mathbf l^\prime\leftrightarrow\mathbf l^{\prime\prime}$。该关系意味着空间中存在点$\mathbf X$，映射到第一张图的$\mathbf x$，并且映射到点$\mathbf x^\prime$和$\mathbf x^{\prime\prime}$位于另外两张图中的线$\mathbf l^{\prime}$和$\mathbf l^{\prime\prime}$上。随后，三张图的坐标通过三焦张量关系向联系：$$\begin{equation} \sum_{ijk}x^il_j^\prime l_k^{\prime\prime}\mathcal T_i^{jk}=0。 \tag{1.2} \end{equation}$$</p><p>该关系确定了张量元素间的单个线性关系。当拥有充足的对应关系时，可线性求解张量元素。可从点的一个对应关系$\mathbf x\leftrightarrow\mathbf x^\prime\leftrightarrow\mathbf x^{\prime\prime}$幸运地获得更多的方程。事实上，在该情形，可选择通过点$\mathbf x^\prime$和$\mathbf x^{\prime\prime}$的任意线$\mathbf l^\prime$和$\mathbf l^{\prime\prime}$，并得到形如1.2的关系。由于可选择通过点$\mathbf x^\prime$的两条不相关线，以及另外两条通过$\mathbf x^{\prime\prime}$的线，可以依此方式得到四个不相关的方程。照这样做，总共七个对应点就够线性地计算三焦张量。利用非线性方法，最少六个对应点就能计算。</p><p>这27个张量元素并非无关，既然这样，它们通过一组内部约束相联系。这些约束非常复杂，但是满足这些约束的张量可通过多种方式计算，比如采用6点非线性法。基础矩阵（它是双视图张量）也满足一个内部约束，但相对简单：元素服从$\det\mathrm F=0$。</p><p>借助基础矩阵，一旦三焦张量已知，可从它得到三个摄像机矩阵，从而实现场景的点和线的重建。一如既往，该重建仅在三维射影变换下是唯一的；它是射影重建。</p><p>因此，我们可以将该方法从双视图推广到三视图。采用<mark>这种三视图重建法有几个优势</mark>：</p><ol><li>可采用相关点和相关线的混合，计算射影重建。双视图只能使用对应点。</li><li>使用三视图，重建的稳定性更好，并且避免了只使用双视图重建可能导致的不稳定结构。</li></ol><h2 id="1-5-四视几何与-n-视重建"><a href="#1-5-四视几何与-n-视重建" class="headerlink" title="1.5 四视几何与$n$视重建"></a>1.5 四视几何与$n$视重建</h2><p>基于张量的方法还可再深入一步，定义与四视图中可见实体关联的一个四焦张量。由于计算满足其内部约束的四焦张量相对困难，既然如此，因此该方法很少用。尽管如此，它提供了一种非迭代法计算基于四视图的射影重建。张量方法并未拓展到四个以上视图，既如此，因此从四个以上视图重建变得更困难。</p><p>基于多视图的重建的许多方法已有了探讨，我们在本书探讨其中的几个。<mark>逐步重建场景</mark>是一种方法，它采用三视图或双视图技术。这种方法可用于任何图像序列，通过精心选择合适的三元组使用，这通常会奏效。</p><p>存在可用于特定情况的方法。如果我们能使用称为仿射摄像机的更简单摄像机模型，重建任务就变得更容易了。<span id="透视投影"></span>与场景的背景和前景的距离差比起来，每当摄像机到场景的距离很大时，该摄像机模型就是<mark>透视投影</mark>（perspective projection）的一种合理的近似。如果一个点集，在仿射摄像机相关$n$视图的整个集合中均可见，那么著名的<mark>因子化算法</mark>（factorization algorithm），可用于同时计算场景结构和特定摄像机模型，使用奇异值分解一步完成。该算法非常可靠，并且易于实现。<u>它的主要不同点在于使用了仿射摄像机模型而非纯粹的射影模型，并且要求全部点在所有视图中可见</u>。</p><p>该方法已经在称为投影分解的方法中扩展到投影相机。虽然这种方法通常令人满意，但无法证明在所有情况下都能收敛到正确的解决方案。 此外，它还要求所有点在所有图像中都可见。</p><p>其它$n$视重建法需要各种前提，比如现实世界的四个共面点在全部视图中可见，或者六个或七个点在序列的所有图像中都可见。采用特定运动序列的方法，比如线性运动、平面运动或单轴（转台）运动，也已有了研究。</p><p>处理常规重建问题的主流方法是<mark>光束平差法</mark>。这是一种迭代方法，它试图用一个非线性模型拟合被测数据（对应点）。光束平差法的优点是它是非常普遍的方法，可适用的重建和优化问题的范围广泛。它可按此方式求解——所求解是问题的最大似然解，对非精确图像测量模型，这种解是某种意义上的最佳解。</p><p>不走运，光束平差法是一个迭代过程，不能保证从任意起始点收敛到最优解。许多重建方法的研究，寻求容易计算的非最佳解，它能作为光束平差法的起始点。初始化步骤后接光束平差法，这通常是重建偏爱的技术。一个普遍的印象是光速平差法必然是一种缓慢的技术。事实上，若用心实现，该方法非常有效。本书的一个长附录讲述了高效的光束平差法。</p><p>使用$n$视重建技术，可从很长的图像序列中实现自动重建。例如，图1.3所示的例子展示了源自700帧的重建。</p><p><img src="/assets/blogImg/1.3.png" alt="image-1.3"><br><strong>图 1.3：重建。</strong>(a)700帧视频序列中的7帧，视频通是当沿牛津街道行走时手持摄像机拍摄的。(b)(c)两个重建点云和摄像机路径（红色曲线）的视图。感谢David Capel和2d3<a href="www.2d3.com">www.2d3.com</a>供图。</p><h2 id="1-6-变换"><a href="#1-6-变换" class="headerlink" title="1.6 变换"></a>1.6 变换</h2><p>我们已经探讨了从图像集进行三维重建。射影几何的另一个实际用途是变换：给定点在一张（或更多）图中的位置，确定它会出现在该组其它所有图像的哪些位置。为了这么做，我们必须首先用（比如）辅助点集建立摄像机间的关系。若重建可行，变换在概念上是直截了当的。例如，如果在两张视图中确定了点（$\mathbf x$和$\mathbf x^\prime$），我们希望知道它在第三视图中的位置，那么这可按如下步骤计算：</p><ol><li>从其它对应点$\mathbf x_i\leftrightarrow\mathbf x_i^\prime\leftrightarrow \mathbf x_i^{\prime\prime}$，计算三视图的摄像机矩阵$\mathrm P$、$\mathrm P^\prime$、$\mathrm P^{\prime\prime}$。</li><li>使用$\mathrm P$和$\mathrm P^\prime$从$\mathbf x$和$\mathbf x^\prime$用三角测量法得到三维点$\mathbf X$。</li><li>三维点到第三视图的投影为$\mathbf x^{\prime\prime}=\mathrm P^{\prime\prime}\mathbf X$。</li></ol><p>该过程仅需射影信息。另一策略是采用多视图张量（基础矩阵和三焦张量）直接变换点而无需显式的三维重建。两种方法都有它们的优势。</p><p>假定摄像机绕它的中心旋转，或者感兴趣的所有场景点共面。那么，合适的多视关系是图像间的平面射影变换。在此情况，只在一张图出现的点可被变换到其它任何图像。</p><h2 id="1-7-欧式重建"><a href="#1-7-欧式重建" class="headerlink" title="1.7 欧式重建"></a>1.7 欧式重建</h2><p>至此，对于未标定摄像机组采集的图像，我们已考虑了场景重建和变换。对这些摄像机，诸如焦距、图像的几何中心（或主点）、还可能有图像中像素长宽比等重要参数未知。如果每个摄像机的全部标定已知，那么可能消除重建场景的某些歧义。</p><p>至此，我们已经讨论了射影重建，其全部内容在于摄像机或场景标定的相关信息未知时，它是可行的。射影重建在很多场合还不足，比如，计算机图形学应用，由于它存在模型失真，对于看惯了欧氏世界的人，这有些奇怪。例如，一个简单对象中，射影变换导致的失真如图1.4所示。使用射影重建技术，无法从图1.4中杯子的任何可能形状中做出选择。射影重建算法产生此处所见的任何一种重建的可能性，和其余任何一种一样。射影重建可能产生更严重失真的模型。</p><p><img src="/assets/blogImg/1.4.png" alt="image-1.4"><br><strong>图 1.4：射影歧义</strong>：在Z方向，三维射影变换下杯子的重建（真实形状如中间的图所示）。所示杯子的五个例子，存在不同程度的射影失真。形状和原始的区别很大。</p><p>为了实现模型重建，其中对象拥有它们正确的（欧氏）形状，必须标定摄像机。易知这足够确定场景的欧氏结构。如我们所见，确定现实世界的欧氏结构，等价于确定无穷远平面和绝对圆锥曲线。事实上，由于绝对圆锥曲线位于一个平面，无穷远平面，这足以找出空间的绝对圆锥曲线。现在，使用已标定摄像机，假设我们已计算出了现实世界的射影重建。根据定义，这意味着每张图中的IAC已知；第$i$幅图中的用$\boldsymbol\omega_i$表示。每个$\boldsymbol\omega_i$的逆投影（back-projection）是空间中的一个圆锥，并且绝对圆锥曲线必位于所有圆锥的交。两个圆锥通常交于四阶曲线，但设定它们必交于一条圆锥曲线，该曲线必分为两条圆锥曲线。因此，基于两幅图的绝对圆锥曲线重建不唯一——相反，通常有两个可能解。然而，基于三幅及以上的图像，通常圆锥的交唯一。因此圆锥曲线是确定的，并且通过它场景的欧氏结构也亦如此。</p><p>当然，若场景的欧氏结构已知，那么绝对圆锥曲线亦如此。在此情形，我们可将它投影回每幅图，在每幅图中得到IAC，并由此标定摄像机。因此，<mark>摄像机标定信息等价于能确定场景的欧氏结构</mark>。</p><h2 id="1-8-自标定"><a href="#1-8-自标定" class="headerlink" title="1.8 自标定"></a>1.8 自标定</h2><p>不带有摄像机的任何标定信息，不可能比射影重建做得更好。任意数量视图之间对应特征的集合中，没有信息能帮我们找出绝对圆锥曲线的像，或等价于摄像机的标定信息。然而，若我们恰好知道一点关于摄像机的标定信息，那么我们也许能确定绝对圆锥曲线的位置。</p><p>对于用在从图像序列重建场景的每个摄像机，比如假定已知它们的标定相同。为此我们思路如下。每幅图中确定一个坐标系统，其中我们已测得用于射影重建的相应特征的图像坐标。假设在所有这些图像坐标系统中，IAC相同，但只是它在何处未知。从这些信息中，我们期望计算出绝对圆锥曲线的位置。</p><p>一种找到绝对圆锥曲线的方法是在一幅图中假定IAC的位置。通过这个假定，它在其他图中的位置将会一致。每个圆锥曲线的反投影将会是空间中圆锥曲线。如果三个锥体都在一个圆锥体中相遇，那么这必然是绝对圆锥曲线位置的可能解，与重建一致。</p><p>请注意，这只是一个概念性描述。IAC当然是一个只包含复数点的圆锥曲线，它的反投影将是一个复杂的圆锥体。然而，在代数上，问题更容易处理。 虽然它是复数的，但IAC可以用实二次形式（由实对称矩阵表示）来描述。 反投影锥也由实数二次形式表示。 对于IAC的某些值，三个反投影锥体将在空间中交于一条圆锥曲线。</p><p>通常来说给定已知拥有相同标定的三个摄像机，有可能确定绝对圆锥曲线，从而确定相机的标定。然而，尽管针对此已有各种不同的方法被提出，这仍然是一个相当困难的问题。</p><h5 id="已知无穷远面"><a href="#已知无穷远面" class="headerlink" title="已知无穷远面"></a>已知无穷远面</h5><p>自动校准的一种方法是通过首先确定其所在的平面来逐步进行。这相当于识别世界上的无穷远面，从而确定世界的仿射几何。在第二步中，定位绝对圆锥曲线在平面上的位置以确定空间的欧几里德几何。假设知道无穷远面，可以从一系列图像中反投影一个假设的IAC，并将得到的锥体与无穷远面相交。如果正确选择IAC，则相交曲线是绝对圆锥曲线。因此，从每对图像中，具有这样的一个条件：背投影的锥体在无穷远面上交于相同的圆锥曲线。事实证明，这给出了代表IAC的矩阵系数的线性约束。从一组线性方程式中，可以确定IAC，从而确定绝对圆锥曲线。因此，一旦确认无穷远面，自动标定就相对简单了。确认无穷远面本身就更加困难。</p><h5 id="给定图像中的方形像素进行自标定"><a href="#给定图像中的方形像素进行自标定" class="headerlink" title="给定图像中的方形像素进行自标定"></a>给定图像中的方形像素进行自标定</h5><p>如果相机已经部分标定，则可以从射影重建开始完成标定。人们可以通过IAC表示的相机标定的极小条件来完成。一个有趣的例子是相机上的方形像素约束。这意味着每个图像中都已知欧几里德坐标系。在这种情况下，位于世界上的无穷远面中的绝对圆锥曲线必须在其两个虚圆环点中与图像平面相交。平面的虚圆环点是绝对圆锥曲线与该平面相交的两个点。通过像平面的虚圆环点的回射射线一定与绝对圆锥曲线相交。因此，具有方形像素的每个图像确定了一定交于绝对圆锥曲线的两条射线。给定n个图像，然后自动标定任务变为确定在空间中与一组2$n$射线相交的空间圆锥曲线（绝对圆锥曲线）。等效几何图像是将该组光线与平面相交并且要求该组交点位于圆锥曲线上。通过一个简单的计数参数，可以看到，只有有限个圆锥曲线在空间中与八条指定的射线相交。因此，从四个图像中可以确定标定，尽管有多种可能性。</p><h2 id="1-9-奖励一：三维图形建模"><a href="#1-9-奖励一：三维图形建模" class="headerlink" title="1.9 奖励一：三维图形建模"></a>1.9 奖励一：三维图形建模</h2><p>我们现在已经描述了从图像序列计算逼真图形模型所需的所有成分。从图像之间的点匹配，可以首先执行点集的射影重建，并确定摄像机在所选择的投影坐标系中的运动。</p><p>假设对捕获图像序列的摄像机的标定有一些限制，使用自动标定技术，可以标定摄像机，并且随后将场景转换为其真正的欧几里德结构。</p><p>知道了场景的射影结构，就可以找到与图像对相关的极线几何，这限制了线的进一步匹配的对应搜索——一幅图像中的一个点定义了另一幅图像(对应点[尚未知]一定在其上)中的一条线。事实上，对于合适的场景，可以在图像之间执行密集点匹配并且创建成像场景的密集3D模型。这采用三角形形状模型的形式，随后从提供的图像着色或纹理映射并用于生成新颖的视图。该过程的步骤如图1.5和图1.6所示。</p><p><img src="/assets/blogImg/1.5.png" alt="image-1.5"></p><p><img src="/assets/blogImg/1.6.png" alt="image-1.6"></p><p><strong>图1.6 密集重建</strong>。这些是由摄像机和图1.5的图像计算得到。（a）无纹理和（b）整个场景的纹理重建。（c）无纹理和（d）(b)的白色矩形所示的区域的纹理特写。（e）无纹理和（f）(d)的白色矩形所示区域纹理特写。使用[Strecha-02]中描述的三视图立体算法计算密集表面。图像由Christoph Strecha，Frank Verbiest和Luc Van Gool提供。</p><h2 id="1-10-奖励二：视频增强"><a href="#1-10-奖励二：视频增强" class="headerlink" title="1.10 奖励二：视频增强"></a>1.10 奖励二：视频增强</h2><p>我们通过介绍在计算机图形学中重建方法的进一步应用来完成本导读部分。自动重建技术最近广泛应用在电影行业中，用作在真实视频序列中添加人工图形对象的手段。摄像机运动的计算机分析正在取代以前使用的手动方法，以正确对准人工插入的物体。</p><p>在视频序列中真实插入人工对象的最重要的要求是计算摄像机的正确运动。除非正确确定了摄像机运动，否则不可能以与背景视频一致的方式生成图形模型的正确视图序列。一般来说，在此处只有摄像机的运动才是重要的; 我们不需要重建场景，因为它已经存在于现有视频中，并且不需要视频中可见的场景的新颖视图。唯一的要求是能够生成图形模型的正确透视图。</p><p>在欧几里德框架中计算摄像机的运动至关重要。仅了解相机的投影运动是不够的。这是因为欧几里得对象将被放置在场景中。除非在相同的坐标系中已知该图形对象和相机，否则将看到所插入对象的生成视图相对于在现有视频中看到的场景的感知结构而扭曲。</p><p>一旦摄像机的正确运动及其标定已知，就可以以逼真的方式将插入的对象渲染到场景中。如果正确确定了帧与帧之间的摄像机标定的变化，则摄像机可能会在序列期间改变焦距（变焦）。甚至可能主点在序列中通过裁剪而变化。</p><p>在将渲染的模型插入视频中时，如果任务位于所有现有场景的前面，则任务相对直截了当。否则会出现遮挡的可能性，其中场景可能会遮挡模型的某些部分。视频增强的一个例子如图1.7所示。</p><p><img src="/assets/blogImg/1.7.png" alt="image-1.7"></p><h2 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h2><ol><li>平面的射影变换定义为平面上点的任意<strong>保直线映射</strong>。</li><li><strong>射影空间</strong>是欧几里德空间的延伸(通过齐次向量表示点)，两条线总是在一个点上相遇(有时这个点是在神秘的无穷远点)。</li><li>二维射影空间中的无穷远点形成一条线，通常称为<strong>无穷远线</strong>。它们在三维空间中形成了<strong>无穷远平面</strong>。</li><li>空间自身变换和旋转到了不同位置——<strong>欧式变换</strong>；空间的移动、旋转，以及最后在不同方向可能按不同比例进行线性缩放——<strong>仿射变换</strong>。欧氏变换或仿射变换的结果是，无穷远点仍然在无穷远。</li><li>射影空间$\mathbb P^n$的<strong>射影变换</strong>表示为齐次坐标的线性变换。$$ \mathbf X^\prime=\mathrm H_{(n+1)\times (n+1)}\mathbf X. $$ 无穷远点映射到任意其它点，没有保持无穷远点。</li><li>射影平面的几何加上一条特殊的线被称为<strong>仿射几何</strong>，将一个空间中的该特殊线映射到另一个空间中特殊线的任何射影变换称为<strong>仿射变换</strong>。</li><li>平面的<a href="#虚圆环点">虚圆环点</a>。</li><li>位于无穷远平面上的二阶曲线（圆锥曲线），且仅由复数点构成。称为<a href="#绝对圆锥曲线">绝对圆锥曲线</a>。</li><li>通过确定无穷远线和一对虚圆环点，即根据<strong>射影平面确定欧氏平面</strong>。挑选一个特殊的平面作为无穷远平面，并指定位于该平面的一条特殊的圆锥曲线作为绝对圆锥曲线，即<strong>射影空间确定三维欧式空间</strong>。</li><li><a href="#线的垂直">线的垂直</a>可以用绝对圆锥曲线来定义。</li><li><a href="#摄像机矩阵">摄像机矩阵</a>。</li><li>若已知<a href="#IAC">IAC</a>在图像中的位置，那么我们称摄像机<strong>已标定</strong>。</li><li><a href="#基础矩阵">基础矩阵</a>蕴涵了这对摄像机的全部射影几何，并且不被三维射影变换所改变。<a href="#三角测量法">三角测量法</a>。</li><li>与场景的背景和前景的距离差比起来，每当摄像机到场景的距离很大时，该摄像机模型就是<a href="#透视投影">透视投影</a>的一种合理的近似。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章介绍了本书中涉及的主要思想。对这些主题进行了非正式的介绍。精确、明确的定义，细致的代数以及精心设计的估算算法的描述被推迟到本书的第2章和后续章节。在整个介绍中，我们通常不会给出到后面那些章节的明确指向。所涉及的材料可以使用索引或目录来定位。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多视角几何第二版" scheme="//georgeju95.github.io/tags/%E5%A4%9A%E8%A7%86%E8%A7%92%E5%87%A0%E4%BD%95%E7%AC%AC%E4%BA%8C%E7%89%88/"/>
    
      <category term="翻译" scheme="//georgeju95.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="计算机视觉" scheme="//georgeju95.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>视觉SLAM第二讲——初识SLAM</title>
    <link href="//georgeju95.github.io/2019/07/01/2019-07-01-Visual-SLAM-2-First-Know-SLAM/"/>
    <id>//georgeju95.github.io/2019/07/01/2019-07-01-Visual-SLAM-2-First-Know-SLAM/</id>
    <published>2019-07-01T06:30:00.000Z</published>
    <updated>2023-08-29T18:58:12.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>传感器</strong>：</p><ul><li>携带于机器人本体上，如：激光传感器、相机、轮式编码器、IMU（惯性测量单元）等。</li><li>安装于环境中，如：导轨、二维码标志、无线电定位设备等。<a id="more"></a></li></ul><p><strong>单目相机(Monocular)</strong> ：</p><ul><li>照片（场景在相机的成像平面上留下的一个投影）</li><li>二维形式反映三维世界，丢失了场景的<strong>深度（距离）</strong> 维度。</li><li>移动相机改变视角，可以估计相机运动和场景结构<ol><li>相机右移，图像里的东西左移。</li><li>近处的物体移动快，远处的物体运动缓慢。</li><li>形成视差，通过视差可以定量判断物体距离（<strong>相对距离</strong>）。</li></ol></li><li>尺度不确定性<ol><li>单目SLAM估计的轨迹和地图与实际的轨迹和地图相差一个因子，也就是所谓<strong>尺度</strong>。</li><li>单目SLAM无法仅凭图像确定这个真实尺度。</li></ol></li></ul><p><strong>双目相机 (Stereo)</strong>：</p><ul><li>克服单目相机无法知道距离的缺点，消除尺度不确定性。</li><li>两个单目相机组成，之间的距离称为<strong>基线</strong>，基线距离越大，能够测量到的就越远。</li><li>缺点：<ol><li>配置与标定均较为复杂，深度量程和精度受双目的基线和分辨率所限。</li><li><strong>视差的计算非常消耗计算资源</strong>，需要使用GPU和FPGA设备加速后，才能实时输出整张图像的距离信息。因此现有条件下<strong>计算量是双目的主要问题之一</strong>。</li></ol></li></ul><p><strong>深度相机(RGB-D)</strong> :</p><ul><li>通过红外结构光或Time-Of-Flight(ToF)原理测距（<strong>物理测量</strong>）</li><li>缺点： 测量范围窄、噪声大、视野小、易受日光干扰、无法测透射材质等。主要用于室内，室外则较难应用。 </li></ul><h2 id="经典的SLAM框架："><a href="#经典的SLAM框架：" class="headerlink" title="经典的SLAM框架："></a>经典的SLAM框架：</h2><p><img src="/assets/blogImg/slam.png" alt="alt"></p><p><strong>视觉里程计(Visual Odmetry)</strong>:   <u>前端和CV研究更相关，如图像的特征提取与匹配</u></p><ul><li>通关相邻帧间的图像估计相机运动，并恢复场景的空间结构。<br><u>只计算相邻时刻的运动，和再往前的过去的信息没有关联</u></li><li><strong>累积漂移</strong>(只计算相邻时刻运动的原因)：先前时刻的误差将会传递到下一时刻。<u>(后端优化、回环检测来解决)</u></li></ul><p><strong>后端优化</strong>：<del>如滤波与非线性优化算法</del></p><ul><li>如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大——<strong>最大后验概率认证</strong>(MAP)</li></ul><p><strong>回环检测</strong>：</p><ul><li>解决位置估计随时间漂移的问题</li><li>判断图像间相似性</li></ul><p><strong>建图</strong>：</p><ul><li>度量地图(Metric Map)： 稀疏 OR 稠密</li><li>拓扑地图(Topological Map)： 图(Graph)，强调节点间的连通性。</li></ul><h2 id="SLAM问题的数学表达"><a href="#SLAM问题的数学表达" class="headerlink" title="SLAM问题的数学表达"></a>SLAM问题的数学表达</h2><p><strong>运动方程：$$ \vec x_k = f(\vec x_{k-1}, \vec u_k, \vec w_k) $$</strong></p><p>其中 $ \vec u_k $是运动传感器的读数, $ \vec w_k $是噪声，$ \vec x_k、\vec x_{k-1}$是机器人的两个时刻不同的位姿。</p><p><strong>观测方程：$$ \vec z_{k,j} = h(\vec y_j, \vec x_k, \vec v_{k,j}) $$</strong></p><p>其中 $ \vec y_j $是某个路标点, $ \vec v_{k,j} $是这次观测里的噪声。机器人在$ \vec x_k $位置看到某个路标点$ \vec y_j $产生了一个观测数据$ \vec z_{k,j} $。</p><p><strong>状态估计问题</strong>：<br>这两个方程描述了最基本的SLAM问题。已知运动测量的读数$\vec u$，以及传感器的读数$\vec z$，如何<mark>求解定位问题($\vec x$)和建图问题($\vec y$)</mark>? 这时我们把SLAM问题建模成了一个状态估计问题：<u>如何通过有噪声的测量数据，估计内部的、隐藏着的状态变量？</u></p><p>状态估计问题的求解：</p><ul><li>两个方程的具体形式。<u>线性(Linear)/非线性(Non-Linear)系统</u></li><li>噪声服从哪种分布。<u>高斯(Gaussian)/非高斯(Non-Gaussian)系统</u></li></ul><p>LG系统：<u>卡尔曼滤波器</u>(KF) —&gt; 无偏的最优估计<br>NLNG系统：<u>扩展的卡尔曼滤波器</u>(EKF)、<u>非线性优化</u> 两大类方法去求解。</p><p>时至今日，主流视觉SLAM使用以图优化为代表的优化技术进行状态估计。普遍认为优化技术已经明显优于滤波器技术，只要<strong>计算资源允许，通常都偏向于使用优化方法</strong>。</p><h2 id="实践部分"><a href="#实践部分" class="headerlink" title="实践部分"></a>实践部分</h2><ul><li>学习cmake-make编译，cmake过程处理了工程文件之间的关系，而make过程实际调用了g++来编译程序。虽然这个过程多了调用cmake和make的步骤，但我们对项目的编译管理工作，从输入一串g++命令，变成了维护若干个比较直观的CmakeLists.txt文件，这将明显降低维护整个工程的难度。</li><li>Linux中，库文件分成静态库(.a)和共享库(.so)两种，只要拿到了头文件和库文件，就可以调用这个库了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;传感器&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;携带于机器人本体上，如：激光传感器、相机、轮式编码器、IMU（惯性测量单元）等。&lt;/li&gt;
&lt;li&gt;安装于环境中，如：导轨、二维码标志、无线电定位设备等。
    
    </summary>
    
    
      <category term="视觉SLAM十四讲" scheme="//georgeju95.github.io/tags/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github建立个人博客的一点总结</title>
    <link href="//georgeju95.github.io/2019/06/30/A-summary-of-Hexo-personal-blog/"/>
    <id>//georgeju95.github.io/2019/06/30/A-summary-of-Hexo-personal-blog/</id>
    <published>2019-06-30T11:03:00.000Z</published>
    <updated>2023-08-29T18:58:12.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>以Mac Os系统为例：</p><h3 id="1、安装nodejs（去官网下载LTS版本）和-git"><a href="#1、安装nodejs（去官网下载LTS版本）和-git" class="headerlink" title="1、安装nodejs（去官网下载LTS版本）和 git"></a>1、安装nodejs（去官网下载LTS版本）和 git</h3><p>确保安装成功 node -v 和 npm -v 测试一下</p><a id="more"></a><h3 id="2、终端进入管理员模式"><a href="#2、终端进入管理员模式" class="headerlink" title="2、终端进入管理员模式"></a>2、终端进入管理员模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br></pre></td></tr></table></figure><h3 id="3、npm安装cnpm-针对国内用户，淘宝有镜像站"><a href="#3、npm安装cnpm-针对国内用户，淘宝有镜像站" class="headerlink" title="3、npm安装cnpm(针对国内用户，淘宝有镜像站)"></a>3、npm安装cnpm(针对国内用户，淘宝有镜像站)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="4、cnpm安装hexo"><a href="#4、cnpm安装hexo" class="headerlink" title="4、cnpm安装hexo"></a>4、cnpm安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="5、新建一个文件夹，这个文件夹就是博客的全部内容存储的地方。cd进入这个目录"><a href="#5、新建一个文件夹，这个文件夹就是博客的全部内容存储的地方。cd进入这个目录" class="headerlink" title="5、新建一个文件夹，这个文件夹就是博客的全部内容存储的地方。cd进入这个目录"></a>5、新建一个文件夹，这个文件夹就是博客的全部内容存储的地方。cd进入这个目录</h3><h3 id="6、初始化hexo框架"><a href="#6、初始化hexo框架" class="headerlink" title="6、初始化hexo框架"></a>6、初始化hexo框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="7、启动博客。出现一个本地端口地址，粘贴到浏览器即可"><a href="#7、启动博客。出现一个本地端口地址，粘贴到浏览器即可" class="headerlink" title="7、启动博客。出现一个本地端口地址，粘贴到浏览器即可"></a>7、启动博客。出现一个本地端口地址，粘贴到浏览器即可</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><hr><h2 id="二、写博客"><a href="#二、写博客" class="headerlink" title="二、写博客"></a>二、写博客</h2><h3 id="1、新建一篇文章：hexo-n-“文章名-不需要-md扩展名-”"><a href="#1、新建一篇文章：hexo-n-“文章名-不需要-md扩展名-”" class="headerlink" title="1、新建一篇文章：hexo n “文章名(不需要.md扩展名)”"></a>1、新建一篇文章：hexo n “文章名(不需要.md扩展名)”</h3><p>之后会在source/_posts中看到这个文件</p><h3 id="2、写好后进行清理、生成、预览"><a href="#2、写好后进行清理、生成、预览" class="headerlink" title="2、写好后进行清理、生成、预览"></a>2、写好后进行清理、生成、预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><hr><h2 id="三、部署到远端服务器（可以免费部署到GitHub）"><a href="#三、部署到远端服务器（可以免费部署到GitHub）" class="headerlink" title="三、部署到远端服务器（可以免费部署到GitHub）"></a>三、部署到远端服务器（可以免费部署到GitHub）</h2><h3 id="1、github新建一个仓库，名字一定命名为：昵称-github-io"><a href="#1、github新建一个仓库，名字一定命名为：昵称-github-io" class="headerlink" title="1、github新建一个仓库，名字一定命名为：昵称.github.io"></a>1、github新建一个仓库，名字一定命名为：昵称.github.io</h3><h3 id="2、在创建的文件夹下安装一个git部署的插件"><a href="#2、在创建的文件夹下安装一个git部署的插件" class="headerlink" title="2、在创建的文件夹下安装一个git部署的插件"></a>2、在创建的文件夹下安装一个git部署的插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="3、对-config-yml进行配置，配置git到username-github-io，这样可以在本地写完后一键部署"><a href="#3、对-config-yml进行配置，配置git到username-github-io，这样可以在本地写完后一键部署" class="headerlink" title="3、对_config.yml进行配置，配置git到username.github.io，这样可以在本地写完后一键部署"></a>3、对_config.yml进行配置，配置git到username.github.io，这样可以在本地写完后一键部署</h3><p>可以使用vim打开，到文件的最底部添加<br>deploy:<br>&emsp;type: git<br>&emsp;repo: 复制上你创建的github仓库地址<br>&emsp;branch: master</p><h3 id="4、部署到远端"><a href="#4、部署到远端" class="headerlink" title="4、部署到远端"></a>4、部署到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>输入github账号和密码。推成功后刷新github仓库发现有所变化，此时可以访问username.github.io</p><hr><h2 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h2><h3 id="美化hexo，在github上找到hexo-theme-yilia框架，git-clone到本地的博客文件夹下的themes文件夹中，更改配置文件的主题为yilia就搞定了。"><a href="#美化hexo，在github上找到hexo-theme-yilia框架，git-clone到本地的博客文件夹下的themes文件夹中，更改配置文件的主题为yilia就搞定了。" class="headerlink" title="美化hexo，在github上找到hexo-theme-yilia框架，git clone到本地的博客文件夹下的themes文件夹中，更改配置文件的主题为yilia就搞定了。"></a>美化hexo，在github上找到hexo-theme-yilia框架，git clone到本地的博客文件夹下的themes文件夹中，更改配置文件的主题为yilia就搞定了。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p>theme: landscape –&gt; theme: yilia</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>退出并推送到远端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><hr><h2 id="五、一些坑"><a href="#五、一些坑" class="headerlink" title="五、一些坑"></a>五、一些坑</h2><h3 id="微信分享异常"><a href="#微信分享异常" class="headerlink" title="微信分享异常"></a>微信分享异常</h3><p>主文件夹下yml把url设置正确，再使用//api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data= 或者 <a href="http://qr.liantu.com/api.php?text=" target="_blank" rel="noopener">http://qr.liantu.com/api.php?text=</a> 修改themes\yilia\layout\_partial\post\share.ejs即可。注意post中的md文档命名只能是英文，而且不能有空格等特殊字符。</p><h3 id="对整个流程较为熟悉后："><a href="#对整个流程较为熟悉后：" class="headerlink" title="对整个流程较为熟悉后："></a>对整个流程较为熟悉后：</h3><ul><li><mark>备份与恢复</mark>——参考下面第三条链接</li><li>使用<mark>SSH连接Github</mark>——参考第四条链接</li><li>添加<mark>Valine评论系统</mark>——参考第五条链接</li><li><mark>给文章增加目录</mark>(博客增加相册功能也可参考该博主的文章)——参考第六条链接</li><li><mark>Hexo与Mathjax的冲突及解决方案</mark>——参考第七条链接</li><li><mark>关于备份其他主题到远程仓库是灰色文件夹的解决办法</mark>——参考第八条链接</li><li>使用<mark> yilia-plus </mark>后仍想使用<mark> Valine 评论系统 </mark>——参考第九条链接</li><li>推送到<mark> Git 仓库配置 SSH</mark>——参考第十条链接</li><li>推送<mark>本地文件到远程仓库起冲突</mark>——参考第十一条链接</li></ul><hr><h2 id="六、参考内容"><a href="#六、参考内容" class="headerlink" title="六、参考内容"></a>六、参考内容</h2><ol><li><a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">https://www.bilibili.com/video/av44544186</a></li><li><a href="http://dongshuyan.com/2016/04/07/%E6%80%8E%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">http://dongshuyan.com/2016/04/07/%E6%80%8E%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/</a></li><li><a href="https://meetes.top/2018/03/01/Hexo%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/" target="_blank" rel="noopener">https://meetes.top/2018/03/01/Hexo%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</a></li><li><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li><li><a href="https://blog.xxwhite.com/2017/Valine.html" target="_blank" rel="noopener">https://blog.xxwhite.com/2017/Valine.html</a></li><li><a href="http://lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/" target="_blank" rel="noopener">http://lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/</a></li><li><a href="https://segmentfault.com/a/1190000007261752" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007261752</a></li><li><a href="https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/" target="_blank" rel="noopener">https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/</a></li><li><a href="https://blog.csdn.net/weixin_44330881/article/details/102819061" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44330881/article/details/102819061</a></li><li><a href="https://fzy15116089232.blog.csdn.net/article/details/111537943" target="_blank" rel="noopener">https://fzy15116089232.blog.csdn.net/article/details/111537943</a></li><li><a href="https://my.oschina.net/u/3707314/blog/1788723" target="_blank" rel="noopener">https://my.oschina.net/u/3707314/blog/1788723</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、环境准备&quot;&gt;&lt;a href=&quot;#一、环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境准备&quot;&gt;&lt;/a&gt;一、环境准备&lt;/h2&gt;&lt;p&gt;以Mac Os系统为例：&lt;/p&gt;
&lt;h3 id=&quot;1、安装nodejs（去官网下载LTS版本）和-git&quot;&gt;&lt;a href=&quot;#1、安装nodejs（去官网下载LTS版本）和-git&quot; class=&quot;headerlink&quot; title=&quot;1、安装nodejs（去官网下载LTS版本）和 git&quot;&gt;&lt;/a&gt;1、安装nodejs（去官网下载LTS版本）和 git&lt;/h3&gt;&lt;p&gt;确保安装成功 node -v 和 npm -v 测试一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="//georgeju95.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
